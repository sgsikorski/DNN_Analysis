Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: mnist_instances.csv
  results_file: out.txt
  root_path: ../../props/mnist
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: false
  save_output: false
  output_file: out.pkl
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 1024
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: -1
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    apply_output_constraints_to: []
    disable_optimization: []
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: true
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 32
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.001
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      shortlist_size: 500
      loose_tanh_threshold: null
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_zero_crossing_score: false
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: diversed_PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Sun Apr 21 23:58:47 2024 on gpusrv04
no customized start/end sample, testing all samples in mnist_instances.csv
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00164507, -0.01367846, -0.01010457, -0.01394473,  0.00165974,
         -0.00141443, -0.00192677,  1.01394534,  0.00164498, -0.00966380]],
       device='cuda:0')
diversed PGD initialization time: 0.8265
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00165608, -0.01365209, -0.01000597, -0.01391035,  0.00165370,
          -0.00137664, -0.00190318,  1.01376200,  0.00167783, -0.00973166],
         [ 0.00165608, -0.01365209, -0.01000597, -0.01391035,  0.00165370,
          -0.00137664, -0.00190318,  1.01376200,  0.00167783, -0.00973166]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01210594, 1.02741408, 1.02376795, 1.02767229, 1.01210833,
          1.01513863, 1.01566517, 1.01208413, 1.02349365]]], device='cuda:0')
number of violation:  0
Attack finished in 24.5740 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00164507, -0.01367846, -0.01010457, -0.01394473,  0.00165974,
         -0.00141443, -0.00192677,  1.01394534,  0.00164498, -0.00966380]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01210582, 1.02741396, 1.02376795, 1.02767217, 1.01210797, 1.01513863,
         1.01566517, 1.01208413, 1.02349138]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9057 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.18983611e-02, -3.38828713e-02,  1.03310144e+00, -1.87858939e-02,
         -5.84031269e-03,  5.10022789e-03, -1.68263465e-02, -2.70505548e-02,
         -4.50558960e-04, -1.51604563e-02]], device='cuda:0')
diversed PGD initialization time: 0.1439
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.18943416e-02, -3.38648930e-02,  1.03306150e+00, -1.87801868e-02,
          -5.83393127e-03,  5.10053337e-03, -1.68189332e-02, -2.70444602e-02,
          -4.50797379e-04, -1.51542500e-02],
         [-1.18943416e-02, -3.38648930e-02,  1.03306150e+00, -1.87801868e-02,
          -5.83393127e-03,  5.10053337e-03, -1.68189332e-02, -2.70444602e-02,
          -4.50797379e-04, -1.51542500e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.04495585, 1.06692636, 1.05184174, 1.03889549, 1.02796102,
          1.04988039, 1.06010592, 1.03351235, 1.04821575]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6864 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.18983611e-02, -3.38828713e-02,  1.03310144e+00, -1.87858939e-02,
         -5.84031269e-03,  5.10022789e-03, -1.68263465e-02, -2.70505548e-02,
         -4.50558960e-04, -1.51604563e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04495358, 1.06691885, 1.05183959, 1.03889060, 1.02796102, 1.04987812,
         1.06009912, 1.03351152, 1.04821193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9057 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.65648013e-03,  1.00394428e+00, -7.36819208e-03, -4.99929488e-03,
         -5.35029545e-03, -2.13568658e-03, -4.29180264e-03, -4.78178263e-05,
         -4.20182198e-03,  6.69531524e-04]], device='cuda:0')
diversed PGD initialization time: 0.1282
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.64897367e-03,  1.00380099e+00, -7.33837485e-03, -4.97949123e-03,
          -5.34067675e-03, -2.11843103e-03, -4.28910926e-03, -2.24709511e-05,
          -4.18310612e-03,  6.90832734e-04],
         [-1.64897367e-03,  1.00380099e+00, -7.33837485e-03, -4.97949123e-03,
          -5.34067675e-03, -2.11843103e-03, -4.28910926e-03, -2.24709511e-05,
          -4.18310612e-03,  6.90832734e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00545001, 1.01113939, 1.00878048, 1.00914168, 1.00591946,
          1.00809014, 1.00382352, 1.00798404, 1.00311017]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6939 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.65648013e-03,  1.00394428e+00, -7.36819208e-03, -4.99929488e-03,
         -5.35029545e-03, -2.13568658e-03, -4.29180264e-03, -4.78178263e-05,
         -4.20182198e-03,  6.69531524e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00544953, 1.01113844, 1.00878000, 1.00914133, 1.00591910, 1.00808847,
         1.00382316, 1.00798392, 1.00311005]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8104 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.01251197, -0.01503862, -0.00750864, -0.01476592, -0.01233387,
          0.00799956, -0.00542090, -0.01942389, -0.00127944, -0.01266499]],
       device='cuda:0')
diversed PGD initialization time: 0.1256
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.01242268, -0.01504651, -0.00747880, -0.01476249, -0.01234287,
           0.00801337, -0.00536871, -0.01942933, -0.00127136, -0.01265320],
         [ 1.01242268, -0.01504651, -0.00747880, -0.01476249, -0.01234287,
           0.00801337, -0.00536871, -0.01942933, -0.00127136, -0.01265320]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.02746916, 1.01990151, 1.02718520, 1.02476549, 1.00440931,
          1.01779139, 1.03185201, 1.01369405, 1.02507591]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6682 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.01251197, -0.01503862, -0.00750864, -0.01476592, -0.01233387,
          0.00799956, -0.00542090, -0.01942389, -0.00127944, -0.01266499]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.02746248, 1.01989925, 1.02717662, 1.02476144, 1.00440931, 1.01778960,
         1.03184032, 1.01368940, 1.02507019]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8220 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00403238,  0.00381503,  0.01022679,  0.00528147,  0.93259925,
          0.00372205,  0.00464892,  0.00155434,  0.00391795,  0.00146757]],
       device='cuda:0')
diversed PGD initialization time: 0.1461
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00403873,  0.00382139,  0.01023461,  0.00528406,  0.93253517,
           0.00372500,  0.00464845,  0.00155693,  0.00391873,  0.00146981],
         [-0.00403873,  0.00382139,  0.01023461,  0.00528406,  0.93253517,
           0.00372500,  0.00464845,  0.00155693,  0.00391873,  0.00146981]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.93657392, 0.92871380, 0.92230058, 0.92725110, 0.92881018,
          0.92788672, 0.93097824, 0.92861646, 0.93106538]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7566 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00403238,  0.00381503,  0.01022679,  0.00528147,  0.93259925,
          0.00372205,  0.00464892,  0.00155434,  0.00391795,  0.00146757]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93657357, 0.92871332, 0.92230058, 0.92725098, 0.92881006, 0.92788643,
         0.93097657, 0.92861629, 0.93106055]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8766 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00208712,  1.01089036, -0.00870283, -0.00610587, -0.00577037,
         -0.00314745, -0.00354713, -0.00162911, -0.00595046, -0.00117508]],
       device='cuda:0')
diversed PGD initialization time: 0.1298
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00207930,  1.01074529, -0.00867437, -0.00608553, -0.00576076,
          -0.00313096, -0.00354181, -0.00160523, -0.00593274, -0.00115532],
         [-0.00207930,  1.01074529, -0.00867437, -0.00608553, -0.00576076,
          -0.00313096, -0.00354181, -0.00160523, -0.00593274, -0.00115532]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01282454, 1.01941967, 1.01683080, 1.01650608, 1.01387620,
          1.01428711, 1.01235056, 1.01667798, 1.01190066]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7039 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00208712,  1.01089036, -0.00870283, -0.00610587, -0.00577037,
         -0.00314745, -0.00354713, -0.00162911, -0.00595046, -0.00117508]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01282454, 1.01941943, 1.01683068, 1.01650596, 1.01387608, 1.01428688,
         1.01235044, 1.01667786, 1.01190054]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-5.43513522e-03, -4.43323702e-03,  6.31228089e-04, -3.16604972e-03,
          9.90533829e-01, -2.81823426e-03,  1.07269734e-04, -6.70215487e-03,
         -1.53591484e-03,  7.75769353e-04]], device='cuda:0')
diversed PGD initialization time: 0.1332
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.44298068e-03, -4.43279743e-03,  6.30393624e-04, -3.17014009e-03,
           9.90499854e-01, -2.82015651e-03,  1.03481114e-04, -6.69781864e-03,
          -1.54004246e-03,  7.83212483e-04],
         [-5.44298068e-03, -4.43279743e-03,  6.30393624e-04, -3.17014009e-03,
           9.90499854e-01, -2.82015651e-03,  1.03481114e-04, -6.69781864e-03,
          -1.54004246e-03,  7.83212483e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99594283, 0.99493265, 0.98986948, 0.99366999, 0.99331999,
          0.99039638, 0.99719769, 0.99203992, 0.98971665]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6808 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-5.43513522e-03, -4.43323702e-03,  6.31228089e-04, -3.16604972e-03,
          9.90533829e-01, -2.81823426e-03,  1.07269734e-04, -6.70215487e-03,
         -1.53591484e-03,  7.75769353e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99593538, 0.99493015, 0.98986435, 0.99366426, 0.99331653, 0.99039251,
         0.99719071, 0.99203503, 0.98971653]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8095 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 7.97537342e-03,  2.51879692e-02,  5.06376699e-02,  4.01139259e-04,
         -5.97523041e-02,  9.76528972e-03,  1.19148381e-02, -7.26505965e-02,
          1.46179572e-02,  9.88191426e-01]], device='cuda:0')
diversed PGD initialization time: 0.1278
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 7.98785314e-03,  2.51989812e-02,  5.06730825e-02,  4.04566526e-04,
          -5.96307926e-02,  9.79353487e-03,  1.19232051e-02, -7.27145523e-02,
           1.46325231e-02,  9.87999439e-01],
         [ 7.98785314e-03,  2.51989812e-02,  5.06730825e-02,  4.04566526e-04,
          -5.96307926e-02,  9.79353487e-03,  1.19232051e-02, -7.27145523e-02,
           1.46325231e-02,  9.87999439e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98001158, 0.96280044, 0.93732637, 0.98759484, 1.04763019,
          0.97820592, 0.97607625, 1.06071401, 0.97336692]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7045 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 7.97537342e-03,  2.51879692e-02,  5.06376699e-02,  4.01139259e-04,
         -5.97523041e-02,  9.76528972e-03,  1.19148381e-02, -7.26505965e-02,
          1.46179572e-02,  9.88191426e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98000681, 0.96279633, 0.93732643, 0.98758721, 1.04758084, 0.97819841,
         0.97607195, 1.06067443, 0.97336245]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8404 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.05062565, 0.02459314, 0.05356210, 0.00677804, 0.01399441, 0.55447346,
         0.13357574, 0.03555641, 0.06253521, 0.04559474]], device='cuda:0')
diversed PGD initialization time: 0.1251
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.05073863, 0.02463785, 0.05364394, 0.00680853, 0.01403535,
          0.55368888, 0.13377453, 0.03563513, 0.06265606, 0.04567914],
         [0.05073863, 0.02463785, 0.05364394, 0.00680853, 0.01403535,
          0.55368888, 0.13377453, 0.03563513, 0.06265606, 0.04567914]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.50295025, 0.52905107, 0.50004494, 0.54688036, 0.53965354,
          0.41991436, 0.51805377, 0.49103284, 0.50800973]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7617 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[0.05062565, 0.02459314, 0.05356210, 0.00677804, 0.01399441, 0.55447346,
         0.13357574, 0.03555641, 0.06253521, 0.04559474]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 0] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.50293630, 0.52903616, 0.50002640, 0.54686552, 0.53964037, 0.41991425,
         0.51803595, 0.49102440, 0.50799680]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 1.2265 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00175483,  0.00397733,  0.00341161,  0.00778066,  0.01109941,
          0.00465090,  0.00381281, -0.01488568,  0.00499930,  0.98165607]],
       device='cuda:0')
diversed PGD initialization time: 0.1249
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00176024,  0.00398391,  0.00341970,  0.00779185,  0.01110564,
           0.00464676,  0.00381597, -0.01489870,  0.00499963,  0.98162699],
         [ 0.00176024,  0.00398391,  0.00341970,  0.00779185,  0.01110564,
           0.00464676,  0.00381597, -0.01489870,  0.00499963,  0.98162699]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97986674, 0.97764307, 0.97820729, 0.97383511, 0.97052133,
          0.97698021, 0.97781104, 0.99652570, 0.97662735]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6929 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00175483,  0.00397733,  0.00341161,  0.00778066,  0.01109941,
          0.00465090,  0.00381281, -0.01488568,  0.00499930,  0.98165607]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97986513, 0.97764117, 0.97820532, 0.97383255, 0.97052145, 0.97697824,
         0.97780865, 0.99652106, 0.97662508]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8147 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00468707e+00, -1.58774406e-02,  5.92753291e-04, -6.19041920e-03,
         -1.60357989e-02, -1.54814571e-02, -9.72966850e-03, -1.74486488e-02,
          9.02578235e-04, -1.02806911e-02]], device='cuda:0')
diversed PGD initialization time: 0.1281
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00466526e+00, -1.58777833e-02,  6.02170825e-04, -6.18834794e-03,
          -1.60369016e-02, -1.54853463e-02, -9.71949100e-03, -1.74481273e-02,
           9.05252993e-04, -1.02787241e-02],
         [ 1.00466526e+00, -1.58777833e-02,  6.02170825e-04, -6.18834794e-03,
          -1.60369016e-02, -1.54853463e-02, -9.71949100e-03, -1.74481273e-02,
           9.05252993e-04, -1.02787241e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.02054310, 1.00406313, 1.01085365, 1.02070212, 1.02015066,
          1.01438475, 1.02211332, 1.00375998, 1.01494396]]], device='cuda:0')
number of violation:  0
Attack finished in 0.8011 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00468707e+00, -1.58774406e-02,  5.92753291e-04, -6.19041920e-03,
         -1.60357989e-02, -1.54814571e-02, -9.72966850e-03, -1.74486488e-02,
          9.02578235e-04, -1.02806911e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.02054012, 1.00406158, 1.01085103, 1.02069628, 1.02014709, 1.01438272,
         1.02211082, 1.00376022, 1.01494348]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9321 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.75900757e-04, -8.18818808e-06,  6.20110333e-03,  1.39238089e-02,
         -3.04193422e-03, -1.74384713e-02,  1.01692677e+00, -2.97103822e-03,
          5.01153618e-03,  6.35114312e-03]], device='cuda:0')
diversed PGD initialization time: 0.1261
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.67407095e-04, -1.00061297e-05,  6.19982183e-03,  1.39119476e-02,
          -3.04278731e-03, -1.73999146e-02,  1.01689506e+00, -2.97169387e-03,
           5.00845164e-03,  6.34920597e-03],
         [-1.67407095e-04, -1.00061297e-05,  6.19982183e-03,  1.39119476e-02,
          -3.04278731e-03, -1.73999146e-02,  1.01689506e+00, -2.97169387e-03,
           5.00845164e-03,  6.34920597e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01706243, 1.01690507, 1.01069522, 1.00298309, 1.01993787,
          1.03429496, 1.01986670, 1.01188660, 1.01054585]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7290 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.75900757e-04, -8.18818808e-06,  6.20110333e-03,  1.39238089e-02,
         -3.04193422e-03, -1.74384713e-02,  1.01692677e+00, -2.97103822e-03,
          5.01153618e-03,  6.35114312e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01706159, 1.01690412, 1.01069474, 1.00298321, 1.01993740, 1.03429222,
         1.01986587, 1.01188660, 1.01054537]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8628 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.27175313e-04,  6.36265427e-03,  4.13963199e-03,  5.83321601e-03,
         -7.98184425e-04,  4.91899252e-03,  1.67503953e-03, -1.67421997e-03,
          3.20433080e-03,  9.80199993e-01]], device='cuda:0')
diversed PGD initialization time: 0.1244
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 4.30148095e-04,  6.36713952e-03,  4.14578617e-03,  5.83454967e-03,
          -8.01328570e-04,  4.91894782e-03,  1.67695060e-03, -1.68594718e-03,
           3.20843607e-03,  9.80187416e-01],
         [ 4.30148095e-04,  6.36713952e-03,  4.14578617e-03,  5.83454967e-03,
          -8.01328570e-04,  4.91894782e-03,  1.67695060e-03, -1.68594718e-03,
           3.20843607e-03,  9.80187416e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97975725, 0.97382027, 0.97604162, 0.97435284, 0.98098874,
          0.97526848, 0.97851044, 0.98187339, 0.97697896]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7160 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 4.27175313e-04,  6.36265427e-03,  4.13963199e-03,  5.83321601e-03,
         -7.98184425e-04,  4.91899252e-03,  1.67503953e-03, -1.67421997e-03,
          3.20433080e-03,  9.80199993e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97975749, 0.97382033, 0.97604185, 0.97435158, 0.98098397, 0.97526735,
         0.97851026, 0.98185498, 0.97697914]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8156 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99935031, -0.01237392,  0.01119424,  0.00472860, -0.01393690,
         -0.02420676, -0.01226456, -0.01342438, -0.00454794, -0.00889340]],
       device='cuda:0')
diversed PGD initialization time: 0.1261
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99931711, -0.01236878,  0.01120518,  0.00473738, -0.01393567,
          -0.02421907, -0.01225561, -0.01341528, -0.00454292, -0.00888544],
         [ 0.99931711, -0.01236878,  0.01120518,  0.00473738, -0.01393567,
          -0.02421907, -0.01225561, -0.01341528, -0.00454292, -0.00888544]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01168585, 0.98811191, 0.99457973, 1.01325274, 1.02353621,
          1.01157272, 1.01273239, 1.00386000, 1.00820255]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7184 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99935031, -0.01237392,  0.01119424,  0.00472860, -0.01393690,
         -0.02420676, -0.01226456, -0.01342438, -0.00454794, -0.00889340]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01168346, 0.98811203, 0.99457818, 1.01324975, 1.02353132, 1.01157117,
         1.01272845, 1.00385714, 1.00820017]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 7.78149813e-04,  9.67111707e-01,  1.85154378e-03, -1.64672732e-03,
         -4.16586176e-03, -1.94773823e-03,  6.49397075e-03,  2.59950757e-03,
         -7.18242675e-03, -4.71733510e-03]], device='cuda:0')
diversed PGD initialization time: 0.1304
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 7.85272568e-04,  9.66985106e-01,  1.87571347e-03, -1.62923336e-03,
          -4.15793434e-03, -1.93501264e-03,  6.50241226e-03,  2.61840224e-03,
          -7.16938823e-03, -4.70371544e-03],
         [ 7.85272568e-04,  9.66985106e-01,  1.87571347e-03, -1.62923336e-03,
          -4.15793434e-03, -1.93501264e-03,  6.50241226e-03,  2.61840224e-03,
          -7.16938823e-03, -4.70371544e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.96619982, 0.96510941, 0.96861434, 0.97114307, 0.96892011,
          0.96048272, 0.96436667, 0.97415447, 0.97168881]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7370 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 7.78149813e-04,  9.67111707e-01,  1.85154378e-03, -1.64672732e-03,
         -4.16586176e-03, -1.94773823e-03,  6.49397075e-03,  2.59950757e-03,
         -7.18242675e-03, -4.71733510e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.96619976, 0.96510917, 0.96861422, 0.97114283, 0.96891963, 0.96048301,
         0.96436644, 0.97415382, 0.97168791]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8414 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01031997, -0.01604795,  0.00183789, -0.00606862, -0.04290133,
          1.02160561, -0.00935398, -0.03993075, -0.00886821,  0.00310133]],
       device='cuda:0')
diversed PGD initialization time: 0.1250
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01032524, -0.01604534,  0.00184652, -0.00605571, -0.04290302,
           1.02156830, -0.00936004, -0.03993036, -0.00886432,  0.00310713],
         [-0.01032524, -0.01604534,  0.00184652, -0.00605571, -0.04290302,
           1.02156830, -0.00936004, -0.03993036, -0.00886432,  0.00310713]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.03189349, 1.03761363, 1.01972175, 1.02762401, 1.06447136,
          1.03092837, 1.06149864, 1.03043258, 1.01846123]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7071 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.01031997, -0.01604795,  0.00183789, -0.00606862, -0.04290133,
          1.02160561, -0.00935398, -0.03993075, -0.00886821,  0.00310133]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.03188968, 1.03761160, 1.01972091, 1.02762282, 1.06445944, 1.03092229,
         1.06149065, 1.03043175, 1.01846111]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8537 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.83600187e-03,  8.57228786e-03,  1.25346780e-02,  1.96565241e-02,
         -1.97593123e-04,  4.51152772e-03,  7.45961070e-03, -1.01623982e-02,
          5.03894687e-03,  9.55177605e-01]], device='cuda:0')
diversed PGD initialization time: 0.1296
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.83911249e-03,  8.58133286e-03,  1.25485212e-02,  1.96762234e-02,
          -1.65212899e-04,  4.50800359e-03,  7.46420026e-03, -1.01354718e-02,
           5.03653288e-03,  9.55071092e-01],
         [ 1.83911249e-03,  8.58133286e-03,  1.25485212e-02,  1.96762234e-02,
          -1.65212899e-04,  4.50800359e-03,  7.46420026e-03, -1.01354718e-02,
           5.03653288e-03,  9.55071092e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.95323199, 0.94648975, 0.94252259, 0.93539488, 0.95523632,
          0.95056307, 0.94760692, 0.96520656, 0.95003456]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7161 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.83600187e-03,  8.57228786e-03,  1.25346780e-02,  1.96565241e-02,
         -1.97593123e-04,  4.51152772e-03,  7.45961070e-03, -1.01623982e-02,
          5.03894687e-03,  9.55177605e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.95323133, 0.94648826, 0.94252139, 0.93539470, 0.95523447, 0.95055878,
         0.94760644, 0.96519858, 0.95003068]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8595 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 6.80774450e-04, -1.42060444e-02, -1.42274648e-02, -9.70579684e-03,
          5.09214029e-03, -1.87484920e-03, -2.71189958e-03,  1.00247860e+00,
          1.12742186e-03,  1.52814388e-03]], device='cuda:0')
diversed PGD initialization time: 0.1265
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 6.80126250e-04, -1.42019764e-02, -1.42104030e-02, -9.68968868e-03,
           5.10104373e-03, -1.86841190e-03, -2.71005929e-03,  1.00241768e+00,
           1.13209337e-03,  1.54379010e-03],
         [ 6.80126250e-04, -1.42019764e-02, -1.42104030e-02, -9.68968868e-03,
           5.10104373e-03, -1.86841190e-03, -2.71005929e-03,  1.00241768e+00,
           1.13209337e-03,  1.54379010e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00173759, 1.01661968, 1.01662803, 1.01210737, 0.99731666,
          1.00428605, 1.00512779, 1.00128555, 1.00087392]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7123 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 6.80774450e-04, -1.42060444e-02, -1.42274648e-02, -9.70579684e-03,
          5.09214029e-03, -1.87484920e-03, -2.71189958e-03,  1.00247860e+00,
          1.12742186e-03,  1.52814388e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00173652, 1.01661825, 1.01662552, 1.01210666, 0.99731642, 1.00428534,
         1.00512707, 1.00128484, 1.00087237]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8537 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01870070, -0.02688348, -0.01832844,  0.87718892, -0.04482957,
          0.07153806, -0.01994596, -0.07481536, -0.01444381,  0.23745129]],
       device='cuda:0')
diversed PGD initialization time: 0.1281
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01873837, -0.02695476, -0.01843110,  0.87665713, -0.04487571,
           0.07139711, -0.01997698, -0.07510556, -0.01450974,  0.23878938],
         [-0.01873837, -0.02695476, -0.01843110,  0.87665713, -0.04487571,
           0.07139711, -0.01997698, -0.07510556, -0.01450974,  0.23878938]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.89539552, 0.90361190, 0.89508820, 0.92153287, 0.80526000,
          0.89663410, 0.95176268, 0.89116687, 0.63786775]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7046 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.01870070, -0.02688348, -0.01832844,  0.87718892, -0.04482957,
          0.07153806, -0.01994596, -0.07481536, -0.01444381,  0.23745129]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89529324, 0.90348291, 0.89492249, 0.92140442, 0.80483717, 0.89652449,
         0.95147228, 0.89103425, 0.63786781]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.00003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=9.804964065551758e-06, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-9.15247574e-03, -3.13531607e-03, -1.09000504e-03, -4.64010239e-03,
          9.78728592e-01, -3.11692059e-03, -6.09185547e-04, -6.08648360e-03,
         -3.38897854e-03,  2.88482010e-03]], device='cuda:0')
diversed PGD initialization time: 0.1303
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.15894657e-03, -3.13510001e-03, -1.08769536e-03, -4.64215875e-03,
           9.78680432e-01, -3.11864913e-03, -6.13048673e-04, -6.07848167e-03,
          -3.39204818e-03,  2.90013850e-03],
         [-9.15894657e-03, -3.13510001e-03, -1.08769536e-03, -4.64215875e-03,
           9.78680432e-01, -3.11864913e-03, -6.13048673e-04, -6.07848167e-03,
          -3.39204818e-03,  2.90013850e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98783940, 0.98181552, 0.97976816, 0.98332262, 0.98179907,
          0.97929347, 0.98475891, 0.98207247, 0.97578031]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7239 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-9.15247574e-03, -3.13531607e-03, -1.09000504e-03, -4.64010239e-03,
          9.78728592e-01, -3.11692059e-03, -6.09185547e-04, -6.08648360e-03,
         -3.38897854e-03,  2.88482010e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98783481, 0.98181355, 0.97976506, 0.98331898, 0.98179668, 0.97929078,
         0.98475415, 0.98206937, 0.97578025]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.51739100e-03, -1.14645138e-02, -2.21045315e-03, -1.11013651e-02,
          1.28326565e-03,  1.65017694e-03, -8.59051943e-06,  9.98714387e-01,
          4.30980325e-03, -1.49127543e-02]], device='cuda:0')
diversed PGD initialization time: 0.1299
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00532037, -0.00645760,  0.00533637, -0.00356813,  0.00106855,
           0.00771188,  0.00296322,  0.96488315,  0.00898704, -0.01832491],
         [ 0.00532037, -0.00645760,  0.00533637, -0.00356813,  0.00106855,
           0.00771188,  0.00296322,  0.96488315,  0.00898704, -0.01832491]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.95956278, 0.97134078, 0.95954680, 0.96845126, 0.96381462,
          0.95717126, 0.96191990, 0.95589614, 0.98320806]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7121 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 2.51739100e-03, -1.14645138e-02, -2.21045315e-03, -1.11013651e-02,
          1.28326565e-03,  1.65017694e-03, -8.59051943e-06,  9.98714387e-01,
          4.30980325e-03, -1.49127543e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 4] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.95623946, 0.96859592, 0.95523739, 0.96562922, 0.96100038, 0.95454544,
         0.95940340, 0.95327193, 0.98018491]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 1.0390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.13261379e-02, -3.23213711e-02,  1.03091943e+00, -1.81443095e-02,
         -4.69288602e-03,  4.64849174e-03, -1.60730034e-02, -2.56946534e-02,
         -4.54813242e-04, -1.41304731e-02]], device='cuda:0')
diversed PGD initialization time: 0.1301
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.12368725e-02, -3.11268717e-02,  1.02722955e+00, -1.76689327e-02,
          -4.48545441e-03,  4.92928177e-03, -1.55108646e-02, -2.55620033e-02,
          -4.71390784e-04, -1.38976127e-02],
         [-1.12368725e-02, -3.11268717e-02,  1.02722955e+00, -1.76689327e-02,
          -4.48545441e-03,  4.92928177e-03, -1.55108646e-02, -2.55620033e-02,
          -4.71390784e-04, -1.38976127e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.03846645, 1.05835640, 1.04489851, 1.03171504, 1.02230024,
          1.04274046, 1.05279160, 1.02770090, 1.04112720]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7234 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.13261379e-02, -3.23213711e-02,  1.03091943e+00, -1.81443095e-02,
         -4.69288602e-03,  4.64849174e-03, -1.60730034e-02, -2.56946534e-02,
         -4.54813242e-04, -1.41304731e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 4] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.03537679, 1.05375171, 1.04242814, 1.02830374, 1.02054071, 1.04013276,
         1.04895842, 1.02560747, 1.03819168]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9413 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00146894,  0.99941158, -0.00554885, -0.00461191, -0.00510417,
         -0.00142894, -0.00483771,  0.00134622, -0.00344575,  0.00152563]],
       device='cuda:0')
diversed PGD initialization time: 0.1254
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.09747726e-04,  9.87010002e-01, -3.24472785e-03, -2.82517076e-03,
          -4.24729660e-03,  1.68606639e-05, -4.38673794e-03,  3.34158540e-03,
          -1.90401822e-03,  3.29861045e-03],
         [-8.09747726e-04,  9.87010002e-01, -3.24472785e-03, -2.82517076e-03,
          -4.24729660e-03,  1.68606639e-05, -4.38673794e-03,  3.34158540e-03,
          -1.90401822e-03,  3.29861045e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98781973, 0.99025476, 0.98983514, 0.99125731, 0.98699313,
          0.99139673, 0.98366845, 0.98891401, 0.98371136]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7290 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00146894,  0.99941158, -0.00554885, -0.00461191, -0.00510417,
         -0.00142894, -0.00483771,  0.00134622, -0.00344575,  0.00152563]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 10] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98364651, 0.98554403, 0.98530722, 0.98705035, 0.98260891, 0.98714322,
         0.97908789, 0.98446798, 0.97921085]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00740016e+00, -1.49333701e-02, -5.45820594e-03, -1.42644942e-02,
         -1.20856501e-02,  8.49673897e-03, -1.95290148e-03, -1.92900449e-02,
         -9.40658152e-04, -1.17634833e-02]], device='cuda:0')
diversed PGD initialization time: 0.1262
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00258553e+00, -1.52323470e-02, -3.97025049e-03, -1.38009042e-02,
          -1.26550384e-02,  8.95261019e-03,  9.08784568e-04, -1.93006247e-02,
          -5.80228865e-04, -1.09961927e-02],
         [ 1.00258553e+00, -1.52323470e-02, -3.97025049e-03, -1.38009042e-02,
          -1.26550384e-02,  8.95261019e-03,  9.08784568e-04, -1.93006247e-02,
          -5.80228865e-04, -1.09961927e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01781785, 1.00655580, 1.01638639, 1.01524055, 0.99363291,
          1.00167680, 1.02188611, 1.00316572, 1.01358175]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7179 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00740016e+00, -1.49333701e-02, -5.45820594e-03, -1.42644942e-02,
         -1.20856501e-02,  8.49673897e-03, -1.95290148e-03, -1.92900449e-02,
         -9.40658152e-04, -1.17634833e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 4] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01227796, 0.99895978, 1.01005352, 1.00985801, 0.98714781, 0.99302423,
         1.01577961, 0.99664950, 1.00694644]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8193 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.00589204e-03,  3.47764045e-03,  1.00905448e-02,  5.59891760e-03,
          9.37581539e-01,  3.75054777e-03,  4.96852398e-03,  1.74240768e-03,
          4.25089151e-03,  4.71681356e-04]], device='cuda:0')
diversed PGD initialization time: 0.1265
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00266962,  0.00461496,  0.01282524,  0.00696996,  0.93206227,
           0.00507615,  0.00580409, -0.00178297,  0.00545951, -0.00186151],
         [-0.00266962,  0.00461496,  0.01282524,  0.00696996,  0.93206227,
           0.00507615,  0.00580409, -0.00178297,  0.00545951, -0.00186151]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.93473190, 0.92744732, 0.91923702, 0.92509234, 0.92698610,
          0.92625821, 0.93384522, 0.92660278, 0.93392378]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7250 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-3.00589204e-03,  3.47764045e-03,  1.00905448e-02,  5.59891760e-03,
          9.37581539e-01,  3.75054777e-03,  4.96852398e-03,  1.74240768e-03,
          4.25089151e-03,  4.71681356e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 1] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93301612, 0.92522991, 0.91678208, 0.92317212, 0.92487371, 0.92434126,
         0.92803305, 0.92463052, 0.92897320]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9479 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.87143311e-03,  1.00658035e+00, -7.67938793e-03, -5.52952290e-03,
         -5.48182428e-03, -2.56019831e-03, -3.68634984e-03, -7.24926591e-04,
         -5.26501238e-03, -3.83988023e-04]], device='cuda:0')
diversed PGD initialization time: 0.1301
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.08196214e-03,  9.91724372e-01, -4.70359623e-03, -3.44783813e-03,
          -4.48628888e-03, -8.10138881e-04, -3.29829752e-03,  1.81104243e-03,
          -3.36111337e-03,  1.76928937e-03],
         [-1.08196214e-03,  9.91724372e-01, -4.70359623e-03, -3.44783813e-03,
          -4.48628888e-03, -8.10138881e-04, -3.29829752e-03,  1.81104243e-03,
          -3.36111337e-03,  1.76928937e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99280632, 0.99642795, 0.99517220, 0.99621063, 0.99253452,
          0.99502265, 0.98991334, 0.99508548, 0.98995507]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7240 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.87143311e-03,  1.00658035e+00, -7.67938793e-03, -5.52952290e-03,
         -5.48182428e-03, -2.56019831e-03, -3.68634984e-03, -7.24926591e-04,
         -5.26501238e-03, -3.83988023e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99118972, 0.99458253, 0.99342155, 0.99458122, 0.99082929, 0.99338907,
         0.98812348, 0.99335432, 0.98819870]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-4.46728989e-03, -4.46062535e-03,  1.11955404e-03, -2.52808630e-03,
          9.91718531e-01, -2.55612284e-03,  4.85099852e-04, -5.97074628e-03,
         -9.86985862e-04,  1.39549375e-04]], device='cuda:0')
diversed PGD initialization time: 0.1287
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.68248129e-03, -4.33881581e-03,  1.39869750e-03, -2.51340866e-03,
           9.88812387e-01, -2.52170116e-03,  3.83380800e-04, -5.24891913e-03,
          -1.02580339e-03,  1.80467963e-04],
         [-4.68248129e-03, -4.33881581e-03,  1.39869750e-03, -2.51340866e-03,
           9.88812387e-01, -2.52170116e-03,  3.83380800e-04, -5.24891913e-03,
          -1.02580339e-03,  1.80467963e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99349487, 0.99315119, 0.98741370, 0.99132580, 0.99133408,
          0.98842901, 0.99406129, 0.98983818, 0.98863190]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7179 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-4.46728989e-03, -4.46062535e-03,  1.11955404e-03, -2.52808630e-03,
          9.91718531e-01, -2.55612284e-03,  4.85099852e-04, -5.97074628e-03,
         -9.86985862e-04,  1.39549375e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 3] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99226868, 0.99211788, 0.98629433, 0.98885840, 0.98916662, 0.98730588,
         0.99268126, 0.98834008, 0.98721838]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00715753,  0.02359186,  0.04855848,  0.00192264, -0.06324503,
          0.01034294,  0.01123814, -0.06850450,  0.01432315,  0.99296886]],
       device='cuda:0')
diversed PGD initialization time: 0.1326
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00839580,  0.02488156,  0.05321135,  0.00493906, -0.05437002,
           0.01403899,  0.01248127, -0.06329356,  0.01638903,  0.95987105],
         [ 0.00839580,  0.02488156,  0.05321135,  0.00493906, -0.05437002,
           0.01403899,  0.01248127, -0.06329356,  0.01638903,  0.95987105]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.95147526, 0.93498951, 0.90665972, 0.95493197, 1.01424110,
          0.94583207, 0.94738978, 1.02316463, 0.94348204]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6989 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00715753,  0.02359186,  0.04855848,  0.00192264, -0.06324503,
          0.01034294,  0.01123814, -0.06850450,  0.01432315,  0.99296886]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 6, 1, 4] with unstable size 5 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94590795, 0.92991102, 0.90147150, 0.94891685, 1.00314581, 0.93969476,
         0.94194883, 1.00497186, 0.93804979]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8495 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.04939282, 0.02387626, 0.05175198, 0.00409850, 0.01357890, 0.56591380,
         0.13440976, 0.03415239, 0.06102067, 0.04386905]], device='cuda:0')
diversed PGD initialization time: 0.1391
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.06006090,  0.02877726,  0.06023294, -0.00232377,  0.01794454,
           0.49424285,  0.15623966,  0.04226202,  0.07334126,  0.05189000],
         [ 0.06006090,  0.02877726,  0.06023294, -0.00232377,  0.01794454,
           0.49424285,  0.15623966,  0.04226202,  0.07334126,  0.05189000]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.43418193, 0.46546558, 0.43400991, 0.49656662, 0.47629830,
          0.33800319, 0.45198083, 0.42090160, 0.44235283]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7116 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[0.04939282, 0.02387626, 0.05175198, 0.00409850, 0.01357890, 0.56591380,
         0.13440976, 0.03415239, 0.06102067, 0.04386905]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 3] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.40910697, 0.44248980, 0.40975201, 0.46438789, 0.45345724, 0.31532228,
         0.42785326, 0.39703214, 0.41800982]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00134947,  0.00352035,  0.00283241,  0.00693510,  0.01071202,
          0.00496317,  0.00354777, -0.01387961,  0.00495272,  0.98369271]],
       device='cuda:0')
diversed PGD initialization time: 0.1295
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00196613,  0.00426862,  0.00375366,  0.00821020,  0.01142397,
           0.00449141,  0.00390763, -0.01535730,  0.00499263,  0.98037624],
         [ 0.00196613,  0.00426862,  0.00375366,  0.00821020,  0.01142397,
           0.00449141,  0.00390763, -0.01535730,  0.00499263,  0.98037624]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97841012, 0.97610760, 0.97662258, 0.97216606, 0.96895230,
          0.97588485, 0.97646862, 0.99573356, 0.97538364]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7461 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00134947,  0.00352035,  0.00283241,  0.00693510,  0.01071202,
          0.00496317,  0.00354777, -0.01387961,  0.00495272,  0.98369271]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97820419, 0.97589236, 0.97636741, 0.97185934, 0.96895242, 0.97564244,
         0.97621161, 0.99519038, 0.97510350]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00457740e+00, -1.51691139e-02,  7.73862004e-04, -6.17752969e-03,
         -1.49776898e-02, -1.47755295e-02, -9.32712853e-03, -1.68752670e-02,
          9.53279436e-04, -9.90881026e-03]], device='cuda:0')
diversed PGD initialization time: 0.1284
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00210333, -0.01514645,  0.00203429, -0.00568543, -0.01508730,
          -0.01554052, -0.00825766, -0.01672404,  0.00113444, -0.00967985],
         [ 1.00210333, -0.01514645,  0.00203429, -0.00568543, -0.01508730,
          -0.01554052, -0.00825766, -0.01672404,  0.00113444, -0.00967985]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01724982, 1.00006902, 1.00778878, 1.01719058, 1.01764381,
          1.01036096, 1.01882732, 1.00096893, 1.01178312]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7175 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00457740e+00, -1.51691139e-02,  7.73862004e-04, -6.17752969e-03,
         -1.49776898e-02, -1.47755295e-02, -9.32712853e-03, -1.68752670e-02,
          9.53279436e-04, -9.90881026e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01701462, 1.00006890, 1.00772882, 1.01668644, 1.01677144, 1.01002324,
         1.01862955, 1.00083959, 1.01170778]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8596 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.33790076e-04, -6.59674406e-05,  6.11911714e-03,  1.31471157e-02,
         -3.03671509e-03, -1.53821632e-02,  1.01514316e+00, -2.91858613e-03,
          4.75628674e-03,  6.21328503e-03]], device='cuda:0')
diversed PGD initialization time: 0.1292
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.10640004e-03, -2.75440514e-04,  5.96898794e-03,  1.17888004e-02,
          -3.13409045e-03, -1.09694228e-02,  1.01152670e+00, -2.99379230e-03,
           4.40465659e-03,  5.99128008e-03],
         [ 1.10640004e-03, -2.75440514e-04,  5.96898794e-03,  1.17888004e-02,
          -3.13409045e-03, -1.09694228e-02,  1.01152670e+00, -2.99379230e-03,
           4.40465659e-03,  5.99128008e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01042032, 1.01180220, 1.00555778, 0.99973792, 1.01466084,
          1.02249610, 1.01452053, 1.00712204, 1.00553536]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7106 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.33790076e-04, -6.59674406e-05,  6.11911714e-03,  1.31471157e-02,
         -3.03671509e-03, -1.53821632e-02,  1.01514316e+00, -2.91858613e-03,
          4.75628674e-03,  6.21328503e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 0] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01030219, 1.01165271, 1.00542629, 0.99971467, 1.01454043, 1.02205765,
         1.01437414, 1.00708258, 1.00542712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8539 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.16355717e-04,  5.96810132e-03,  3.64410877e-03,  5.90637326e-03,
         -5.63789159e-04,  5.05304337e-03,  1.50313973e-03, -2.28032470e-04,
          2.79754400e-03,  9.80676115e-01]], device='cuda:0')
diversed PGD initialization time: 0.1295
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 4.55867499e-04,  6.47883862e-03,  4.34559584e-03,  6.05905056e-03,
          -9.16037709e-04,  5.04730642e-03,  1.72110647e-03, -1.56925619e-03,
           3.26597691e-03,  9.79261756e-01],
         [ 4.55867499e-04,  6.47883862e-03,  4.34559584e-03,  6.05905056e-03,
          -9.16037709e-04,  5.04730642e-03,  1.72110647e-03, -1.56925619e-03,
           3.26597691e-03,  9.79261756e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97880590, 0.97278291, 0.97491616, 0.97320271, 0.98017782,
          0.97421443, 0.97754067, 0.98083103, 0.97599578]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7076 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.16355717e-04,  5.96810132e-03,  3.64410877e-03,  5.90637326e-03,
         -5.63789159e-04,  5.05304337e-03,  1.50313973e-03, -2.28032470e-04,
          2.79754400e-03,  9.80676115e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 0] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97880208, 0.97278279, 0.97491390, 0.97304446, 0.97961193, 0.97407198,
         0.97750938, 0.97870374, 0.97599292]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8189 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99978060, -0.01188242,  0.01178211,  0.00464991, -0.01284328,
         -0.02346868, -0.01136737, -0.01337369, -0.00492222, -0.00893115]],
       device='cuda:0')
diversed PGD initialization time: 0.1260
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99598944, -0.01129392,  0.01303735,  0.00565543, -0.01270349,
          -0.02487331, -0.01034052, -0.01233016, -0.00434896, -0.00801846],
         [ 0.99598944, -0.01129392,  0.01303735,  0.00565543, -0.01270349,
          -0.02487331, -0.01034052, -0.01233016, -0.00434896, -0.00801846]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00728333, 0.98295212, 0.99033403, 1.00869298, 1.02086270,
          1.00633001, 1.00831962, 1.00033844, 1.00400794]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7182 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99978060, -0.01188242,  0.01178211,  0.00464991, -0.01284328,
         -0.02346868, -0.01136737, -0.01337369, -0.00492222, -0.00893115]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00650096, 0.98249191, 0.98970610, 1.00783825, 1.01978314, 1.00581133,
         1.00739229, 0.99956179, 1.00328219]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8151 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.00112091563642025, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 7.15557486e-04,  9.67903018e-01,  1.82679296e-03, -1.73644722e-03,
         -4.19412926e-03, -1.84115022e-03,  5.88857383e-03,  2.77018547e-03,
         -6.88647479e-03, -4.33072448e-03]], device='cuda:0')
diversed PGD initialization time: 0.1281
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.44554302e-03,  9.54952121e-01,  4.28321958e-03,  6.68764114e-05,
          -3.37759033e-03, -5.31263649e-04,  6.74881041e-03,  4.70353663e-03,
          -5.53903729e-03, -2.91587412e-03],
         [ 1.44554302e-03,  9.54952121e-01,  4.28321958e-03,  6.68764114e-05,
          -3.37759033e-03, -5.31263649e-04,  6.74881041e-03,  4.70353663e-03,
          -5.53903729e-03, -2.91587412e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.95350659, 0.95066893, 0.95488524, 0.95832974, 0.95548338,
          0.94820333, 0.95024860, 0.96049118, 0.95786798]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7024 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 7.15557486e-04,  9.67903018e-01,  1.82679296e-03, -1.73644722e-03,
         -4.19412926e-03, -1.84115022e-03,  5.88857383e-03,  2.77018547e-03,
         -6.88647479e-03, -4.33072448e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.95054728, 0.94727516, 0.95167130, 0.95532578, 0.95230705, 0.94526249,
         0.94691318, 0.95724261, 0.95453167]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8245 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00981359, -0.01569437,  0.00154212, -0.00682813, -0.04145129,
          1.02252412, -0.00870160, -0.03914739, -0.00898205,  0.00268251]],
       device='cuda:0')
diversed PGD initialization time: 0.1299
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01041820, -0.01539039,  0.00253852, -0.00536062, -0.04164324,
           1.01824129, -0.00939199, -0.03910524, -0.00853905,  0.00334592],
         [-0.01041820, -0.01539039,  0.00253852, -0.00536062, -0.04164324,
           1.01824129, -0.00939199, -0.03910524, -0.00853905,  0.00334592]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.02865946, 1.03363168, 1.01570272, 1.02360189, 1.05988455,
          1.02763331, 1.05734658, 1.02678037, 1.01489532]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7253 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00981359, -0.01569437,  0.00154212, -0.00682813, -0.04145129,
          1.02252412, -0.00870160, -0.03914739, -0.00898205,  0.00268251]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.02759504, 1.03301525, 1.01523519, 1.02299178, 1.05807054, 1.02634573,
         1.05590558, 1.02626979, 1.01452005]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00134907,  0.00818657,  0.01175393,  0.01791836, -0.00110397,
          0.00516304,  0.00667620, -0.00868943,  0.00543485,  0.95707518]],
       device='cuda:0')
diversed PGD initialization time: 0.1301
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00170357,  0.00922085,  0.01333776,  0.02016862,  0.00259299,
           0.00476176,  0.00720064, -0.00560330,  0.00515845,  0.94488227],
         [ 0.00170357,  0.00922085,  0.01333776,  0.02016862,  0.00259299,
           0.00476176,  0.00720064, -0.00560330,  0.00515845,  0.94488227]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.94317871, 0.93566144, 0.93154454, 0.92471367, 0.94228929,
          0.94012052, 0.93768162, 0.95048559, 0.93972385]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7282 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00134907,  0.00818657,  0.01175393,  0.01791836, -0.00110397,
          0.00516304,  0.00667620, -0.00868943,  0.00543485,  0.95707518]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 1] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94309872, 0.93550509, 0.93142235, 0.92470801, 0.94209468, 0.93964595,
         0.93765110, 0.94957513, 0.93928647]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.54470515e-04, -1.34574547e-02, -1.29752010e-02, -9.98543203e-03,
          4.99003753e-03, -1.66022778e-03, -2.44702399e-03,  1.00334549e+00,
          1.22528523e-03,  2.46569514e-04]], device='cuda:0')
diversed PGD initialization time: 0.1286
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.80448997e-04, -1.29933953e-02, -1.10363960e-02, -8.15223157e-03,
           6.00399077e-03, -9.29735601e-04, -2.23727152e-03,  9.96415138e-01,
           1.75699592e-03,  2.02889740e-03],
         [ 3.80448997e-04, -1.29933953e-02, -1.10363960e-02, -8.15223157e-03,
           6.00399077e-03, -9.29735601e-04, -2.23727152e-03,  9.96415138e-01,
           1.75699592e-03,  2.02889740e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99603468, 1.00940847, 1.00745153, 1.00456738, 0.99041116,
          0.99734485, 0.99865240, 0.99465811, 0.99438626]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7163 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 4.54470515e-04, -1.34574547e-02, -1.29752010e-02, -9.98543203e-03,
          4.99003753e-03, -1.66022778e-03, -2.44702399e-03,  1.00334549e+00,
          1.22528523e-03,  2.46569514e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99550939, 1.00872159, 1.00645530, 1.00393844, 0.98988557, 0.99678129,
         0.99811894, 0.99411201, 0.99369109]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8602 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01767755, -0.02721534, -0.01713729,  0.84864461, -0.04457254,
          0.05599551, -0.01762035, -0.08132759, -0.01291667,  0.28335267]],
       device='cuda:0')
diversed PGD initialization time: 0.1289
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01675716, -0.03118188, -0.01721253,  0.73649824, -0.03614214,
           0.02230013, -0.01140441, -0.08221275, -0.00970663,  0.42705107],
         [-0.01675716, -0.03118188, -0.01721253,  0.73649824, -0.03614214,
           0.02230013, -0.01140441, -0.08221275, -0.00970663,  0.42705107]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.75325537, 0.76768011, 0.75371075, 0.77264041, 0.71419811,
          0.74790263, 0.81871098, 0.74620485, 0.30944717]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7078 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.01767755, -0.02721534, -0.01713729,  0.84864461, -0.04457254,
          0.05599551, -0.01762035, -0.08132759, -0.01291667,  0.28335267]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 9, 1, 1] with unstable size 8 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.72097337, 0.73132664, 0.71281004, 0.73488861, 0.63415194, 0.71431178,
         0.77706844, 0.71037054, 0.25243145]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8809 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.00448366.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0011209174990653992, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.18173960e-03, -3.23732942e-03, -5.55679202e-04, -3.99413705e-03,
          9.79184031e-01, -2.90010124e-03, -2.94484198e-04, -5.15983999e-03,
         -2.86147743e-03,  3.13355029e-03]], device='cuda:0')
diversed PGD initialization time: 0.1338
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.06750560e-03, -3.14107537e-03, -4.07204032e-04, -4.32130694e-03,
           9.73782957e-01, -3.08950245e-03, -7.35953450e-04, -4.43160534e-03,
          -3.27651203e-03,  4.60092723e-03],
         [-9.06750560e-03, -3.14107537e-03, -4.07204032e-04, -4.32130694e-03,
           9.73782957e-01, -3.08950245e-03, -7.35953450e-04, -4.43160534e-03,
          -3.27651203e-03,  4.60092723e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98285043, 0.97692406, 0.97419018, 0.97810423, 0.97687244,
          0.97451890, 0.97821456, 0.97705948, 0.96918201]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7183 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-8.18173960e-03, -3.23732942e-03, -5.55679202e-04, -3.99413705e-03,
          9.79184031e-01, -2.90010124e-03, -2.94484198e-04, -5.15983999e-03,
         -2.86147743e-03,  3.13355029e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98205841, 0.97662735, 0.97360897, 0.97749144, 0.97649616, 0.97411454,
         0.97738826, 0.97653723, 0.96866095]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8480 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00410147, -0.00837666,  0.00398777, -0.00663096,  0.00110983,
          0.00550262,  0.00202873,  0.97767258,  0.00739364, -0.01820618]],
       device='cuda:0')
diversed PGD initialization time: 0.1296
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.02484505, 0.01006469, 0.11873953, 0.02402891, 0.01345664,
          0.02523229, 0.01324173, 0.70657825, 0.02433755, 0.00544485],
         [0.02484505, 0.01006469, 0.11873953, 0.02402891, 0.01345664,
          0.02523229, 0.01324173, 0.70657825, 0.02433755, 0.00544485]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.68173319, 0.69651353, 0.58783871, 0.68254936, 0.69312161,
          0.68134594, 0.69333655, 0.68224072, 0.70113337]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7092 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00410147, -0.00837666,  0.00398777, -0.00663096,  0.00110983,
          0.00550262,  0.00202873,  0.97767258,  0.00739364, -0.01820618]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 10, 1, 6] with unstable size 9 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.63820499, 0.64769644, 0.52205896, 0.64581656, 0.65837860, 0.63768810,
         0.65490276, 0.64333230, 0.66842866]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8540 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.08958818e-02, -3.12405750e-02,  1.02944613e+00, -1.75872445e-02,
         -3.70628759e-03,  4.24095988e-03, -1.54659748e-02, -2.44721472e-02,
         -4.29295003e-04, -1.32423416e-02]], device='cuda:0')
diversed PGD initialization time: 0.1268
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01027529, -0.03372028,  1.02348518,  0.02968712, -0.00465177,
          -0.02522979, -0.01251008, -0.02644934, -0.00185748, -0.01442751],
         [-0.01027529, -0.03372028,  1.02348518,  0.02968712, -0.00465177,
          -0.02522979, -0.01251008, -0.02644934, -0.00185748, -0.01442751]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.03376043, 1.05720544, 0.99379808, 1.02813697, 1.04871500,
          1.03599524, 1.04993451, 1.02534270, 1.03791273]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7097 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.08958818e-02, -3.12405750e-02,  1.02944613e+00, -1.75872445e-02,
         -3.70628759e-03,  4.24095988e-03, -1.54659748e-02, -2.44721472e-02,
         -4.29295003e-04, -1.32423416e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 7] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.02093244, 1.03817797, 0.98804945, 1.01481986, 1.01176441, 1.02446270,
         1.03442943, 1.01335943, 1.02520502]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8546 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00139883,  0.99715042, -0.00427373, -0.00453024, -0.00500511,
         -0.00103378, -0.00528123,  0.00224872, -0.00307874,  0.00194390]],
       device='cuda:0')
diversed PGD initialization time: 0.1273
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.73283571e-04,  9.75713134e-01, -2.55241990e-04, -1.42363459e-03,
          -3.50217521e-03,  1.56649202e-03, -4.76375967e-03,  5.82565367e-03,
          -2.35669315e-04,  5.25129586e-03],
         [-2.73283571e-04,  9.75713134e-01, -2.55241990e-04, -1.42363459e-03,
          -3.50217521e-03,  1.56649202e-03, -4.76375967e-03,  5.82565367e-03,
          -2.35669315e-04,  5.25129586e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97598642, 0.97596836, 0.97713679, 0.97921532, 0.97414666,
          0.98047692, 0.96988750, 0.97594881, 0.97046185]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7948 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00139883,  0.99715042, -0.00427373, -0.00453024, -0.00500511,
         -0.00103378, -0.00528123,  0.00224872, -0.00307874,  0.00194390]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 4, 1, 16] with unstable size 3 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91184819, 0.90509641, 0.90220648, 0.91447997, 0.90057385, 0.91469002,
         0.90137815, 0.90512890, 0.89789224]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9415 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00282764e+00, -1.46250948e-02, -3.74653935e-03, -1.35830343e-02,
         -1.17474534e-02,  8.57509673e-03,  9.06102359e-04, -1.88203156e-02,
         -5.90413809e-04, -1.08237639e-02]], device='cuda:0')
diversed PGD initialization time: 0.1284
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00192940e+00, -1.47255138e-02, -3.11033428e-03, -1.34676993e-02,
          -1.19260736e-02,  9.12211090e-03,  2.40876898e-03, -1.89992934e-02,
          -8.45067203e-04, -1.06497332e-02],
         [ 1.00192940e+00, -1.47255138e-02, -3.11033428e-03, -1.34676993e-02,
          -1.19260736e-02,  9.12211090e-03,  2.40876898e-03, -1.89992934e-02,
          -8.45067203e-04, -1.06497332e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01665497, 1.00503969, 1.01539707, 1.01385546, 0.99280727,
          0.99952066, 1.02092874, 1.00277448, 1.01257908]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7263 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00282764e+00, -1.46250948e-02, -3.74653935e-03, -1.35830343e-02,
         -1.17474534e-02,  8.57509673e-03,  9.06102359e-04, -1.88203156e-02,
         -5.90413809e-04, -1.08237639e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 6] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99862188, 0.98311734, 0.99370337, 0.99809116, 0.97810030, 0.97766650,
         1.00057089, 0.98188710, 0.99176115]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8623 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.97923556e-03,  3.13889235e-03,  9.95315611e-03,  5.91531396e-03,
          9.42569017e-01,  3.77803296e-03,  5.28749824e-03,  1.93168223e-03,
          4.58318740e-03, -5.22263348e-04]], device='cuda:0')
diversed PGD initialization time: 0.1302
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00238228, 0.00529392, 0.01588672, 0.01016141, 0.85996056,
          0.00717754, 0.00787270, 0.04977258, 0.00823779, 0.02179876],
         [0.00238228, 0.00529392, 0.01588672, 0.01016141, 0.85996056,
          0.00717754, 0.00787270, 0.04977258, 0.00823779, 0.02179876]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.85757828, 0.85466665, 0.84407383, 0.84979916, 0.85278302,
          0.85208786, 0.81018800, 0.85172278, 0.83816183]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7289 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.97923556e-03,  3.13889235e-03,  9.95315611e-03,  5.91531396e-03,
          9.42569017e-01,  3.77803296e-03,  5.28749824e-03,  1.93168223e-03,
          4.58318740e-03, -5.22263348e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 6, 1, 6] with unstable size 5 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.83516097, 0.83233541, 0.81679112, 0.82699037, 0.82960045, 0.82979012,
         0.76470673, 0.82906443, 0.81065512]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8491 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.65088475e-03,  1.00224376e+00, -6.62560761e-03, -4.94766235e-03,
         -5.19758090e-03, -1.95146352e-03, -3.91322747e-03,  2.32383609e-04,
         -4.50724363e-03,  4.77284193e-04]], device='cuda:0')
diversed PGD initialization time: 0.1240
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.65972859e-04,  9.74458337e-01, -1.15142763e-03, -1.03236735e-03,
          -3.33479792e-03,  1.29110366e-03, -3.09474021e-03,  4.90193069e-03,
          -9.80131328e-04,  4.45700437e-03],
         [-1.65972859e-04,  9.74458337e-01, -1.15142763e-03, -1.03236735e-03,
          -3.33479792e-03,  1.29110366e-03, -3.09474021e-03,  4.90193069e-03,
          -9.80131328e-04,  4.45700437e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97462434, 0.97560978, 0.97549069, 0.97779316, 0.97316724,
          0.97755307, 0.96955639, 0.97543848, 0.97000134]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6976 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.65088475e-03,  1.00224376e+00, -6.62560761e-03, -4.94766235e-03,
         -5.19758090e-03, -1.95146352e-03, -3.91322747e-03,  2.32383609e-04,
         -4.50724363e-03,  4.77284193e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 10] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.96782511, 0.96788985, 0.96812046, 0.97092372, 0.96597457, 0.97085726,
         0.96200436, 0.96812487, 0.96257019]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.7956 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65440175e-03, -4.44896519e-03,  1.63684785e-03, -1.93165243e-03,
          9.91942048e-01, -2.32157856e-03,  8.00721347e-04, -4.96502221e-03,
         -5.02400100e-04, -4.70362604e-04]], device='cuda:0')
diversed PGD initialization time: 0.1284
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00214104, -0.00519855,  0.00333697,  0.00399749,  0.98500222,
           0.00450771,  0.00172209, -0.01353517,  0.00236043,  0.00621913],
         [-0.00214104, -0.00519855,  0.00333697,  0.00399749,  0.98500222,
           0.00450771,  0.00172209, -0.01353517,  0.00236043,  0.00621913]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98714328, 0.99020076, 0.98166525, 0.98100471, 0.98049450,
          0.98328012, 0.99853742, 0.98264182, 0.97878307]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7122 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-3.65440175e-03, -4.44896519e-03,  1.63684785e-03, -1.93165243e-03,
          9.91942048e-01, -2.32157856e-03,  8.00721347e-04, -4.96502221e-03,
         -5.02400100e-04, -4.70362604e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 9, 1, 4] with unstable size 8 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93352550, 0.93931526, 0.92840368, 0.92664564, 0.90241802, 0.92746961,
         0.93929231, 0.92758876, 0.90488654]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8613 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00643827,  0.02194700,  0.04607129,  0.00320449, -0.06752168,
          0.01058344,  0.01059080, -0.06220873,  0.01360389,  0.99761462]],
       device='cuda:0')
diversed PGD initialization time: 0.1271
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.01221660,  0.03129223,  0.06630827,  0.02060297, -0.07306975,
           0.02542584,  0.01733721, -0.04440705,  0.02481695,  0.89224374],
         [ 0.01221660,  0.03129223,  0.06630827,  0.02060297, -0.07306975,
           0.02542584,  0.01733721, -0.04440705,  0.02481695,  0.89224374]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.88002717, 0.86095154, 0.82593548, 0.87164080, 0.96531349,
          0.86681789, 0.87490654, 0.93665081, 0.86742681]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6939 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00643827,  0.02194700,  0.04607129,  0.00320449, -0.06752168,
          0.01058344,  0.01059080, -0.06220873,  0.01360389,  0.99761462]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 11, 1, 7] with unstable size 10 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.83490801, 0.81544507, 0.72399914, 0.82167512, 0.91993070, 0.81949890,
         0.82945997, 0.85999990, 0.82224822]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8392 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.04815453, 0.02315934, 0.04993721, 0.00140341, 0.01316339, 0.57746696,
         0.13519168, 0.03274636, 0.05948269, 0.04212996]], device='cuda:0')
diversed PGD initialization time: 0.1303
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[4.93119285e-02, 2.31057480e-02, 5.09822667e-02, 2.11447477e-04,
          1.34600736e-02, 4.76781964e-01, 2.23071605e-01, 3.33917812e-02,
          7.16372579e-02, 4.67060879e-02],
         [4.93119285e-02, 2.31057480e-02, 5.09822667e-02, 2.11447477e-04,
          1.34600736e-02, 4.76781964e-01, 2.23071605e-01, 3.33917812e-02,
          7.16372579e-02, 4.67060879e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.42747003, 0.45367622, 0.42579970, 0.47657052, 0.46332189,
          0.25371036, 0.44339019, 0.40514469, 0.43007588]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7020 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[0.04815453, 0.02315934, 0.04993721, 0.00140341, 0.01316339, 0.57746696,
         0.13519168, 0.03274636, 0.05948269, 0.04212996]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 5, 1, 3] with unstable size 4 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.30207017, 0.33391404, 0.29901135, 0.35744318, 0.34554186, 0.10509223,
         0.31751105, 0.28692010, 0.30837944]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8404 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 9.34924930e-04,  3.05391103e-03,  2.24204361e-03,  6.07279688e-03,
          1.03030615e-02,  5.28422743e-03,  3.27821821e-03, -1.28465444e-02,
          4.90699708e-03,  9.85769808e-01]], device='cuda:0')
diversed PGD initialization time: 0.1292
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00214779,  0.00452036,  0.00405376,  0.00857939,  0.01169762,
           0.00436150,  0.00399046, -0.01577139,  0.00499658,  0.97925162],
         [ 0.00214779,  0.00452036,  0.00405376,  0.00857939,  0.01169762,
           0.00436150,  0.00399046, -0.01577139,  0.00499658,  0.97925162]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97710383, 0.97473127, 0.97519785, 0.97067225, 0.96755403,
          0.97489011, 0.97526115, 0.99502301, 0.97425503]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7186 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 9.34924930e-04,  3.05391103e-03,  2.24204361e-03,  6.07279688e-03,
          1.03030615e-02,  5.28422743e-03,  3.27821821e-03, -1.28465444e-02,
          4.90699708e-03,  9.85769808e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 0] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97667348, 0.97428656, 0.97469378, 0.97007322, 0.96754509, 0.97439444,
         0.97473806, 0.99387336, 0.97368717]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8514 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00443935e+00, -1.45169050e-02,  9.07301903e-04, -6.17000461e-03,
         -1.40196793e-02, -1.40157416e-02, -8.99437815e-03, -1.63325071e-02,
          9.90219414e-04, -9.57038999e-03]], device='cuda:0')
diversed PGD initialization time: 0.1261
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99958235, -0.01446914,  0.00337689, -0.00520992, -0.01422811,
          -0.01550504, -0.00688481, -0.01603432,  0.00134768, -0.00911951],
         [ 0.99958235, -0.01446914,  0.00337689, -0.00520992, -0.01422811,
          -0.01550504, -0.00688481, -0.01603432,  0.00134768, -0.00911951]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01405144, 0.99620545, 1.00479221, 1.01381052, 1.01508737,
          1.00646710, 1.01561666, 0.99823469, 1.00870180]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6956 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00443935e+00, -1.45169050e-02,  9.07301903e-04, -6.17000461e-03,
         -1.40196793e-02, -1.40157416e-02, -8.99437815e-03, -1.63325071e-02,
          9.90219414e-04, -9.57038999e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01358819, 0.99620539, 1.00467575, 1.01281905, 1.01340783, 1.00581312,
         1.01522732, 0.99798423, 1.00855362]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.42747027e-04, -1.23567879e-04,  6.03720546e-03,  1.23692676e-02,
         -3.03143635e-03, -1.33223906e-02,  1.01335740e+00, -2.86599994e-03,
          4.50023264e-03,  6.07542694e-03]], device='cuda:0')
diversed PGD initialization time: 0.1229
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.37537548e-03, -5.39772213e-04,  5.73883951e-03,  9.66960192e-03,
          -3.22484598e-03, -4.55272943e-03,  1.00617075e+00, -3.01535428e-03,
           3.80084664e-03,  5.63412905e-03],
         [ 2.37537548e-03, -5.39772213e-04,  5.73883951e-03,  9.66960192e-03,
          -3.22484598e-03, -4.55272943e-03,  1.00617075e+00, -3.01535428e-03,
           3.80084664e-03,  5.63412905e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00379539, 1.00671053, 1.00043190, 0.99650115, 1.00939560,
          1.01072347, 1.00918615, 1.00236988, 1.00053668]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7137 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 4.42747027e-04, -1.23567879e-04,  6.03720546e-03,  1.23692676e-02,
         -3.03143635e-03, -1.33223906e-02,  1.01335740e+00, -2.86599994e-03,
          4.50023264e-03,  6.07542694e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 2] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00347900, 1.00612652, 0.99986982, 0.99633104, 1.00888538, 1.00920451,
         1.00859714, 1.00213504, 1.00004959]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8043 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-2.52258033e-04,  5.40003181e-03,  3.10458243e-03,  5.19566983e-03,
         -7.93803483e-04,  5.49394637e-03,  1.38376653e-03,  2.71499157e-04,
          2.96362489e-03,  9.82503533e-01]], device='cuda:0')
diversed PGD initialization time: 0.1282
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.61534005e-04,  6.29667193e-03,  4.23766673e-03,  6.59499317e-03,
          -1.14694610e-03,  5.33724576e-03,  1.73316151e-03, -1.79231167e-04,
           3.02252173e-03,  9.78337884e-01],
         [ 2.61534005e-04,  6.29667193e-03,  4.23766673e-03,  6.59499317e-03,
          -1.14694610e-03,  5.33724576e-03,  1.73316151e-03, -1.79231167e-04,
           3.02252173e-03,  9.78337884e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97807634, 0.97204119, 0.97410023, 0.97174287, 0.97948486,
          0.97300065, 0.97660470, 0.97851712, 0.97531533]]], device='cuda:0')
number of violation:  0
Attack finished in 0.5944 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-2.52258033e-04,  5.40003181e-03,  3.10458243e-03,  5.19566983e-03,
         -7.93803483e-04,  5.49394637e-03,  1.38376653e-03,  2.71499157e-04,
          2.96362489e-03,  9.82503533e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 0] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97541600, 0.96912318, 0.97143537, 0.96858370, 0.97611582, 0.97193819,
         0.97445899, 0.97711682, 0.97384286]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.6902 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00031459, -0.01137930,  0.01222758,  0.00456281, -0.01175443,
         -0.02262121, -0.01058251, -0.01327555, -0.00528301, -0.00894757]],
       device='cuda:0')
diversed PGD initialization time: 0.1124
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99264556, -0.01021063,  0.01445927,  0.00664322, -0.01163432,
          -0.02542104, -0.00883567, -0.01102154, -0.00401471, -0.00701556],
         [ 0.99264556, -0.01021063,  0.01445927,  0.00664322, -0.01163432,
          -0.02542104, -0.00883567, -0.01102154, -0.00401471, -0.00701556]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00285625, 0.97818631, 0.98600233, 1.00427985, 1.01806664,
          1.00148129, 1.00366712, 0.99666029, 0.99966115]]], device='cuda:0')
number of violation:  0
Attack finished in 0.4279 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00031459, -0.01137930,  0.01222758,  0.00456281, -0.01175443,
         -0.02262121, -0.01058251, -0.01327555, -0.00528301, -0.00894757]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 7] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00064862, 0.97651225, 0.98413795, 1.00184155, 1.01527083, 0.99978280,
         1.00128508, 0.99461180, 0.99770206]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.5392 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.00523907e-04,  9.66040730e-01,  2.34511495e-03, -1.46970153e-03,
         -4.05862555e-03, -1.46519393e-03,  5.44986874e-03,  3.35550308e-03,
         -6.32190704e-03, -3.66409123e-03]], device='cuda:0')
diversed PGD initialization time: 0.1318
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.07145885e-03,  9.43249702e-01,  6.74656034e-03,  1.69013441e-03,
          -2.61194631e-03,  8.91730189e-04,  6.83813542e-03,  6.84076548e-03,
          -3.89498472e-03, -1.08326226e-03],
         [ 2.07145885e-03,  9.43249702e-01,  6.74656034e-03,  1.69013441e-03,
          -2.61194631e-03,  8.91730189e-04,  6.83813542e-03,  6.84076548e-03,
          -3.89498472e-03, -1.08326226e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.94117826, 0.93650317, 0.94155955, 0.94586164, 0.94235796,
          0.93641156, 0.93640894, 0.94714469, 0.94433296]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6476 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.00523907e-04,  9.66040730e-01,  2.34511495e-03, -1.46970153e-03,
         -4.05862555e-03, -1.46519393e-03,  5.44986874e-03,  3.35550308e-03,
         -6.32190704e-03, -3.66409123e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 10] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93246776, 0.92692268, 0.93200666, 0.93699634, 0.93307805, 0.92770398,
         0.92684841, 0.93767142, 0.93461025]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.7875 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00930357, -0.01533833,  0.00124615, -0.00758569, -0.03999376,
          1.02344012, -0.00804588, -0.03835927, -0.00909588,  0.00226156]],
       device='cuda:0')
diversed PGD initialization time: 0.1363
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01048443, -0.01488441,  0.00316079, -0.00447896, -0.04075562,
           1.01513934, -0.00939945, -0.03840850, -0.00819245,  0.00359543],
         [-0.01048443, -0.01488441,  0.00316079, -0.00447896, -0.04075562,
           1.01513934, -0.00939945, -0.03840850, -0.00819245,  0.00359543]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.02562380, 1.03002381, 1.01197851, 1.01961827, 1.05589497,
          1.02453876, 1.05354786, 1.02333176, 1.01154387]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7194 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00930357, -0.01533833,  0.00124615, -0.00758569, -0.03999376,
          1.02344012, -0.00804588, -0.03835927, -0.00909588,  0.00226156]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 7] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.02176630, 1.02714968, 1.00961280, 1.01671374, 1.05010629, 1.02001965,
         1.04869878, 1.02069199, 1.00927079]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8971 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.55177641e-04,  7.79603422e-03,  1.09656602e-02,  1.61600113e-02,
         -2.01104954e-03,  5.82183152e-03,  5.88293001e-03, -7.20408559e-03,
          5.83644956e-03,  9.58989024e-01]], device='cuda:0')
diversed PGD initialization time: 0.1295
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00155492,  0.00984241,  0.01409999,  0.02060794,  0.00530065,
           0.00503070,  0.00691742, -0.00110011,  0.00529336,  0.93486536],
         [ 0.00155492,  0.00984241,  0.01409999,  0.02060794,  0.00530065,
           0.00503070,  0.00691742, -0.00110011,  0.00529336,  0.93486536]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.93331045, 0.92502296, 0.92076540, 0.91425741, 0.92956471,
          0.92983466, 0.92794794, 0.93596548, 0.92957199]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6814 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.55177641e-04,  7.79603422e-03,  1.09656602e-02,  1.61600113e-02,
         -2.01104954e-03,  5.82183152e-03,  5.88293001e-03, -7.20408559e-03,
          5.83644956e-03,  9.58989024e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 3] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93295103, 0.92439544, 0.92026460, 0.91406155, 0.92894447, 0.92879415,
         0.92774892, 0.93385875, 0.92854512]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8951 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.23506242e-04, -1.26954839e-02, -1.16986334e-02, -1.02724880e-02,
          4.88330796e-03, -1.44266337e-03, -2.17808783e-03,  1.00424695e+00,
          1.32369995e-03, -1.06123090e-03]], device='cuda:0')
diversed PGD initialization time: 0.1253
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 8.22469592e-05, -1.17905587e-02, -7.93623924e-03, -6.70297444e-03,
           6.84739649e-03, -2.04220414e-05, -1.76842511e-03,  9.90759850e-01,
           2.36056000e-03,  2.39085406e-03],
         [ 8.22469592e-05, -1.17905587e-02, -7.93623924e-03, -6.70297444e-03,
           6.84739649e-03, -2.04220414e-05, -1.76842511e-03,  9.90759850e-01,
           2.36056000e-03,  2.39085406e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99067760, 1.00255036, 0.99869609, 0.99746281, 0.98391247,
          0.99078029, 0.99252826, 0.98839927, 0.98836899]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7298 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 2.23506242e-04, -1.26954839e-02, -1.16986334e-02, -1.02724880e-02,
          4.88330796e-03, -1.44266337e-03, -2.17808783e-03,  1.00424695e+00,
          1.32369995e-03, -1.06123090e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 4, 1, 4] with unstable size 3 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97801298, 0.98699951, 0.98628944, 0.98183894, 0.97117978, 0.97640920,
         0.97965896, 0.97518331, 0.97349513]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8670 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01586051, -0.02808730, -0.01405935,  0.81696975, -0.04399454,
          0.03509956, -0.01380525, -0.08573376, -0.00959561,  0.33241773]],
       device='cuda:0')
diversed PGD initialization time: 0.1274
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01572416, -0.03145345, -0.00196128,  0.54035890, -0.01134226,
           0.02319159, -0.00441209, -0.06191035, -0.00114156,  0.55849612],
         [-0.01572416, -0.03145345, -0.00196128,  0.54035890, -0.01134226,
           0.02319159, -0.00441209, -0.06191035, -0.00114156,  0.55849612]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.55608308,  0.57181233,  0.54232019,  0.55170119,  0.51716733,
           0.54477102,  0.60226923,  0.54150045, -0.01813722]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1575 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3038 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.00892810.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0022320300340652466, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-7.33086839e-03, -3.35418433e-03, -8.26269388e-05, -3.44057381e-03,
          9.79620218e-01, -2.72951275e-03, -3.57776880e-05, -4.36006486e-03,
         -2.40270048e-03,  3.44216824e-03]], device='cuda:0')
diversed PGD initialization time: 0.1252
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.18161124e-03, -3.06460261e-03, -1.77308917e-04, -4.27520275e-03,
           9.71486092e-01, -3.06236744e-03, -8.03239644e-04, -3.73564661e-03,
          -3.28428298e-03,  4.79215384e-03],
         [-9.18161124e-03, -3.06460261e-03, -1.77308917e-04, -4.27520275e-03,
           9.71486092e-01, -3.06236744e-03, -8.03239644e-04, -3.73564661e-03,
          -3.28428298e-03,  4.79215384e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98066771, 0.97455072, 0.97166342, 0.97576129, 0.97454846,
          0.97228932, 0.97522175, 0.97477037, 0.96669394]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7772 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-7.33086839e-03, -3.35418433e-03, -8.26269388e-05, -3.44057381e-03,
          9.79620218e-01, -2.72951275e-03, -3.57776880e-05, -4.36006486e-03,
         -2.40270048e-03,  3.44216824e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 5] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97609669, 0.97107536, 0.96709019, 0.97138298, 0.97089225, 0.96865898,
         0.96977401, 0.97071874, 0.96113229]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9218 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 7.37424195e-03, -4.49861586e-03,  8.88629258e-03, -3.91490757e-04,
          1.31392851e-03,  9.60806012e-03,  3.57669964e-03,  9.49079931e-01,
          1.03455856e-02, -1.77901089e-02]], device='cuda:0')
diversed PGD initialization time: 0.1273
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.02599907, 0.00938971, 0.35139197, 0.04938040, 0.01652731,
          0.03375502, 0.01724089, 0.40996492, 0.03034374, 0.01747680],
         [0.02599907, 0.00938971, 0.35139197, 0.04938040, 0.01652731,
          0.03375502, 0.01724089, 0.40996492, 0.03034374, 0.01747680]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.38396585, 0.40057522, 0.05857295, 0.36058453, 0.39343762,
          0.37620991, 0.39272404, 0.37962118, 0.39248812]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6929 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 7.37424195e-03, -4.49861586e-03,  8.88629258e-03, -3.91490757e-04,
          1.31392851e-03,  9.60806012e-03,  3.57669964e-03,  9.49079931e-01,
          1.03455856e-02, -1.77901089e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 14, 1, 8] with unstable size 13 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.30322194,  0.30412948, -0.03016572,  0.27542418,  0.33024496,
          0.27617794,  0.31678498,  0.30533507,  0.32396978]], device='cuda:0') None

all verified at 4th iter
best_l after optimization: 2.644582748413086
alpha/beta optimization time: 1.5390739440917969
initial alpha-crown bounds: tensor([[0.32756308, 0.33859172, 0.00702068, 0.30467877, 0.35175660, 0.30034387,
         0.33809662, 0.32948256, 0.34704879]], device='cuda:0')
Worst class: (+ rhs) 0.007020682096481323
verified with init bound!
Result: safe-incomplete in 2.4966 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.05146877e-02, -3.02462876e-02,  1.02829206e+00, -1.70491934e-02,
         -2.75585055e-03,  3.81595641e-03, -1.49089396e-02, -2.32758373e-02,
         -3.93934548e-04, -1.24001130e-02]], device='cuda:0')
diversed PGD initialization time: 0.1236
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00953494, -0.03668667,  1.00848341,  0.10620727, -0.00573382,
          -0.06940811, -0.00736276, -0.02969441, -0.00480393, -0.01637585],
         [-0.00953494, -0.03668667,  1.00848341,  0.10620727, -0.00573382,
          -0.06940811, -0.00736276, -0.02969441, -0.00480393, -0.01637585]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01801836, 1.04517007, 0.90227616, 1.01421726, 1.07789147,
          1.01584613, 1.03817785, 1.01328731, 1.02485931]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6904 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.05146877e-02, -3.02462876e-02,  1.02829206e+00, -1.70491934e-02,
         -2.75585055e-03,  3.81595641e-03, -1.49089396e-02, -2.32758373e-02,
         -3.93934548e-04, -1.24001130e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 4, 1, 8] with unstable size 3 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99792671, 1.01571798, 0.87448061, 0.99411225, 1.00181794, 0.99732834,
         1.01439202, 0.99505478, 1.00546861]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.16124004e-03,  9.92467344e-01, -3.15508246e-03, -3.89140099e-03,
         -4.69312072e-03, -3.63171101e-04, -5.55659086e-03,  3.28887999e-03,
         -2.23109871e-03,  2.91347504e-03]], device='cuda:0')
diversed PGD initialization time: 0.1261
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00875093, 0.79127103, 0.03218715, 0.02458164, 0.00594340,
          0.02474173, 0.00732927, 0.02716903, 0.02148396, 0.03106061],
         [0.00875093, 0.79127103, 0.03218715, 0.02458164, 0.00594340,
          0.02474173, 0.00732927, 0.02716903, 0.02148396, 0.03106061]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.78252012, 0.75908387, 0.76668942, 0.78532761, 0.76652932,
          0.78394175, 0.76410198, 0.76978707, 0.76021039]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6911 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.16124004e-03,  9.92467344e-01, -3.15508246e-03, -3.89140099e-03,
         -4.69312072e-03, -3.63171101e-04, -5.55659086e-03,  3.28887999e-03,
         -2.23109871e-03,  2.91347504e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 11, 1, 20] with unstable size 10 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.61993355, 0.57078809, 0.57565343, 0.62034011, 0.56908453, 0.61631900,
         0.59074724, 0.43302390, 0.58155513]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8971 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00245869e+00, -1.39138252e-02, -3.06843221e-03, -1.31996572e-02,
         -1.07451342e-02,  8.37216526e-03,  1.66308135e-03, -1.82594061e-02,
         -6.89469278e-04, -1.04604512e-02]], device='cuda:0')
diversed PGD initialization time: 0.1266
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00126457e+00, -1.39751434e-02, -1.40170753e-03, -1.25748217e-02,
          -1.06500871e-02,  9.20377672e-03,  3.26492265e-03, -1.87519640e-02,
          -7.17885792e-04, -1.03745610e-02],
         [ 1.00126457e+00, -1.39751434e-02, -1.40170753e-03, -1.25748217e-02,
          -1.06500871e-02,  9.20377672e-03,  3.26492265e-03, -1.87519640e-02,
          -7.17885792e-04, -1.03745610e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01523972, 1.00266623, 1.01383936, 1.01191461, 0.99206078,
          0.99799967, 1.02001655, 1.00198245, 1.01163912]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7191 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00245869e+00, -1.39138252e-02, -3.06843221e-03, -1.31996572e-02,
         -1.07451342e-02,  8.37216526e-03,  1.66308135e-03, -1.82594061e-02,
         -6.89469278e-04, -1.04604512e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 7] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00438607, 0.99506551, 1.00862741, 1.00778842, 0.99169725, 0.99505019,
         1.01596272, 0.99854201, 1.00906229]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9322 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.02092254e-04,  2.90769339e-03,  1.04165226e-02,  6.44995272e-03,
          9.47453618e-01,  4.06782329e-03,  5.77476621e-03,  8.28534365e-04,
          5.17226011e-03, -2.15665996e-03]], device='cuda:0')
diversed PGD initialization time: 0.1267
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00707829, 0.01353768, 0.03026505, 0.02419087, 0.67572778,
          0.01668224, 0.01274256, 0.08454996, 0.01536205, 0.11643107],
         [0.00707829, 0.01353768, 0.03026505, 0.02419087, 0.67572778,
          0.01668224, 0.01274256, 0.08454996, 0.01536205, 0.11643107]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.66864949, 0.66219008, 0.64546275, 0.65153694, 0.65904552,
          0.66298521, 0.59117782, 0.66036570, 0.55929673]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7228 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-8.02092254e-04,  2.90769339e-03,  1.04165226e-02,  6.44995272e-03,
          9.47453618e-01,  4.06782329e-03,  5.77476621e-03,  8.28534365e-04,
          5.17226011e-03, -2.15665996e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 12, 1, 7] with unstable size 11 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.36682472,  0.36081949,  0.33503479,  0.35339984,  0.36067629,
          0.36240593,  0.23419911,  0.35892048, -0.06310298]], device='cuda:0') None

all verified at 1th iter
best_l after optimization: 3.046025037765503
alpha/beta optimization time: 0.04283332824707031
initial alpha-crown bounds: tensor([[0.40289634, 0.39665145, 0.37176815, 0.38785878, 0.39559808, 0.39817101,
         0.27877945, 0.39501506, 0.01928676]], device='cuda:0')
Worst class: (+ rhs) 0.019286762923002243
verified with init bound!
Result: safe-incomplete in 0.9735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00136692,  0.99675453, -0.00532560, -0.00421447, -0.00484293,
         -0.00122542, -0.00406957,  0.00137429, -0.00363547,  0.00145723]],
       device='cuda:0')
diversed PGD initialization time: 0.1261
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 4.38801944e-04,  9.61961746e-01,  1.50103867e-03,  7.78317451e-04,
          -2.40938738e-03,  3.14676017e-03, -3.73463333e-03,  7.51203299e-03,
           1.25975162e-03,  7.16139376e-03],
         [ 4.38801944e-04,  9.61961746e-01,  1.50103867e-03,  7.78317451e-04,
          -2.40938738e-03,  3.14676017e-03, -3.73463333e-03,  7.51203299e-03,
           1.25975162e-03,  7.16139376e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.96152294, 0.96046072, 0.96118343, 0.96437114, 0.95881498,
          0.96569639, 0.95444971, 0.96070200, 0.95480037]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7196 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00136692,  0.99675453, -0.00532560, -0.00421447, -0.00484293,
         -0.00122542, -0.00406957,  0.00137429, -0.00363547,  0.00145723]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 7, 1, 15] with unstable size 6 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.86836314, 0.85864329, 0.86398226, 0.84115338, 0.86096787, 0.87181699,
         0.84605181, 0.86107421, 0.83362603]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8965 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.31250578e-03, -5.01026958e-03,  1.58716738e-03, -4.21501696e-04,
          9.92125511e-01, -1.08486414e-03,  9.18202102e-04, -4.86578047e-03,
          9.59560275e-05, -7.14041293e-04]], device='cuda:0')
diversed PGD initialization time: 0.1225
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.99295411e-03, -4.64188308e-03,  7.75818527e-03, -6.54228032e-04,
           8.59193563e-01,  3.99482660e-02,  1.06436573e-02,  1.07334554e-03,
           1.37304664e-02,  6.14857003e-02],
         [ 2.99295411e-03, -4.64188308e-03,  7.75818527e-03, -6.54228032e-04,
           8.59193563e-01,  3.99482660e-02,  1.06436573e-02,  1.07334554e-03,
           1.37304664e-02,  6.14857003e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.85620064, 0.86383545, 0.85143536, 0.85984778, 0.81924528,
          0.84854990, 0.85812020, 0.84546310, 0.79770786]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6548 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-3.31250578e-03, -5.01026958e-03,  1.58716738e-03, -4.21501696e-04,
          9.92125511e-01, -1.08486414e-03,  9.18202102e-04, -4.86578047e-03,
          9.59560275e-05, -7.14041293e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 18, 1, 5] with unstable size 17 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [17]; unstable size 17; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.80890882, 0.82712555, 0.80247307, 0.80675137, 0.73083341, 0.79768300,
         0.80892360, 0.65216827, 0.76610976]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8305 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00532626,  0.01961280,  0.04226585,  0.00345282, -0.07224260,
          0.00995199,  0.00959194, -0.04923637,  0.01203734,  1.00218070]],
       device='cuda:0')
diversed PGD initialization time: 0.1271
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00704804,  0.02911519,  0.13400327,  0.01905689, -0.11557755,
           0.02460059,  0.01568280, -0.03712070,  0.02266605,  0.87162161],
         [ 0.00704804,  0.02911519,  0.13400327,  0.01905689, -0.11557755,
           0.02460059,  0.01568280, -0.03712070,  0.02266605,  0.87162161]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.86457354, 0.84250641, 0.73761833, 0.85256469, 0.98719919,
          0.84702104, 0.85593879, 0.90874231, 0.84895557]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7334 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00532626,  0.01961280,  0.04226585,  0.00345282, -0.07224260,
          0.00995199,  0.00959194, -0.04923637,  0.01203734,  1.00218070]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 17, 1, 8] with unstable size 16 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [16]; unstable size 16; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.68396360, 0.66530401, 0.48558223, 0.65751296, 0.77862620, 0.66195208,
         0.68123537, 0.65927207, 0.66957730]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9239 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.04558338,  0.02185040,  0.04707804, -0.00212777,  0.01223628,
          0.59608424,  0.13594040,  0.03030014,  0.05719046,  0.03962805]],
       device='cuda:0')
diversed PGD initialization time: 0.1268
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.03160660,  0.01557342,  0.03745680, -0.00136262,  0.00746063,
           0.41388062,  0.37969720,  0.02126154,  0.05497500,  0.03465862],
         [ 0.03160660,  0.01557342,  0.03745680, -0.00136262,  0.00746063,
           0.41388062,  0.37969720,  0.02126154,  0.05497500,  0.03465862]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.38227403, 0.39830720, 0.37642384, 0.41524324, 0.40641999,
          0.03418341, 0.39261907, 0.35890561, 0.37922201]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7434 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.04558338,  0.02185040,  0.04707804, -0.00212777,  0.01223628,
          0.59608424,  0.13594040,  0.03030014,  0.05719046,  0.03962805]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 8, 1, 5] with unstable size 7 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17288420,  0.20219468,  0.16600630,  0.22096774,  0.21412569,
         -0.17638165,  0.18444446,  0.15867460,  0.17708129]], device='cuda:0') None
best_l after optimization: 1.867429494857788
alpha/beta optimization time: 0.6826462745666504
initial alpha-crown bounds: tensor([[ 0.23948109,  0.26017803,  0.22659265,  0.30878472,  0.27238396,
         -0.14786139,  0.24519311,  0.22224076,  0.24043664]], device='cuda:0')
Worst class: (+ rhs) -0.14786139130592346
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 118.37277269363403
##### Instance 68 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2394810914993286.

Properties batch 1, size 1
Remaining timeout: 118.28646659851074
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2601780295372009.

Properties batch 2, size 1
Remaining timeout: 118.21194505691528
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22659264504909515.

Properties batch 3, size 1
Remaining timeout: 118.13143944740295
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.30878472328186035.

Properties batch 4, size 1
Remaining timeout: 118.05353426933289
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2723839581012726.

Properties batch 5, size 1
Remaining timeout: 117.98029375076294
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.14786139]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.04558338,  0.02185040,  0.04707804, -0.00212777,  0.01223628,
         0.59608424,  0.13594040,  0.03030014,  0.05719046,  0.03962805],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.14786139]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 5
Node /17 input 0: size torch.Size([256]) unstable 7
-----------------
# of unstable neurons: 12
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 247] 
split level 1: [/input.3, 244] 
split level 2: [/input, 30] 
split level 3: [/input, 246] 
split level 4: [/input.3, 152] 
split level 5: [/input, 153] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011563301086425781
Time: prepare 0.0360    bound 0.0060    transfer 0.0002    finalize 0.0027    func 0.0448    
Accumulated time: func 0.0448    prepare 0.0368    bound 0.0060    transfer 0.0002    finalize 0.0027    
length of domains: 0
Time: pickout 0.0005    decision 0.1771    set_bounds 0.0259    solve 0.0449    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.1771    set_bounds 0.0259    solve 0.0449    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.28695011138916016


Properties batch 6, size 1
Remaining timeout: 117.58931279182434
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.24519310891628265.

Properties batch 7, size 1
Remaining timeout: 117.50471377372742
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22224076092243195.

Properties batch 8, size 1
Remaining timeout: 117.42656135559082
##### Instance 68 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2404366433620453.
Result: safe in 2.6535 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 5.19420952e-04,  2.58683413e-03,  1.65018439e-03,  5.20793349e-03,
          9.89752635e-03,  5.60534745e-03,  3.00713629e-03, -1.18108243e-02,
          4.85988706e-03,  9.87851381e-01]], device='cuda:0')
diversed PGD initialization time: 0.1237
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00232570,  0.00476997,  0.00434554,  0.00893866,  0.01198732,
           0.00422832,  0.00406606, -0.01616852,  0.00498965,  0.97815251],
         [ 0.00232570,  0.00476997,  0.00434554,  0.00893866,  0.01198732,
           0.00422832,  0.00406606, -0.01616852,  0.00498965,  0.97815251]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97582680, 0.97338253, 0.97380698, 0.96921384, 0.96616518,
          0.97392422, 0.97408646, 0.99432105, 0.97316289]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6595 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 5.19420952e-04,  2.58683413e-03,  1.65018439e-03,  5.20793349e-03,
          9.89752635e-03,  5.60534745e-03,  3.00713629e-03, -1.18108243e-02,
          4.85988706e-03,  9.87851381e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 1] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97489214, 0.97245467, 0.97285110, 0.96811068, 0.96596670, 0.97295320,
         0.97303057, 0.99191600, 0.97204447]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8127 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00430477, -0.01386458,  0.00103782, -0.00616421, -0.01306087,
         -0.01325364, -0.00866213, -0.01579009,  0.00102736, -0.00923242]],
       device='cuda:0')
diversed PGD initialization time: 0.1202
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99781907, -0.01368254,  0.00468801, -0.00427075, -0.01347483,
          -0.01572037, -0.00659224, -0.01509082,  0.00130832, -0.00851520],
         [ 0.99781907, -0.01368254,  0.00468801, -0.00427075, -0.01347483,
          -0.01572037, -0.00659224, -0.01509082,  0.00130832, -0.00851520]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01150155, 0.99313104, 1.00208986, 1.01129389, 1.01353943,
          1.00441134, 1.01290989, 0.99651074, 1.00633430]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6452 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00430477, -0.01386458,  0.00103782, -0.00616421, -0.01306087,
         -0.01325364, -0.00866213, -0.01579009,  0.00102736, -0.00923242]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01017094, 0.99235618, 1.00163376, 1.00896001, 1.01005149, 1.00161481,
         1.01183498, 0.99513835, 1.00540984]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.7613 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 7.50891864e-04, -1.80818141e-04,  5.95477223e-03,  1.15823522e-02,
         -3.02558765e-03, -1.12394691e-02,  1.01155519e+00, -2.81216204e-03,
          4.23819572e-03,  5.93630224e-03]], device='cuda:0')
diversed PGD initialization time: 0.1261
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.01114608, -0.00131924,  0.00142400,  0.00873955, -0.00341712,
          -0.00649783,  1.00439537, -0.00305565,  0.00439464,  0.00521187],
         [ 0.01114608, -0.00131924,  0.00142400,  0.00873955, -0.00341712,
          -0.00649783,  1.00439537, -0.00305565,  0.00439464,  0.00521187]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99324930, 1.00571465, 1.00297141, 0.99565583, 1.00781250,
          1.01089323, 1.00745106, 1.00000072, 0.99918348]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6737 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 7.50891864e-04, -1.80818141e-04,  5.95477223e-03,  1.15823522e-02,
         -3.02558765e-03, -1.12394691e-02,  1.01155519e+00, -2.81216204e-03,
          4.23819572e-03,  5.93630224e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 6, 1, 2] with unstable size 5 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98481917, 0.99587083, 0.98932409, 0.98935288, 0.99866211, 0.98802042,
         0.99739069, 0.99146444, 0.98962587]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.7650 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-6.27540052e-04,  4.81304526e-03,  2.55729258e-03,  4.41889465e-03,
         -1.05806068e-03,  5.96240908e-03,  1.26886368e-03,  6.95332885e-04,
          3.17639858e-03,  9.84453440e-01]], device='cuda:0')
diversed PGD initialization time: 0.1437
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.30407172e-04,  6.43372536e-03,  4.48270142e-03,  6.86854124e-03,
          -1.33249536e-03,  5.44243306e-03,  1.82964653e-03, -2.23591924e-04,
           3.11727822e-03,  9.77403760e-01],
         [ 3.30407172e-04,  6.43372536e-03,  4.48270142e-03,  6.86854124e-03,
          -1.33249536e-03,  5.44243306e-03,  1.82964653e-03, -2.23591924e-04,
           3.11727822e-03,  9.77403760e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97707337, 0.97097003, 0.97292107, 0.97053522, 0.97873628,
          0.97196132, 0.97557414, 0.97762734, 0.97428650]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7880 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-6.27540052e-04,  4.81304526e-03,  2.55729258e-03,  4.41889465e-03,
         -1.05806068e-03,  5.96240908e-03,  1.26886368e-03,  6.95332885e-04,
          3.17639858e-03,  9.84453440e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 4, 1, 0] with unstable size 3 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97352314, 0.96711642, 0.96855497, 0.96620637, 0.97439933, 0.96925914,
         0.97237283, 0.97596771, 0.97154194]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9204 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00055802, -0.01071209,  0.01248643,  0.00459255, -0.01061234,
         -0.02176636, -0.00992517, -0.01286767, -0.00549794, -0.00873788]],
       device='cuda:0')
diversed PGD initialization time: 0.1250
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99012023, -0.00877301,  0.01534183,  0.00804131, -0.01043620,
          -0.02613426, -0.00820187, -0.00917682, -0.00380423, -0.00571388],
         [ 0.99012023, -0.00877301,  0.01534183,  0.00804131, -0.01043620,
          -0.02613426, -0.00820187, -0.00917682, -0.00380423, -0.00571388]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99889326, 0.97477841, 0.98207891, 1.00055647, 1.01625454,
          0.99832213, 0.99929702, 0.99392444, 0.99583411]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7028 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00055802, -0.01071209,  0.01248643,  0.00459255, -0.01061234,
         -0.02176636, -0.00992517, -0.01286767, -0.00549794, -0.00873788]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 8] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99509120, 0.97098929, 0.97896159, 0.99606532, 1.01081991, 0.99400747,
         0.99540168, 0.98986626, 0.99238020]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8801 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431369811296463, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.58779997e-04,  9.64544535e-01,  2.86836922e-03, -1.27585232e-03,
         -3.94896045e-03, -1.11348927e-03,  4.94613498e-03,  3.93059850e-03,
         -5.79467416e-03, -3.03210318e-03]], device='cuda:0')
diversed PGD initialization time: 0.1320
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.81958452e-03,  9.45958495e-01,  6.56700134e-03,  1.39218569e-03,
          -2.64710560e-03,  1.27277523e-03,  4.96133417e-03,  7.30040669e-03,
          -3.06970626e-03,  1.45778060e-04],
         [ 1.81958452e-03,  9.45958495e-01,  6.56700134e-03,  1.39218569e-03,
          -2.64710560e-03,  1.27277523e-03,  4.96133417e-03,  7.30040669e-03,
          -3.06970626e-03,  1.45778060e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.94413888, 0.93939149, 0.94456631, 0.94860560, 0.94468570,
          0.94099718, 0.93865812, 0.94902819, 0.94581270]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6929 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.58779997e-04,  9.64544535e-01,  2.86836922e-03, -1.27585232e-03,
         -3.94896045e-03, -1.11348927e-03,  4.94613498e-03,  3.93059850e-03,
         -5.79467416e-03, -3.03210318e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 17] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91364187, 0.90556955, 0.91153198, 0.91785258, 0.91295522, 0.90929461,
         0.90584886, 0.91655183, 0.91330397]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.79524648e-03, -1.49777681e-02,  9.50291753e-04, -8.28529894e-03,
         -3.85065265e-02,  1.02426600e+00, -7.37777352e-03, -3.75549942e-02,
         -9.19642299e-03,  1.85509026e-03]], device='cuda:0')
diversed PGD initialization time: 0.1281
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01028902, -0.01401536,  0.00409682, -0.00438696, -0.03923779,
           1.01250947, -0.00915934, -0.03668199, -0.00774080,  0.00352546],
         [-0.01028902, -0.01401536,  0.00409682, -0.00438696, -0.03923779,
           1.01250947, -0.00915934, -0.03668199, -0.00774080,  0.00352546]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.02279854, 1.02652478, 1.00841260, 1.01689649, 1.05174720,
          1.02166879, 1.04919147, 1.02025032, 1.00898397]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7452 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-8.79524648e-03, -1.49777681e-02,  9.50291753e-04, -8.28529894e-03,
         -3.85065265e-02,  1.02426600e+00, -7.37777352e-03, -3.75549942e-02,
         -9.19642299e-03,  1.85509026e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 9] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01516938, 1.01731658, 1.00301218, 1.00954318, 1.04142070, 1.01296628,
         1.04054463, 1.01422179, 1.00312662]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8499 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.44906002e-04,  7.38915056e-03,  1.01529062e-02,  1.43442452e-02,
         -2.95572355e-03,  6.49978220e-03,  5.06494939e-03, -5.72830439e-03,
          6.25494868e-03,  9.61033583e-01]], device='cuda:0')
diversed PGD initialization time: 0.1265
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00137680, 0.01041429, 0.01479019, 0.02091633, 0.00785590,
          0.00533280, 0.00659056, 0.00327669, 0.00545854, 0.92537510],
         [0.00137680, 0.01041429, 0.01479019, 0.02091633, 0.00785590,
          0.00533280, 0.00659056, 0.00327669, 0.00545854, 0.92537510]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.92399830, 0.91496080, 0.91058493, 0.90445876, 0.91751921,
          0.92004228, 0.91878456, 0.92209840, 0.91991657]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7101 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 3.44906002e-04,  7.38915056e-03,  1.01529062e-02,  1.43442452e-02,
         -2.95572355e-03,  6.49978220e-03,  5.06494939e-03, -5.72830439e-03,
          6.25494868e-03,  9.61033583e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 9, 1, 6] with unstable size 8 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.88173789, 0.87313503, 0.86823511, 0.86216354, 0.84047502, 0.87943089,
         0.87605667, 0.86667705, 0.87916118]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8582 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-9.89809632e-06, -1.19302720e-02, -1.04060620e-02, -1.05565935e-02,
          4.77705896e-03, -1.22364610e-03, -1.90878659e-03,  1.00514936e+00,
          1.42198801e-03, -2.36689299e-03]], device='cuda:0')
diversed PGD initialization time: 0.1258
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00554067, 0.00346639, 0.00744279, 0.01190096, 0.01176642,
          0.01427574, 0.00549331, 0.88468546, 0.01284462, 0.01685175],
         [0.00554067, 0.00346639, 0.00744279, 0.01190096, 0.01176642,
          0.01427574, 0.00549331, 0.88468546, 0.01284462, 0.01685175]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.87914479, 0.88121909, 0.87724268, 0.87278450, 0.87291902,
          0.87040973, 0.87919211, 0.87184083, 0.86783373]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6711 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-9.89809632e-06, -1.19302720e-02, -1.04060620e-02, -1.05565935e-02,
          4.77705896e-03, -1.22364610e-03, -1.90878659e-03,  1.00514936e+00,
          1.42198801e-03, -2.36689299e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 9, 1, 8] with unstable size 8 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66194868, 0.65141499, 0.61272138, 0.62534332, 0.64591110, 0.62645775,
         0.65730655, 0.64111418, 0.62913460]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01528260, -0.02875037, -0.01008531,  0.77928424, -0.04250622,
          0.02988305, -0.01141816, -0.08563598, -0.00656176,  0.36751556]],
       device='cuda:0')
diversed PGD initialization time: 0.1300
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01473717, -0.03008006,  0.00166099,  0.41804579,  0.00175120,
           0.01950184, -0.00210786, -0.05409585,  0.00690497,  0.64014292],
         [-0.01473717, -0.03008006,  0.00166099,  0.41804579,  0.00175120,
           0.01950184, -0.00210786, -0.05409585,  0.00690497,  0.64014292]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.43278295,  0.44812584,  0.41638482,  0.41629457,  0.39854395,
           0.42015365,  0.47214162,  0.41114080, -0.22209713]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2007 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3219 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.01337255.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.0033431388437747955, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-6.37111440e-03, -3.46825272e-03,  2.44870782e-04, -2.90890038e-03,
          9.81834292e-01, -2.52658874e-03,  3.20434570e-04, -3.93448770e-03,
         -1.89494342e-03,  2.93739885e-03]], device='cuda:0')
diversed PGD initialization time: 0.1285
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.10451636e-03, -2.98522413e-03,  1.04919076e-04, -4.10777330e-03,
           9.69634593e-01, -2.97748297e-03, -7.80396163e-04, -2.97826529e-03,
          -3.18733603e-03,  4.87160683e-03],
         [-9.10451636e-03, -2.98522413e-03,  1.04919076e-04, -4.10777330e-03,
           9.69634593e-01, -2.97748297e-03, -7.80396163e-04, -2.97826529e-03,
          -3.18733603e-03,  4.87160683e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97873908, 0.97261983, 0.96952969, 0.97374237, 0.97261208,
          0.97041500, 0.97261286, 0.97282195, 0.96476299]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7381 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-6.37111440e-03, -3.46825272e-03,  2.44870782e-04, -2.90890038e-03,
          9.81834292e-01, -2.52658874e-03,  3.20434570e-04, -3.93448770e-03,
         -1.89494342e-03,  2.93739885e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 4, 1, 9] with unstable size 3 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94322771, 0.94269729, 0.93416047, 0.93618077, 0.93798196, 0.93849409,
         0.94406807, 0.93870723, 0.91710377]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8956 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.01686310,  0.00513648,  0.05078386,  0.01466638,  0.00858647,
          0.01881830,  0.00925396,  0.82784617,  0.01920530, -0.00374991]],
       device='cuda:0')
diversed PGD initialization time: 0.1284
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.02046434, 0.06439526, 0.45341045, 0.08444963, 0.01011206,
          0.03392317, 0.02048464, 0.22591454, 0.02783129, 0.01824974],
         [0.02046434, 0.06439526, 0.45341045, 0.08444963, 0.01011206,
          0.03392317, 0.02048464, 0.22591454, 0.02783129, 0.01824974]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.20545019,  0.16151927, -0.22749591,  0.14146492,  0.21580248,
           0.19199136,  0.20542990,  0.19808325,  0.20766480]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1993 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3623 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.01332329e-02, -2.92515159e-02,  1.02713704e+00, -1.65115148e-02,
         -1.80547684e-03,  3.39094549e-03, -1.43522099e-02, -2.20797509e-02,
         -3.58372927e-04, -1.15578547e-02]], device='cuda:0')
diversed PGD initialization time: 0.1247
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00949528, -0.04169101,  0.98606974,  0.22139582, -0.00981264,
          -0.13204578, -0.00173358, -0.03834528, -0.01058927, -0.02300758],
         [-0.00949528, -0.04169101,  0.98606974,  0.22139582, -0.00981264,
          -0.13204578, -0.00173358, -0.03834528, -0.01058927, -0.02300758]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99556500, 1.02776074, 0.76467395, 0.99588239, 1.11811554,
          0.98780334, 1.02441502, 0.99665904, 1.00907731]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7099 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.01332329e-02, -2.92515159e-02,  1.02713704e+00, -1.65115148e-02,
         -1.80547684e-03,  3.39094549e-03, -1.43522099e-02, -2.20797509e-02,
         -3.58372927e-04, -1.15578547e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 8, 1, 9] with unstable size 7 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.87583077, 0.94470966, 0.64878756, 0.90847230, 0.94355285, 0.90204287,
         0.94381464, 0.90392363, 0.91557020]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8490 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.81094486e-04,  9.87058342e-01, -2.02956796e-03, -3.10599059e-03,
         -4.31605801e-03,  3.93122435e-04, -5.77401370e-03,  4.38575447e-03,
         -1.27372891e-03,  4.02063876e-03]], device='cuda:0')
diversed PGD initialization time: 0.1330
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00867182,  0.64576924, -0.00425711, -0.03709476, -0.00756326,
           0.01601002, -0.03806941, -0.00454809,  0.42077199, -0.00842230],
         [-0.00867182,  0.64576924, -0.00425711, -0.03709476, -0.00756326,
           0.01601002, -0.03806941, -0.00454809,  0.42077199, -0.00842230]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.65444106, 0.65002632, 0.68286401, 0.65333247, 0.62975919,
          0.68383867, 0.65031731, 0.22499725, 0.65419155]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7018 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-8.81094486e-04,  9.87058342e-01, -2.02956796e-03, -3.10599059e-03,
         -4.31605801e-03,  3.93122435e-04, -5.77401370e-03,  4.38575447e-03,
         -1.27372891e-03,  4.02063876e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 18, 1, 21] with unstable size 17 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [17]; unstable size 17; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.24996211,  0.16829924,  0.13107289,  0.16280264,  0.15623373,
          0.20199078,  0.19087136, -0.50727564,  0.15982790]], device='cuda:0') None
best_l after optimization: 2.3838565349578857
alpha/beta optimization time: 0.7977550029754639
initial alpha-crown bounds: tensor([[ 0.36623037,  0.29234529,  0.30498829,  0.30795875,  0.30644485,
          0.34793013,  0.32145071, -0.14893278,  0.28544092]], device='cuda:0')
Worst class: (+ rhs) -0.1489327847957611
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 118.32910323143005
##### Instance 82 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3662303686141968.

Properties batch 1, size 1
Remaining timeout: 118.24040079116821
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2923452854156494.

Properties batch 2, size 1
Remaining timeout: 118.16286611557007
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.304988294839859.

Properties batch 3, size 1
Remaining timeout: 118.08188891410828
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3079587519168854.

Properties batch 4, size 1
Remaining timeout: 118.00369477272034
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.30644485354423523.

Properties batch 5, size 1
Remaining timeout: 117.92876267433167
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3479301333427429.

Properties batch 6, size 1
Remaining timeout: 117.85049057006836
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.32145071029663086.

Properties batch 7, size 1
Remaining timeout: 117.76944065093994
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.14893278]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.81094486e-04,  9.87058342e-01, -2.02956796e-03, -3.10599059e-03,
        -4.31605801e-03,  3.93122435e-04, -5.77401370e-03,  4.38575447e-03,
        -1.27372891e-03,  4.02063876e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.14893278]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 21
Node /17 input 0: size torch.Size([256]) unstable 15
-----------------
# of unstable neurons: 36
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 162] 
split level 2: [/input.3, 150] 
split level 3: [/input.3, 30] 
split level 4: [/input, 195] 
split level 5: [/input.3, 43] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.002187490463256836
Time: prepare 0.0920    bound 0.0206    transfer 0.0022    finalize 0.0087    func 0.1237    
Accumulated time: func 0.1237    prepare 0.0925    bound 0.0206    transfer 0.0022    finalize 0.0087    
length of domains: 0
Time: pickout 0.0005    decision 0.0735    set_bounds 0.0126    solve 0.1237    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0735    set_bounds 0.0126    solve 0.1237    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.2293717861175537


Properties batch 8, size 1
Remaining timeout: 117.41989541053772
##### Instance 82 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.28544092178344727.
Result: safe in 2.6634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00220811e+00, -1.34296492e-02, -2.12185085e-03, -1.27334744e-02,
         -9.91378352e-03,  8.20102543e-03,  2.08476931e-03, -1.80748850e-02,
         -5.85950911e-04, -1.03077143e-02]], device='cuda:0')
diversed PGD initialization time: 0.1359
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00039446e+00, -1.37103498e-02,  5.30079007e-04, -1.16231441e-02,
          -9.96848568e-03,  9.12665576e-03,  3.93067300e-03, -1.90477520e-02,
          -4.36708331e-04, -1.03507563e-02],
         [ 1.00039446e+00, -1.37103498e-02,  5.30079007e-04, -1.16231441e-02,
          -9.96848568e-03,  9.12665576e-03,  3.93067300e-03, -1.90477520e-02,
          -4.36708331e-04, -1.03507563e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01410484, 0.99986440, 1.01201761, 1.01036298, 0.99126780,
          0.99646378, 1.01944220, 1.00083113, 1.01074517]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6929 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00220811e+00, -1.34296492e-02, -2.12185085e-03, -1.27334744e-02,
         -9.91378352e-03,  8.20102543e-03,  2.08476931e-03, -1.80748850e-02,
         -5.85950911e-04, -1.03077143e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 9, 1, 9] with unstable size 8 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99525416, 0.97490180, 1.00532401, 1.00225508, 0.99035001, 0.99171758,
         1.01224256, 0.99566787, 1.00026274]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8304 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.24863940e-04,  2.34325975e-03,  1.00720525e-02,  6.30103052e-03,
          9.51679587e-01,  4.02405858e-03,  6.02848083e-03,  4.51831520e-03,
          5.34345210e-03, -4.76004183e-03]], device='cuda:0')
diversed PGD initialization time: 0.1206
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00741135, 0.01454721, 0.03049797, 0.02014597, 0.46308061,
          0.01378646, 0.01276762, 0.02076201, 0.01413835, 0.40411925],
         [0.00741135, 0.01454721, 0.03049797, 0.02014597, 0.46308061,
          0.01378646, 0.01276762, 0.02076201, 0.01413835, 0.40411925]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.45566925, 0.44853342, 0.43258265, 0.44293463, 0.44929415,
          0.45031300, 0.44231862, 0.44894227, 0.05896136]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6738 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 3.24863940e-04,  2.34325975e-03,  1.00720525e-02,  6.30103052e-03,
          9.51679587e-01,  4.02405858e-03,  6.02848083e-03,  4.51831520e-03,
          5.34345210e-03, -4.76004183e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 20, 1, 10] with unstable size 19 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [19]; unstable size 19; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.16089736, -0.16904518, -0.21563621, -0.18206459, -0.17210680,
         -0.16538382, -0.40248874, -0.18895112, -1.15997648]], device='cuda:0') None
best_l after optimization: 2.531548500061035
alpha/beta optimization time: 2.560059070587158
initial alpha-crown bounds: tensor([[ 0.35198623,  0.34554797,  0.32129055,  0.33539104,  0.34429953,
          0.34812427,  0.21357435,  0.34406155, -0.07272705]], device='cuda:0')
Worst class: (+ rhs) -0.07272705435752869
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.62097573280334
##### Instance 84 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.35198622941970825.

Properties batch 1, size 1
Remaining timeout: 116.53670954704285
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.34554797410964966.

Properties batch 2, size 1
Remaining timeout: 116.45836925506592
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3212905526161194.

Properties batch 3, size 1
Remaining timeout: 116.38393688201904
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3353910446166992.

Properties batch 4, size 1
Remaining timeout: 116.3058180809021
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3442995250225067.

Properties batch 5, size 1
Remaining timeout: 116.22412514686584
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.34812426567077637.

Properties batch 6, size 1
Remaining timeout: 116.14521145820618
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2135743498802185.

Properties batch 7, size 1
Remaining timeout: 116.07178902626038
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.34406155347824097.

Properties batch 8, size 1
Remaining timeout: 115.9943380355835
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07272705]], device='cuda:0') need to verify.
Model prediction is: tensor([ 3.24863940e-04,  2.34325975e-03,  1.00720525e-02,  6.30103052e-03,
         9.51679587e-01,  4.02405858e-03,  6.02848083e-03,  4.51831520e-03,
         5.34345210e-03, -4.76004183e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07272705]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 15
-----------------
# of unstable neurons: 25
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 103] 
split level 1: [/input.3, 80] 
split level 2: [/input.3, 159] 
split level 3: [/input.3, 89] 
split level 4: [/input.3, 189] 
split level 5: [/input.3, 3] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0001423358917236328
Time: prepare 0.0777    bound 0.0060    transfer 0.0002    finalize 0.0019    func 0.0859    
Accumulated time: func 0.0859    prepare 0.0782    bound 0.0060    transfer 0.0002    finalize 0.0019    
length of domains: 0
Time: pickout 0.0004    decision 0.0277    set_bounds 0.0284    solve 0.0860    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0277    set_bounds 0.0284    solve 0.0860    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1481482982635498

Result: safe in 4.2856 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.12251565e-03,  9.92097139e-01, -4.23577428e-03, -3.58690321e-03,
         -4.54444811e-03, -6.11692667e-04, -4.20803577e-03,  2.34128535e-03,
         -2.88166851e-03,  2.29744613e-03]], device='cuda:0')
diversed PGD initialization time: 0.1270
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00895059, 0.81074935, 0.02554530, 0.01725355, 0.00306477,
          0.01747904, 0.00530134, 0.04645494, 0.01636926, 0.01986600],
         [0.00895059, 0.81074935, 0.02554530, 0.01725355, 0.00306477,
          0.01747904, 0.00530134, 0.04645494, 0.01636926, 0.01986600]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.80179876, 0.78520405, 0.79349577, 0.80768460, 0.79327029,
          0.80544800, 0.76429439, 0.79438007, 0.79088336]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7188 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.12251565e-03,  9.92097139e-01, -4.23577428e-03, -3.58690321e-03,
         -4.54444811e-03, -6.11692667e-04, -4.20803577e-03,  2.34128535e-03,
         -2.88166851e-03,  2.29744613e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 13, 1, 20] with unstable size 12 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.58100045, 0.54568911, 0.55591947, 0.32853174, 0.55939984, 0.58010209,
         0.49850014, 0.56237048, 0.47570342]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8982 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.08751687e-03, -5.51582873e-03,  1.44864619e-03,  8.03068280e-04,
          9.92499352e-01, -7.38203526e-05,  9.88788903e-04, -4.90202010e-03,
          5.49957156e-04, -7.16112554e-04]], device='cuda:0')
diversed PGD initialization time: 0.1302
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00780027, -0.01934817, -0.01984081, -0.05766071,  0.68289018,
           0.02885760, -0.00719170, -0.01491714,  0.35400000,  0.05511918],
         [-0.00780027, -0.01934817, -0.01984081, -0.05766071,  0.68289018,
           0.02885760, -0.00719170, -0.01491714,  0.35400000,  0.05511918]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.69069046, 0.70223832, 0.70273101, 0.74055088, 0.65403259,
          0.69008189, 0.69780731, 0.32889017, 0.62777102]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6651 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-3.08751687e-03, -5.51582873e-03,  1.44864619e-03,  8.03068280e-04,
          9.92499352e-01, -7.38203526e-05,  9.88788903e-04, -4.90202010e-03,
          5.49957156e-04, -7.16112554e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 28, 1, 6] with unstable size 27 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [27]; unstable size 27; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59237933, 0.61720818, 0.55752975, 0.55448645, 0.51408511, 0.56564367,
         0.55423409, 0.12549634, 0.51326954]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8186 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00439448,  0.01753046,  0.03950486,  0.00375161, -0.07235433,
          0.00982095,  0.00881780, -0.03996862,  0.01090725,  1.00283563]],
       device='cuda:0')
diversed PGD initialization time: 0.1184
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00915183,  0.02936638,  0.20088342,  0.02571318, -0.14480218,
           0.02871269,  0.01545226, -0.03055368,  0.02532566,  0.80892438],
         [ 0.00915183,  0.02936638,  0.20088342,  0.02571318, -0.14480218,
           0.02871269,  0.01545226, -0.03055368,  0.02532566,  0.80892438]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.79977256, 0.77955800, 0.60804093, 0.78321117, 0.95372653,
          0.78021169, 0.79347211, 0.83947808, 0.78359872]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6766 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00439448,  0.01753046,  0.03950486,  0.00375161, -0.07235433,
          0.00982095,  0.00881780, -0.03996862,  0.01090725,  1.00283563]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 20, 1, 10] with unstable size 19 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [19]; unstable size 19; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.43708950, 0.42101681, 0.15788491, 0.33551514, 0.50538361, 0.41256741,
         0.43461275, 0.36961284, 0.41969326]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8131 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.04280884,  0.02025772,  0.04396407, -0.00508797,  0.01115215,
          0.61547291,  0.13666746,  0.02741545,  0.05502560,  0.03719472]],
       device='cuda:0')
diversed PGD initialization time: 0.1282
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00471874,  0.00431028,  0.01770274, -0.00311308, -0.00195125,
           0.37773371,  0.55296379,  0.00297539,  0.03013109,  0.01671713],
         [ 0.00471874,  0.00431028,  0.01770274, -0.00311308, -0.00195125,
           0.37773371,  0.55296379,  0.00297539,  0.03013109,  0.01671713]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.37301496,  0.37342343,  0.36003095,  0.38084680,  0.37968495,
          -0.17523009,  0.37475830,  0.34760261,  0.36101657]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2149 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3237 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.03440136e-04,  2.11905688e-03,  1.05759501e-03,  4.34143096e-03,
          9.49415192e-03,  5.92704862e-03,  2.73552164e-03, -1.07757747e-02,
          4.81314957e-03,  9.89934802e-01]], device='cuda:0')
diversed PGD initialization time: 0.1269
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.51679495e-03, -2.58670747e-03, -4.74962592e-03, -2.26780772e-03,
           3.14127021e-02,  4.41017002e-03,  9.12044197e-04, -2.96984613e-03,
           2.93841213e-03,  9.85301375e-01],
         [-2.51679495e-03, -2.58670747e-03, -4.74962592e-03, -2.26780772e-03,
           3.14127021e-02,  4.41017002e-03,  9.12044197e-04, -2.96984613e-03,
           2.93841213e-03,  9.85301375e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98781818, 0.98788810, 0.99005103, 0.98756921, 0.95388865,
          0.98089123, 0.98438931, 0.98827124, 0.98236299]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7437 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.03440136e-04,  2.11905688e-03,  1.05759501e-03,  4.34143096e-03,
          9.49415192e-03,  5.92704862e-03,  2.73552164e-03, -1.07757747e-02,
          4.81314957e-03,  9.89934802e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 6, 1, 1] with unstable size 5 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.97045183, 0.96852857, 0.96912473, 0.96398336, 0.94871509, 0.96892351,
         0.96830451, 0.98287183, 0.96749485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9134 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00417352, -0.01321207,  0.00116608, -0.00616077, -0.01210088,
         -0.01248796, -0.00833073, -0.01524819,  0.00106497, -0.00889460]],
       device='cuda:0')
diversed PGD initialization time: 0.1172
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99691325, -0.01296711,  0.00548279, -0.00374156, -0.01269813,
          -0.01527794, -0.00657076, -0.01431589,  0.00128940, -0.00797837],
         [ 0.99691325, -0.01296711,  0.00548279, -0.00374156, -0.01269813,
          -0.01527794, -0.00657076, -0.01431589,  0.00128940, -0.00797837]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00988030, 0.99143046, 1.00065482, 1.00961137, 1.01219118,
          1.00348401, 1.01122916, 0.99562383, 1.00489163]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7694 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00417352, -0.01321207,  0.00116608, -0.00616077, -0.01210088,
         -0.01248796, -0.00833073, -0.01524819,  0.00106497, -0.00889460]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /15 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00676346, 0.98852062, 0.99860382, 1.00510955, 1.00670171, 0.99743038,
         1.00845385, 0.99230272, 1.00227678]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8829 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.06000528e-03, -2.38023698e-04,  5.87095320e-03,  1.07855797e-02,
         -3.01894918e-03, -9.13488865e-03,  1.00973606e+00, -2.75669992e-03,
          3.96949053e-03,  5.79512119e-03]], device='cuda:0')
diversed PGD initialization time: 0.1460
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 6.57947138e-02, -2.86515057e-03, -9.84485447e-03,  6.04129583e-03,
          -5.12790680e-03, -1.47798359e-02,  9.82257307e-01, -4.26107645e-03,
           3.89091671e-04,  1.77873671e-03],
         [ 6.57947138e-02, -2.86515057e-03, -9.84485447e-03,  6.04129583e-03,
          -5.12790680e-03, -1.47798359e-02,  9.82257307e-01, -4.26107645e-03,
           3.89091671e-04,  1.77873671e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.91646260, 0.98512244, 0.99210215, 0.97621602, 0.98738521,
          0.99703717, 0.98651838, 0.98186821, 0.98047858]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7313 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.06000528e-03, -2.38023698e-04,  5.87095320e-03,  1.07855797e-02,
         -3.01894918e-03, -9.13488865e-03,  1.00973606e+00, -2.75669992e-03,
          3.96949053e-03,  5.79512119e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 9, 1, 4] with unstable size 8 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.84824371, 0.92551887, 0.91754127, 0.91640079, 0.92963260, 0.91538638,
         0.92357421, 0.92099941, 0.92084754]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8993 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00100761,  0.00421923,  0.00200337,  0.00363102, -0.00131901,
          0.00643679,  0.00115128,  0.00112312,  0.00339142,  0.98642468]],
       device='cuda:0')
diversed PGD initialization time: 0.1255
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00885274, -0.02659386, -0.00657755, -0.03659485, -0.01322423,
          -0.01736762, -0.01896517, -0.03928615,  0.21393675,  0.95476174],
         [-0.00885274, -0.02659386, -0.00657755, -0.03659485, -0.01322423,
          -0.01736762, -0.01896517, -0.03928615,  0.21393675,  0.95476174]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.96361446, 0.98135561, 0.96133929, 0.99135661, 0.96798599,
          0.97212934, 0.97372693, 0.99404788, 0.74082500]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6718 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00100761,  0.00421923,  0.00200337,  0.00363102, -0.00131901,
          0.00643679,  0.00115128,  0.00112312,  0.00339142,  0.98642468]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 22, 1, 2] with unstable size 21 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [21]; unstable size 21; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93106729, 0.92624503, 0.90717542, 0.93514264, 0.93042457, 0.91430008,
         0.92223322, 0.93714565, 0.72212738]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9315 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00024319, -0.00985064,  0.01274417,  0.00479365, -0.00939426,
         -0.02109366, -0.00924591, -0.01213484, -0.00554711, -0.00827000]],
       device='cuda:0')
diversed PGD initialization time: 0.1295
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.98810214, -0.00760978,  0.01589464,  0.00893392, -0.00943434,
          -0.02632365, -0.00773021, -0.00769626, -0.00349373, -0.00462650],
         [ 0.98810214, -0.00760978,  0.01589464,  0.00893392, -0.00943434,
          -0.02632365, -0.00773021, -0.00769626, -0.00349373, -0.00462650]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99571192, 0.97220749, 0.97916824, 0.99753648, 1.01442575,
          0.99583232, 0.99579841, 0.99159586, 0.99272865]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7289 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00024319, -0.00985064,  0.01274417,  0.00479365, -0.00939426,
         -0.02109366, -0.00924591, -0.01213484, -0.00554711, -0.00827000]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 6, 1, 9] with unstable size 5 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.96583205, 0.95548731, 0.95705783, 0.96804488, 0.92114550, 0.97559488,
         0.95843726, 0.96534407, 0.96624297]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9383 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.50524753e-04,  9.64016676e-01,  3.15964222e-03, -1.19213760e-03,
         -3.87363508e-03, -8.11718404e-04,  4.31141257e-03,  4.37207520e-03,
         -5.31885028e-03, -2.40503997e-03]], device='cuda:0')
diversed PGD initialization time: 0.1338
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00216098,  0.93875802,  0.00809121,  0.00244848, -0.00210025,
           0.00238568,  0.00449357,  0.00884604, -0.00170937,  0.00180691],
         [ 0.00216098,  0.93875802,  0.00809121,  0.00244848, -0.00210025,
           0.00238568,  0.00449357,  0.00884604, -0.00170937,  0.00180691]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.93659705, 0.93066680, 0.93630952, 0.94085824, 0.93637234,
          0.93426442, 0.92991197, 0.94046736, 0.93695110]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6906 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.50524753e-04,  9.64016676e-01,  3.15964222e-03, -1.19213760e-03,
         -3.87363508e-03, -8.11718404e-04,  4.31141257e-03,  4.37207520e-03,
         -5.31885028e-03, -2.40503997e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 19] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89215958, 0.88114160, 0.88809454, 0.89506328, 0.88945663, 0.88797355,
         0.88204688, 0.89250010, 0.88745272]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9345 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.19048285e-03, -1.46422088e-02,  5.44682145e-04, -8.60083103e-03,
         -3.68057229e-02,  1.02471626e+00, -6.43935055e-03, -3.65519673e-02,
         -9.16760415e-03,  1.51249021e-03]], device='cuda:0')
diversed PGD initialization time: 0.1270
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01000510, -0.01346629,  0.00462691, -0.00377449, -0.03812300,
           1.00983644, -0.00877661, -0.03559884, -0.00735261,  0.00358456],
         [-0.01000510, -0.01346629,  0.00462691, -0.00377449, -0.03812300,
           1.00983644, -0.00877661, -0.03559884, -0.00735261,  0.00358456]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01984155, 1.02330267, 1.00520957, 1.01361096, 1.04795945,
          1.01861310, 1.04543531, 1.01718903, 1.00625181]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6669 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-8.19048285e-03, -1.46422088e-02,  5.44682145e-04, -8.60083103e-03,
         -3.68057229e-02,  1.02471626e+00, -6.43935055e-03, -3.65519673e-02,
         -9.16760415e-03,  1.51249021e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 2, 1, 11] with unstable size 1 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00822937, 0.99464715, 0.99725544, 1.00278616, 1.03335273, 1.00579131,
         1.03245926, 1.00808871, 0.99772906]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9557 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.66200101e-04,  6.98105246e-03,  9.33869183e-03,  1.25250220e-02,
         -3.90473381e-03,  7.17876107e-03,  4.24568728e-03, -4.25785780e-03,
          6.67475909e-03,  9.63092566e-01]], device='cuda:0')
diversed PGD initialization time: 0.1285
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00230457, 0.00821654, 0.01173446, 0.01869647, 0.08178104,
          0.00276585, 0.00853748, 0.00781837, 0.00318703, 0.86405170],
         [0.00230457, 0.00821654, 0.01173446, 0.01869647, 0.08178104,
          0.00276585, 0.00853748, 0.00781837, 0.00318703, 0.86405170]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.86174715, 0.85583514, 0.85231721, 0.84535521, 0.78227067,
          0.86128587, 0.85551423, 0.85623336, 0.86086464]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7482 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.66200101e-04,  6.98105246e-03,  9.33869183e-03,  1.25250220e-02,
         -3.90473381e-03,  7.17876107e-03,  4.24568728e-03, -4.25785780e-03,
          6.67475909e-03,  9.63092566e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 14, 1, 6] with unstable size 13 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.70415539, 0.69838363, 0.68350220, 0.68173575, 0.52830571, 0.70286673,
         0.70089269, 0.67549616, 0.70018297]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.92787498e-04, -1.10405684e-02, -8.82615149e-03, -1.02633834e-02,
          5.00254333e-03, -8.54089856e-04, -1.59930065e-03,  1.00334656e+00,
          1.67176127e-03, -2.75415182e-03]], device='cuda:0')
diversed PGD initialization time: 0.1285
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.01404308, 0.02305292, 0.04695752, 0.04503254, 0.02318340,
          0.03759788, 0.01779769, 0.69019133, 0.03188085, 0.04351828],
         [0.01404308, 0.02305292, 0.04695752, 0.04503254, 0.02318340,
          0.03759788, 0.01779769, 0.69019133, 0.03188085, 0.04351828]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.67614824, 0.66713840, 0.64323384, 0.64515877, 0.66700792,
          0.65259343, 0.67239362, 0.65831047, 0.64667302]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7049 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.92787498e-04, -1.10405684e-02, -8.82615149e-03, -1.02633834e-02,
          5.00254333e-03, -8.54089856e-04, -1.59930065e-03,  1.00334656e+00,
          1.67176127e-03, -2.75415182e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 12, 1, 10] with unstable size 11 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.52560288, 0.51932371, 0.43303990, 0.48881298, 0.52214193, 0.49806511,
         0.52518404, 0.50626695, 0.48980764]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01457429, -0.02823839, -0.00240481,  0.72651577, -0.03922379,
          0.03329902, -0.00904825, -0.08466302, -0.00255430,  0.39977163]],
       device='cuda:0')
diversed PGD initialization time: 0.1247
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.91915594e-02, -2.77387127e-02,  5.00261784e-04,  3.33656609e-01,
           4.60386276e-03,  1.30534470e-02, -3.04138660e-03, -3.57541293e-02,
           1.30711272e-02,  6.85845256e-01],
         [-1.91915594e-02, -2.77387127e-02,  5.00261784e-04,  3.33656609e-01,
           4.60386276e-03,  1.30534470e-02, -3.04138660e-03, -3.57541293e-02,
           1.30711272e-02,  6.85845256e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.35284817,  0.36139533,  0.33315635,  0.32905275,  0.32060316,
           0.33669800,  0.36941075,  0.32058549, -0.35218865]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1563 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3252 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.01781699.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.004454255104064941, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-5.39210066e-03, -3.58027220e-03,  5.65454364e-04, -2.37128884e-03,
          9.84202445e-01, -2.31666118e-03,  6.90087676e-04, -3.53047252e-03,
         -1.37674809e-03,  2.35369802e-03]], device='cuda:0')
diversed PGD initialization time: 0.1277
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00145726, 0.00168534, 0.01488410, 0.01499447, 0.86040938,
          0.01129313, 0.00628816, 0.01343329, 0.00844029, 0.05927947],
         [0.00145726, 0.00168534, 0.01488410, 0.01499447, 0.86040938,
          0.01129313, 0.00628816, 0.01343329, 0.00844029, 0.05927947]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.85895211, 0.85872406, 0.84552526, 0.84541488, 0.84911627,
          0.85412121, 0.84697610, 0.85196912, 0.80112994]]], device='cuda:0')
number of violation:  0
Attack finished in 0.8757 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-5.39210066e-03, -3.58027220e-03,  5.65454364e-04, -2.37128884e-03,
          9.84202445e-01, -2.31666118e-03,  6.90087676e-04, -3.53047252e-03,
         -1.37674809e-03,  2.35369802e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 13, 1, 10] with unstable size 12 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.53915507, 0.54523957, 0.52122986, 0.53783816, 0.49216056, 0.52576005,
         0.50658637, 0.52212596, 0.22986051]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 1.0161 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.02333423, 0.01171581, 0.11136550, 0.02701334, 0.01491435, 0.02690300,
         0.01458447, 0.70009065, 0.02610234, 0.00977786]], device='cuda:0')
diversed PGD initialization time: 0.1261
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02122092, -0.00583833,  0.20155782, -0.01112637, -0.00303774,
           0.03560160, -0.00183238,  0.09095810,  0.70020968, -0.01547606],
         [-0.02122092, -0.00583833,  0.20155782, -0.01112637, -0.00303774,
           0.03560160, -0.00183238,  0.09095810,  0.70020968, -0.01547606]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.11217903,  0.09679643, -0.11059971,  0.10208447,  0.09399584,
           0.05535650,  0.09279048, -0.60925156,  0.10643416]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.1575 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-9.75092500e-03, -2.82593817e-02,  1.02598214e+00, -1.59739554e-02,
         -8.56675208e-04,  2.96681374e-03, -1.37971789e-02, -2.08857507e-02,
         -3.21716070e-04, -1.07163787e-02]], device='cuda:0')
diversed PGD initialization time: 0.1274
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00420931, -0.04676674,  0.90094799,  0.34183007, -0.00941982,
          -0.17682883,  0.01736741, -0.06345744, -0.00296928, -0.01779773],
         [ 0.00420931, -0.04676674,  0.90094799,  0.34183007, -0.00941982,
          -0.17682883,  0.01736741, -0.06345744, -0.00296928, -0.01779773]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.89673865, 0.94771475, 0.55911791, 0.91036779, 1.07777679,
          0.88358057, 0.96440542, 0.90391725, 0.91874570]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7220 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-9.75092500e-03, -2.82593817e-02,  1.02598214e+00, -1.59739554e-02,
         -8.56675208e-04,  2.96681374e-03, -1.37971789e-02, -2.08857507e-02,
         -3.21716070e-04, -1.07163787e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 16, 1, 10] with unstable size 15 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [15]; unstable size 15; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.49134493, 0.64622307, 0.16122031, 0.61263305, 0.64379650, 0.58612323,
         0.63410521, 0.59201968, 0.59130669]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9341 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.25370175e-03,  9.81031179e-01, -1.71731412e-03, -8.60705972e-04,
         -4.76176664e-03,  3.47181410e-03, -6.23376667e-03,  3.43216956e-03,
          5.32291830e-04,  6.34689629e-03]], device='cuda:0')
diversed PGD initialization time: 0.1690
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02394401,  0.42077190, -0.03135757, -0.07871884, -0.01217756,
          -0.01271444, -0.05771440, -0.01988418,  0.81249905, -0.02162267],
         [-0.02394401,  0.42077190, -0.03135757, -0.07871884, -0.01217756,
          -0.01271444, -0.05771440, -0.01988418,  0.81249905, -0.02162267]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.44471592,  0.45212948,  0.49949074,  0.43294945,  0.43348634,
           0.47848630,  0.44065607, -0.39172715,  0.44239455]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1846 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2536 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00177169e+00, -1.30989105e-02, -8.11815262e-04, -1.20488405e-02,
         -9.21245292e-03,  7.90096074e-03,  2.32927874e-03, -1.81481689e-02,
         -3.38077545e-04, -1.02761239e-02]], device='cuda:0')
diversed PGD initialization time: 0.1740
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00033486e+00, -5.12572378e-03,  1.20588541e-02, -1.18091702e-02,
          -8.28038901e-03,  5.14359772e-03,  6.52611256e-04, -1.71110183e-02,
           1.23491138e-03, -9.13710147e-03],
         [ 1.00033486e+00, -5.12572378e-03,  1.20588541e-02, -1.18091702e-02,
          -8.28038901e-03,  5.14359772e-03,  6.52611256e-04, -1.71110183e-02,
           1.23491138e-03, -9.13710147e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00546062, 0.98827600, 1.01214409, 1.00861526, 0.99519128,
          0.99968225, 1.01744592, 0.99909997, 1.00947201]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7409 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00177169e+00, -1.30989105e-02, -8.11815262e-04, -1.20488405e-02,
         -9.21245292e-03,  7.90096074e-03,  2.32927874e-03, -1.81481689e-02,
         -3.38077545e-04, -1.02761239e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 17, 1, 9] with unstable size 16 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [16]; unstable size 16; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.96262026, 0.86744708, 0.98309845, 0.97520959, 0.94816351, 0.96875268,
         0.97518528, 0.96627057, 0.95726657]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9265 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00171154, 0.00409257, 0.01331627, 0.00879442, 0.88114703, 0.00585528,
         0.00711388, 0.03966944, 0.00706498, 0.02077670]], device='cuda:0')
diversed PGD initialization time: 0.1625
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00969983, 0.01952252, 0.04036371, 0.02547385, 0.32828632,
          0.01833454, 0.01251835, 0.13361759, 0.02017034, 0.39359492],
         [0.00969983, 0.01952252, 0.04036371, 0.02547385, 0.32828632,
          0.01833454, 0.01251835, 0.13361759, 0.02017034, 0.39359492]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.31858650,  0.30876380,  0.28792262,  0.30281246,  0.30995178,
           0.31576797,  0.19466873,  0.30811599, -0.06530860]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2306 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3303 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.95757228e-04,  9.87827420e-01, -3.35122645e-03, -2.96978652e-03,
         -4.25511226e-03, -3.55467200e-05, -4.34195250e-03,  3.18951905e-03,
         -2.14622915e-03,  3.13210487e-03]], device='cuda:0')
diversed PGD initialization time: 0.1580
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.01907411, 0.62561727, 0.05337614, 0.03884950, 0.00814212,
          0.03502745, 0.01759405, 0.09155306, 0.03454951, 0.03862071],
         [0.01907411, 0.62561727, 0.05337614, 0.03884950, 0.00814212,
          0.03502745, 0.01759405, 0.09155306, 0.03454951, 0.03862071]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.60654318, 0.57224113, 0.58676779, 0.61747515, 0.59058982,
          0.60802323, 0.53406417, 0.59106773, 0.58699656]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7606 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-8.95757228e-04,  9.87827420e-01, -3.35122645e-03, -2.96978652e-03,
         -4.25511226e-03, -3.55467200e-05, -4.34195250e-03,  3.18951905e-03,
         -2.14622915e-03,  3.13210487e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 23, 1, 21] with unstable size 22 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [22]; unstable size 22; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.23137569,  0.17631593,  0.18587963, -0.33656567,  0.18322188,
          0.21796593, -0.14944410, -0.05920723,  0.01836088]], device='cuda:0') None
best_l after optimization: 1.4199845790863037
alpha/beta optimization time: 2.5173869132995605
initial alpha-crown bounds: tensor([[ 0.28248072,  0.24459589,  0.25591642, -0.23304957,  0.26460177,
          0.28111964, -0.06628335,  0.26886904,  0.12173408]], device='cuda:0')
Worst class: (+ rhs) -0.23304957151412964
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.53095126152039
##### Instance 105 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.28248071670532227.

Properties batch 1, size 1
Remaining timeout: 116.45070600509644
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.24459588527679443.

Properties batch 2, size 1
Remaining timeout: 116.37166690826416
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.25591641664505005.

Properties batch 3, size 1
Remaining timeout: 116.28949308395386
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.23304957]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.95757228e-04,  9.87827420e-01, -3.35122645e-03, -2.96978652e-03,
        -4.25511226e-03, -3.55467200e-05, -4.34195250e-03,  3.18951905e-03,
        -2.14622915e-03,  3.13210487e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.23304957]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 21
Node /17 input 0: size torch.Size([256]) unstable 13
-----------------
# of unstable neurons: 34
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 123] 
split level 2: [/input.3, 26] 
split level 3: [/input.3, 18] 
split level 4: [/input, 95] 
split level 5: [/input, 178] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0003514289855957031
Time: prepare 0.0314    bound 0.0060    transfer 0.0004    finalize 0.0070    func 0.0450    
Accumulated time: func 0.0450    prepare 0.0320    bound 0.0060    transfer 0.0004    finalize 0.0070    
length of domains: 0
Time: pickout 0.0005    decision 0.1019    set_bounds 0.0124    solve 0.0450    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.1019    set_bounds 0.0124    solve 0.0450    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1683177947998047


Properties batch 4, size 1
Remaining timeout: 116.01654553413391
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.26460176706314087.

Properties batch 5, size 1
Remaining timeout: 115.9340763092041
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2811196446418762.

Properties batch 6, size 1
Remaining timeout: 115.85494256019592
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06628335]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.95757228e-04,  9.87827420e-01, -3.35122645e-03, -2.96978652e-03,
        -4.25511226e-03, -3.55467200e-05, -4.34195250e-03,  3.18951905e-03,
        -2.14622915e-03,  3.13210487e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06628335]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 21
Node /17 input 0: size torch.Size([256]) unstable 13
-----------------
# of unstable neurons: 34
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 124] 
split level 2: [/input, 95] 
split level 3: [/input.3, 13] 
split level 4: [/input.3, 165] 
split level 5: [/input.3, 133] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.0108642578125e-05
Time: prepare 0.0322    bound 0.0051    transfer 0.0001    finalize 0.0023    func 0.0398    
Accumulated time: func 0.0398    prepare 0.0327    bound 0.0051    transfer 0.0001    finalize 0.0023    
length of domains: 0
Time: pickout 0.0004    decision 0.1136    set_bounds 0.0125    solve 0.0398    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.1136    set_bounds 0.0125    solve 0.0398    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1720566749572754


Properties batch 7, size 1
Remaining timeout: 115.58034634590149
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2688690423965454.

Properties batch 8, size 1
Remaining timeout: 115.49951457977295
##### Instance 105 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.12173408269882202.
Result: safe in 4.5723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.06393951e-03, -5.92714548e-03,  1.44110620e-03,  1.49163604e-03,
          9.92281616e-01,  2.70557404e-03,  8.98785889e-04, -5.80836833e-03,
          9.99175012e-04, -1.77428126e-04]], device='cuda:0')
diversed PGD initialization time: 0.1248
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00606414, -0.00812350, -0.02207567, -0.05666670,  0.50366378,
          -0.01164965, -0.02716868, -0.03362614,  0.65778679, -0.00806709],
         [ 0.00606414, -0.00812350, -0.02207567, -0.05666670,  0.50366378,
          -0.01164965, -0.02716868, -0.03362614,  0.65778679, -0.00806709]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.49759963,  0.51178730,  0.52573943,  0.56033051,  0.51531345,
           0.53083247,  0.53728992, -0.15412301,  0.51173085]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1562 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2532 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
          0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208]],
       device='cuda:0')
diversed PGD initialization time: 0.1248
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.70515779e-03, -1.07005239e-04,  7.82906935e-02, -3.12860012e-02,
          -4.49395217e-02, -2.04658210e-02, -2.70155892e-02, -6.70141727e-02,
           4.17379886e-01,  6.99358225e-01],
         [-8.70515779e-03, -1.07005239e-04,  7.82906935e-02, -3.12860012e-02,
          -4.49395217e-02, -2.04658210e-02, -2.70155892e-02, -6.70141727e-02,
           4.17379886e-01,  6.99358225e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.70806336, 0.69946522, 0.62106752, 0.73064423, 0.74429774,
          0.71982408, 0.72637379, 0.76637238, 0.28197834]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7495 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
          0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 40, 1, 11] with unstable size 39 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [39]; unstable size 39; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 39] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.02876359,  0.03198151, -0.31547970, -0.21953785, -0.01850714,
         -0.10058814,  0.01362622, -0.07197368, -0.38545430]], device='cuda:0') None
best_l after optimization: -0.7233957052230835
alpha/beta optimization time: 2.4714441299438477
initial alpha-crown bounds: tensor([[ 0.05214161,  0.06128766, -0.28221548, -0.19089833,  0.02280150,
         -0.05943851,  0.04539049, -0.03532417, -0.33714050]], device='cuda:0')
Worst class: (+ rhs) -0.3371405005455017
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.61646962165833
##### Instance 107 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.05214160680770874.

Properties batch 1, size 1
Remaining timeout: 116.53832197189331
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.061287663877010345.

Properties batch 2, size 1
Remaining timeout: 116.45052218437195
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.28221548]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
         0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.28221548]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 39
-----------------
# of unstable neurons: 50
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 238] 
split level 1: [/input.3, 38] 
split level 2: [/input.3, 102] 
split level 3: [/input.3, 57] 
split level 4: [/input, 138] 
split level 5: [/input.3, 149] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0001087188720703125
Time: prepare 0.0762    bound 0.0060    transfer 0.0002    finalize 0.0025    func 0.0850    
Accumulated time: func 0.0850    prepare 0.0767    bound 0.0060    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0464    set_bounds 0.0246    solve 0.0850    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0464    set_bounds 0.0246    solve 0.0850    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.16196131706237793


Properties batch 3, size 1
Remaining timeout: 116.18170714378357
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19089833]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
         0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19089833]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 39
-----------------
# of unstable neurons: 50
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 238] 
split level 1: [/input.3, 57] 
split level 2: [/input.3, 38] 
split level 3: [/input, 138] 
split level 4: [/input.3, 149] 
split level 5: [/input.3, 153] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.748603820800781e-05
Time: prepare 0.0990    bound 0.0054    transfer 0.0001    finalize 0.0023    func 0.1069    
Accumulated time: func 0.1069    prepare 0.0996    bound 0.0054    transfer 0.0001    finalize 0.0023    
length of domains: 0
Time: pickout 0.0005    decision 0.0278    set_bounds 0.0265    solve 0.1070    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0278    set_bounds 0.0265    solve 0.1070    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.16745734214782715


Properties batch 4, size 1
Remaining timeout: 115.87967300415039
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.022801503539085388.

Properties batch 5, size 1
Remaining timeout: 115.79570078849792
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05943851]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
         0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05943851]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 39
-----------------
# of unstable neurons: 50
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 238] 
split level 1: [/input.3, 38] 
split level 2: [/input.3, 57] 
split level 3: [/input, 138] 
split level 4: [/input.3, 149] 
split level 5: [/input.3, 187] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.000118255615234375
Time: prepare 0.1309    bound 0.0057    transfer 0.0002    finalize 0.0025    func 0.1393    
Accumulated time: func 0.1393    prepare 0.1315    bound 0.0057    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0005    decision 0.0659    set_bounds 0.0121    solve 0.1394    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0659    set_bounds 0.0121    solve 0.1394    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.23826241493225098


Properties batch 6, size 1
Remaining timeout: 115.4350938796997
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.04539048671722412.

Properties batch 7, size 1
Remaining timeout: 115.35885095596313
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03532417]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
         0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03532417]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 39
-----------------
# of unstable neurons: 50
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 57] 
split level 2: [/input, 138] 
split level 3: [/input.3, 238] 
split level 4: [/input.3, 133] 
split level 5: [/input.3, 187] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00015234947204589844
Time: prepare 0.0164    bound 0.0055    transfer 0.0001    finalize 0.0027    func 0.0247    
Accumulated time: func 0.0247    prepare 0.0170    bound 0.0055    transfer 0.0001    finalize 0.0027    
length of domains: 0
Time: pickout 0.0004    decision 0.1078    set_bounds 0.0123    solve 0.0247    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.1078    set_bounds 0.0123    solve 0.0247    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1593639850616455


Properties batch 8, size 1
Remaining timeout: 115.09448671340942
##### Instance 107 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.33714050]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.00405448,  0.01618741,  0.03885482,  0.00451800, -0.06604557,
         0.01034781,  0.00860406, -0.03939696,  0.01056226,  0.99925208],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.33714050]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 39
-----------------
# of unstable neurons: 50
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 238] 
split level 1: [/input.3, 38] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 150] 
split level 4: [/input.3, 57] 
split level 5: [/input, 138] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011014938354492188
Time: prepare 0.0665    bound 0.0059    transfer 0.0002    finalize 0.0025    func 0.0751    
Accumulated time: func 0.0751    prepare 0.0670    bound 0.0059    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0590    set_bounds 0.0369    solve 0.0752    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0590    set_bounds 0.0369    solve 0.0752    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17722272872924805

Result: safe in 5.2003 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.03977840,  0.01825032,  0.04049936, -0.00712611,  0.00984729,
          0.63579422,  0.13733262,  0.02389477,  0.05308222,  0.03489642]],
       device='cuda:0')
diversed PGD initialization time: 0.1337
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.02333980,  0.00968243,  0.02631293, -0.00093869,  0.00427601,
           0.23792174,  0.62476385,  0.01244519,  0.04225018,  0.02607030],
         [ 0.02333980,  0.00968243,  0.02631293, -0.00093869,  0.00427601,
           0.23792174,  0.62476385,  0.01244519,  0.04225018,  0.02607030]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.21458195,  0.22823931,  0.21160881,  0.23886043,  0.23364574,
          -0.38684210,  0.22547656,  0.19567156,  0.21185145]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1763 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2617 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.12287360e-04,  1.65169686e-03,  4.66421247e-04,  3.47562134e-03,
          9.08882543e-03,  6.24992698e-03,  2.46450678e-03, -9.74263251e-03,
          4.76834923e-03,  9.92013097e-01]], device='cuda:0')
diversed PGD initialization time: 0.1340
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.76487321e-03, -3.34542990e-03, -5.92878461e-03, -3.93628329e-03,
           4.90705483e-02,  4.01937962e-03,  5.30492514e-04, -6.39545918e-03,
           3.26733291e-03,  9.74581718e-01],
         [-2.76487321e-03, -3.34542990e-03, -5.92878461e-03, -3.93628329e-03,
           4.90705483e-02,  4.01937962e-03,  5.30492514e-04, -6.39545918e-03,
           3.26733291e-03,  9.74581718e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.97734660, 0.97792715, 0.98051047, 0.97851801, 0.92551118,
          0.97056234, 0.97405124, 0.98097718, 0.97131437]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7448 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-3.12287360e-04,  1.65169686e-03,  4.66421247e-04,  3.47562134e-03,
          9.08882543e-03,  6.24992698e-03,  2.46450678e-03, -9.74263251e-03,
          4.76834923e-03,  9.92013097e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 14, 1, 1] with unstable size 13 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94275594, 0.94752681, 0.94451106, 0.94616669, 0.84064168, 0.91886139,
         0.93410844, 0.95849389, 0.93070477]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8530 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00404191, -0.01255953,  0.00129464, -0.00615710, -0.01114074,
         -0.01172287, -0.00799809, -0.01470639,  0.00110223, -0.00855690]],
       device='cuda:0')
diversed PGD initialization time: 0.1218
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99623030, -0.01219095,  0.00626917, -0.00311843, -0.01182857,
          -0.01495091, -0.00652518, -0.01350664,  0.00115500, -0.00747249],
         [ 0.99623030, -0.01219095,  0.00626917, -0.00311843, -0.01182857,
          -0.01495091, -0.00652518, -0.01350664,  0.00115500, -0.00747249]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00842130, 0.98996115, 0.99934876, 1.00805891, 1.01118124,
          1.00275552, 1.00973690, 0.99507529, 1.00370276]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6893 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00404191, -0.01255953,  0.00129464, -0.00615710, -0.01114074,
         -0.01172287, -0.00799809, -0.01470639,  0.00110223, -0.00855690]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 3] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.00335872, 0.98463488, 0.99557573, 1.00126171, 1.00321066, 0.99282545,
         1.00507545, 0.98941594, 0.99914622]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8492 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.36719272e-03, -2.94767320e-04,  5.78747690e-03,  9.98876989e-03,
         -3.01208347e-03, -7.03076273e-03,  1.00791764e+00, -2.70090997e-03,
          3.70026380e-03,  5.65417111e-03]], device='cuda:0')
diversed PGD initialization time: 0.1225
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 9.40618068e-02,  5.45781106e-03, -3.89620662e-04,  1.46772042e-02,
          -4.37289476e-04, -1.09241605e-02,  8.84227157e-01,  8.48093629e-03,
           8.13832134e-03,  9.53486562e-03],
         [ 9.40618068e-02,  5.45781106e-03, -3.89620662e-04,  1.46772042e-02,
          -4.37289476e-04, -1.09241605e-02,  8.84227157e-01,  8.48093629e-03,
           8.13832134e-03,  9.53486562e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.79016536, 0.87876934, 0.88461679, 0.86954993, 0.88466442,
          0.89515132, 0.87574625, 0.87608886, 0.87469232]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6934 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.36719272e-03, -2.94767320e-04,  5.78747690e-03,  9.98876989e-03,
         -3.01208347e-03, -7.03076273e-03,  1.00791764e+00, -2.70090997e-03,
          3.70026380e-03,  5.65417111e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 13, 1, 5] with unstable size 12 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.62527573, 0.76582998, 0.74638283, 0.74917227, 0.76969802, 0.74913430,
         0.72332931, 0.75673676, 0.75313270]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9478 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00138710,  0.00362578,  0.00144951,  0.00284414, -0.00157915,
          0.00690980,  0.00103398,  0.00154985,  0.00360569,  0.98839664]],
       device='cuda:0')
diversed PGD initialization time: 0.1225
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02628374, -0.02378713, -0.04385281, -0.06992641, -0.04073678,
          -0.01484323, -0.02194931, -0.07366695,  0.55143058,  0.74981767],
         [-0.02628374, -0.02378713, -0.04385281, -0.06992641, -0.04073678,
          -0.01484323, -0.02194931, -0.07366695,  0.55143058,  0.74981767]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.77610141, 0.77360481, 0.79367048, 0.81974411, 0.79055446,
          0.76466089, 0.77176696, 0.82348460, 0.19838709]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7688 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00138710,  0.00362578,  0.00144951,  0.00284414, -0.00157915,
          0.00690980,  0.00103398,  0.00154985,  0.00360569,  0.98839664]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 44, 1, 4] with unstable size 43 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [43]; unstable size 43; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 43] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.47154099,  0.40490010,  0.40704092,  0.48809248,  0.53614044,
          0.39603665,  0.44654411,  0.46195215, -0.07388411]], device='cuda:0') None

all verified at 2th iter
best_l after optimization: 4.245001792907715
alpha/beta optimization time: 0.07689309120178223
initial alpha-crown bounds: tensor([[0.54833567, 0.49733856, 0.49910587, 0.56418914, 0.59159881, 0.47923011,
         0.52111262, 0.54165840, 0.00243282]], device='cuda:0')
Worst class: (+ rhs) 0.0024328231811523438
verified with init bound!
Result: safe-incomplete in 0.9769 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99992532, -0.00899006,  0.01300429,  0.00499574, -0.00817691,
         -0.02042239, -0.00856078, -0.01140366, -0.00559790, -0.00780237]],
       device='cuda:0')
diversed PGD initialization time: 0.1225
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.98254395, -0.00439606,  0.00134298, -0.02923489, -0.00189025,
           0.05645223, -0.00946776, -0.00241132, -0.00433613, -0.00521659],
         [ 0.98254395, -0.00439606,  0.00134298, -0.02923489, -0.00189025,
           0.05645223, -0.00946776, -0.00241132, -0.00433613, -0.00521659]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98694003, 0.98120093, 1.01177883, 0.98443419, 0.92609173,
          0.99201173, 0.98495525, 0.98688006, 0.98776054]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7598 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99992532, -0.00899006,  0.01300429,  0.00499574, -0.00817691,
         -0.02042239, -0.00856078, -0.01140366, -0.00559790, -0.00780237]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 20, 1, 11] with unstable size 19 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [19]; unstable size 19; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.74960756, 0.72656393, 0.66819930, 0.72465980, 0.45023698, 0.74483371,
         0.65567744, 0.72200954, 0.75611889]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9269 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.44068825e-04,  9.63375926e-01,  3.41561437e-03, -1.07018650e-03,
         -3.77473608e-03, -4.76300716e-04,  3.66322696e-03,  4.81864810e-03,
         -4.80449945e-03, -1.71111524e-03]], device='cuda:0')
diversed PGD initialization time: 0.1254
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.46374682e-03,  9.31943536e-01,  9.71247256e-03,  3.40376794e-03,
          -1.57915056e-03,  3.50178778e-03,  3.88187915e-03,  1.04467422e-02,
          -3.72014940e-04,  3.46480310e-03],
         [ 2.46374682e-03,  9.31943536e-01,  9.71247256e-03,  3.40376794e-03,
          -1.57915056e-03,  3.50178778e-03,  3.88187915e-03,  1.04467422e-02,
          -3.72014940e-04,  3.46480310e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.92947978, 0.92223108, 0.92853975, 0.93352270, 0.92844176,
          0.92806166, 0.92149681, 0.93231553, 0.92847872]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7273 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.44068825e-04,  9.63375926e-01,  3.41561437e-03, -1.07018650e-03,
         -3.77473608e-03, -4.76300716e-04,  3.66322696e-03,  4.81864810e-03,
         -4.80449945e-03, -1.71111524e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 15, 1, 21] with unstable size 14 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [14]; unstable size 14; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.85763538, 0.84574682, 0.79042923, 0.82303715, 0.85666990, 0.84932488,
         0.83634430, 0.85133535, 0.74995714]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9085 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-7.53297657e-03, -1.43290907e-02,  8.42660666e-05, -8.91144574e-03,
         -3.50871570e-02,  1.02533090e+00, -5.41454554e-03, -3.54900062e-02,
         -9.12585855e-03,  1.14245713e-03]], device='cuda:0')
diversed PGD initialization time: 0.1298
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00980434, -0.01288910,  0.00520308, -0.00319283, -0.03696390,
           1.00725496, -0.00847024, -0.03445768, -0.00696172,  0.00363994],
         [-0.00980434, -0.01288910,  0.00520308, -0.00319283, -0.03696390,
           1.00725496, -0.00847024, -0.03445768, -0.00696172,  0.00363994]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01705933, 1.02014410, 1.00205183, 1.01044774, 1.04421890,
          1.01572514, 1.04171264, 1.01421666, 1.00361502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6693 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-7.53297657e-03, -1.43290907e-02,  8.42660666e-05, -8.91144574e-03,
         -3.50871570e-02,  1.02533090e+00, -5.41454554e-03, -3.54900062e-02,
         -9.12585855e-03,  1.14245713e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 4, 1, 11] with unstable size 3 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98819864, 0.95646745, 0.98568189, 0.98637390, 1.01607621, 0.99644840,
         1.02041268, 0.96123838, 0.98443729]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8472 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-6.77272677e-04,  6.57443702e-03,  8.52684677e-03,  1.07087940e-02,
         -4.84447554e-03,  7.85721093e-03,  3.42680514e-03, -2.77991593e-03,
          7.09407777e-03,  9.65128183e-01]], device='cuda:0')
diversed PGD initialization time: 0.1334
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00324646, 0.00905151, 0.01452880, 0.01955170, 0.16957946,
          0.00405862, 0.00936001, 0.00886114, 0.00440103, 0.76560575],
         [0.00324646, 0.00905151, 0.01452880, 0.01955170, 0.16957946,
          0.00405862, 0.00936001, 0.00886114, 0.00440103, 0.76560575]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.76235926, 0.75655425, 0.75107694, 0.74605405, 0.59602630,
          0.76154715, 0.75624573, 0.75674462, 0.76120472]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7444 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-6.77272677e-04,  6.57443702e-03,  8.52684677e-03,  1.07087940e-02,
         -4.84447554e-03,  7.85721093e-03,  3.42680514e-03, -2.77991593e-03,
          7.09407777e-03,  9.65128183e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 19, 1, 7] with unstable size 18 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [18]; unstable size 18; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.51393247, 0.51002246, 0.47902831, 0.47097525, 0.20267491, 0.51083624,
         0.51225209, 0.46375674, 0.48971766]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-7.99447298e-05, -9.87590104e-03, -7.95671344e-03, -9.44428146e-03,
          5.24642691e-03, -2.33083963e-04, -1.24227628e-03,  9.99424279e-01,
          2.07933784e-03, -2.49258429e-03]], device='cuda:0')
diversed PGD initialization time: 0.1205
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00214794,  0.01328877,  0.02216357,  0.02545259,  0.01826669,
           0.03222040,  0.00956835,  0.48174918,  0.02205001,  0.36055142],
         [-0.00214794,  0.01328877,  0.02216357,  0.02545259,  0.01826669,
           0.03222040,  0.00956835,  0.48174918,  0.02205001,  0.36055142]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.48389712, 0.46846041, 0.45958561, 0.45629659, 0.46348250,
          0.44952878, 0.47218084, 0.45969915, 0.12119776]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6885 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-7.99447298e-05, -9.87590104e-03, -7.95671344e-03, -9.44428146e-03,
          5.24642691e-03, -2.33083963e-04, -1.24227628e-03,  9.99424279e-01,
          2.07933784e-03, -2.49258429e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 36, 1, 17] with unstable size 35 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [35]; unstable size 35; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.03202158,  0.02503148, -0.26449612, -0.03690349, -0.01286353,
         -0.09784850, -0.01020408, -0.28441960, -0.45211583]], device='cuda:0') None
best_l after optimization: 0.32320475578308105
alpha/beta optimization time: 2.519242763519287
initial alpha-crown bounds: tensor([[ 0.11410661,  0.16838998, -0.09666032,  0.12530401,  0.12033706,
          0.08362752,  0.12649496, -0.06401271, -0.25438234]], device='cuda:0')
Worst class: (+ rhs) -0.25438234210014343
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.6289746761322
##### Instance 117 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.11410661041736603.

Properties batch 1, size 1
Remaining timeout: 116.55129337310791
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.16838997602462769.

Properties batch 2, size 1
Remaining timeout: 116.47115015983582
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09666032]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.99447298e-05, -9.87590104e-03, -7.95671344e-03, -9.44428146e-03,
         5.24642691e-03, -2.33083963e-04, -1.24227628e-03,  9.99424279e-01,
         2.07933784e-03, -2.49258429e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09666032]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 17
Node /17 input 0: size torch.Size([256]) unstable 30
-----------------
# of unstable neurons: 47
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 231] 
split level 1: [/input.3, 102] 
split level 2: [/input.3, 87] 
split level 3: [/input.3, 232] 
split level 4: [/input.3, 159] 
split level 5: [/input, 228] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.002235889434814453
Time: prepare 0.0304    bound 0.0101    transfer 0.0023    finalize 0.0070    func 0.0499    
Accumulated time: func 0.0499    prepare 0.0309    bound 0.0101    transfer 0.0023    finalize 0.0070    
length of domains: 0
Time: pickout 0.0005    decision 0.0969    set_bounds 0.0126    solve 0.0500    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0969    set_bounds 0.0126    solve 0.0500    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17560887336730957


Properties batch 3, size 1
Remaining timeout: 116.19165301322937
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.12530401349067688.

Properties batch 4, size 1
Remaining timeout: 116.11287331581116
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.12033706158399582.

Properties batch 5, size 1
Remaining timeout: 116.0361156463623
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.08362752199172974.

Properties batch 6, size 1
Remaining timeout: 115.95961737632751
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.12649495899677277.

Properties batch 7, size 1
Remaining timeout: 115.87864375114441
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06401271]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.99447298e-05, -9.87590104e-03, -7.95671344e-03, -9.44428146e-03,
         5.24642691e-03, -2.33083963e-04, -1.24227628e-03,  9.99424279e-01,
         2.07933784e-03, -2.49258429e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06401271]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 17
Node /17 input 0: size torch.Size([256]) unstable 30
-----------------
# of unstable neurons: 47
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 231] 
split level 1: [/input.3, 91] 
split level 2: [/input.3, 30] 
split level 3: [/input.3, 150] 
split level 4: [/input.3, 162] 
split level 5: [/input.3, 159] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011801719665527344
Time: prepare 0.0221    bound 0.0058    transfer 0.0002    finalize 0.0019    func 0.0299    
Accumulated time: func 0.0299    prepare 0.0227    bound 0.0058    transfer 0.0002    finalize 0.0019    
length of domains: 0
Time: pickout 0.0004    decision 0.0924    set_bounds 0.0178    solve 0.0300    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0924    set_bounds 0.0178    solve 0.0300    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.14456915855407715


Properties batch 8, size 1
Remaining timeout: 115.63036799430847
##### Instance 117 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.25438234]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.99447298e-05, -9.87590104e-03, -7.95671344e-03, -9.44428146e-03,
         5.24642691e-03, -2.33083963e-04, -1.24227628e-03,  9.99424279e-01,
         2.07933784e-03, -2.49258429e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25438234]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 17
Node /17 input 0: size torch.Size([256]) unstable 30
-----------------
# of unstable neurons: 47
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 231] 
split level 1: [/input.3, 80] 
split level 2: [/input.3, 159] 
split level 3: [/input.3, 26] 
split level 4: [/input.3, 91] 
split level 5: [/input.3, 3] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.025245189666748047
Time: prepare 0.0857    bound 0.6741    transfer 0.0068    finalize 0.0064    func 0.7731    
Accumulated time: func 0.7731    prepare 0.0862    bound 0.6741    transfer 0.0068    finalize 0.0064    
Current worst splitting domains lb-rhs (depth):
-0.09331 (6), 
length of domains: 1
Time: pickout 0.0004    decision 0.0282    set_bounds 0.0220    solve 0.7732    add 0.0671    
Accumulated time: pickout 0.0004    decision 0.0282    set_bounds 0.0220    solve 0.7732    add 0.0671    
Current (lb-rhs): -0.09331071376800537
1 domains visited
Cumulative time: 0.8968825340270996

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 149] 
split level 1: [/input, 135] 
split level 2: [/input, 45] 
split level 3: [/input.3, 30] 
split level 4: [/input.3, 87] 
split level 5: [/input.3, 169] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012421607971191406
Time: prepare 0.1178    bound 0.0058    transfer 0.0002    finalize 0.0026    func 0.1264    
Accumulated time: func 0.8995    prepare 0.2048    bound 0.6799    transfer 0.0069    finalize 0.0090    
length of domains: 0
Time: pickout 0.0009    decision 0.0381    set_bounds 0.0126    solve 0.1265    add 0.0001    
Accumulated time: pickout 0.0013    decision 0.0663    set_bounds 0.0346    solve 0.8997    add 0.0672    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 1.075425624847412

Result: safe in 5.5783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01376135, -0.02755392,  0.00548206,  0.67363071, -0.03407857,
          0.03666005, -0.00664720, -0.08075757,  0.00154338,  0.42692792]],
       device='cuda:0')
diversed PGD initialization time: 0.1238
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.24425308e-02, -2.48812661e-02,  7.21350312e-03,  2.70222008e-01,
           3.10167670e-04,  1.73626319e-02,  5.03815711e-04, -2.04233378e-02,
           1.79418176e-02,  7.04475224e-01],
         [-2.24425308e-02, -2.48812661e-02,  7.21350312e-03,  2.70222008e-01,
           3.10167670e-04,  1.73626319e-02,  5.03815711e-04, -2.04233378e-02,
           1.79418176e-02,  7.04475224e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.29266453,  0.29510328,  0.26300851,  0.26991183,  0.25285938,
           0.26971820,  0.29064536,  0.25228018, -0.43425322]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1654 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.02226144.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.005565360188484192, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-4.49467823e-03, -3.68811935e-03,  8.82431865e-04, -1.87671930e-03,
          9.86506581e-01, -2.13158876e-03,  1.02380663e-03, -3.25086713e-03,
         -8.97236168e-04,  1.70912594e-03]], device='cuda:0')
diversed PGD initialization time: 0.1229
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00549544, 0.00493394, 0.02079630, 0.01818837, 0.59865606,
          0.02951499, 0.01200570, 0.04366139, 0.01294915, 0.25000107],
         [0.00549544, 0.00493394, 0.02079630, 0.01818837, 0.59865606,
          0.02951499, 0.01200570, 0.04366139, 0.01294915, 0.25000107]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.59316063, 0.59372211, 0.57785976, 0.58046770, 0.56914109,
          0.58665037, 0.55499470, 0.58570689, 0.34865499]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7207 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-4.49467823e-03, -3.68811935e-03,  8.82431865e-04, -1.87671930e-03,
          9.86506581e-01, -2.13158876e-03,  1.02380663e-03, -3.25086713e-03,
         -8.97236168e-04,  1.70912594e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 27, 1, 13] with unstable size 26 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [26]; unstable size 26; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.24741834,  0.26106232,  0.19850603,  0.19469486,  0.18484741,
          0.21421596,  0.25017655, -0.15796608, -0.27767187]], device='cuda:0') None
best_l after optimization: 1.5915067195892334
alpha/beta optimization time: 0.735980749130249
initial alpha-crown bounds: tensor([[ 0.28349566,  0.29781801,  0.24151172,  0.25570565,  0.22486565,
          0.25408334,  0.29507315, -0.10384250, -0.15720394]], device='cuda:0')
Worst class: (+ rhs) -0.15720394253730774
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 118.34534335136414
##### Instance 119 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2834956645965576.

Properties batch 1, size 1
Remaining timeout: 118.2574200630188
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.29781800508499146.

Properties batch 2, size 1
Remaining timeout: 118.18359518051147
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.24151171743869781.

Properties batch 3, size 1
Remaining timeout: 118.10534644126892
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.25570565462112427.

Properties batch 4, size 1
Remaining timeout: 118.02321600914001
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2248656451702118.

Properties batch 5, size 1
Remaining timeout: 117.94467353820801
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2540833353996277.

Properties batch 6, size 1
Remaining timeout: 117.8652138710022
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.29507315158843994.

Properties batch 7, size 1
Remaining timeout: 117.7929015159607
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.10384250]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.49467823e-03, -3.68811935e-03,  8.82431865e-04, -1.87671930e-03,
         9.86506581e-01, -2.13158876e-03,  1.02380663e-03, -3.25086713e-03,
        -8.97236168e-04,  1.70912594e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.10384250]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 21
-----------------
# of unstable neurons: 34
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 103] 
split level 1: [/input.3, 150] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 30] 
split level 4: [/input.3, 189] 
split level 5: [/input.3, 80] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.002257823944091797
Time: prepare 0.0624    bound 0.0133    transfer 0.0023    finalize 0.0025    func 0.0806    
Accumulated time: func 0.0806    prepare 0.0629    bound 0.0133    transfer 0.0023    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0314    set_bounds 0.0111    solve 0.0807    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0314    set_bounds 0.0111    solve 0.0807    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1292424201965332


Properties batch 8, size 1
Remaining timeout: 117.52566742897034
##### Instance 119 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.15720394]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.49467823e-03, -3.68811935e-03,  8.82431865e-04, -1.87671930e-03,
         9.86506581e-01, -2.13158876e-03,  1.02380663e-03, -3.25086713e-03,
        -8.97236168e-04,  1.70912594e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15720394]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 21
-----------------
# of unstable neurons: 34
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 103] 
split level 1: [/input.3, 80] 
split level 2: [/input.3, 89] 
split level 3: [/input.3, 159] 
split level 4: [/input.3, 189] 
split level 5: [/input, 141] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012087821960449219
Time: prepare 0.0064    bound 0.0073    transfer 0.0005    finalize 0.0070    func 0.0212    
Accumulated time: func 0.0212    prepare 0.0069    bound 0.0073    transfer 0.0005    finalize 0.0070    
length of domains: 0
Time: pickout 0.0005    decision 0.0314    set_bounds 0.0114    solve 0.0212    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0314    set_bounds 0.0114    solve 0.0212    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.09603571891784668

Result: safe in 2.7150 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.02800655, 0.01598702, 0.18126182, 0.04147709, 0.02002563, 0.03580263,
         0.01857135, 0.56736171, 0.03383482, 0.02175913]], device='cuda:0')
diversed PGD initialization time: 0.1364
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.10546905, -0.03539695,  0.05863731, -0.03421584, -0.01169295,
          -0.00600224, -0.01366332,  0.01648137,  0.92451769, -0.03162837],
         [ 0.10546905, -0.03539695,  0.05863731, -0.03421584, -0.01169295,
          -0.00600224, -0.01366332,  0.01648137,  0.92451769, -0.03162837]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.08898768,  0.05187832, -0.04215594,  0.05069721,  0.02817432,
           0.02248361,  0.03014469, -0.90803635,  0.04810974]]],
       device='cuda:0')
number of violation:  3
Attack finished in 0.1677 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2447 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-9.37046483e-03, -2.72869170e-02,  1.02490258e+00, -1.54363215e-02,
          9.28379595e-05,  2.53821164e-03, -1.32480413e-02, -1.96744949e-02,
         -2.86854804e-04, -9.87780839e-03]], device='cuda:0')
diversed PGD initialization time: 0.1248
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.01312408, -0.05367462,  0.81502444,  0.49727789, -0.01295134,
          -0.21044791,  0.02830887, -0.09983024, -0.00284786, -0.02101987],
         [ 0.01312408, -0.05367462,  0.81502444,  0.49727789, -0.01295134,
          -0.21044791,  0.02830887, -0.09983024, -0.00284786, -0.02101987]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.80190039, 0.86869907, 0.31774655, 0.82797575, 1.02547240,
          0.78671557, 0.91485465, 0.81787229, 0.83604431]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7432 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-9.37046483e-03, -2.72869170e-02,  1.02490258e+00, -1.54363215e-02,
          9.28379595e-05,  2.53821164e-03, -1.32480413e-02, -1.96744949e-02,
         -2.86854804e-04, -9.87780839e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 24, 1, 11] with unstable size 23 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [23]; unstable size 23; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.11047179,  0.15092479, -0.56613964,  0.13175845,  0.00774987,
          0.07154030,  0.11157798, -0.33418411,  0.07528339]], device='cuda:0') None
best_l after optimization: 4.432062149047852
alpha/beta optimization time: 2.5493175983428955
initial alpha-crown bounds: tensor([[ 0.50948191,  0.59313428, -0.01623650,  0.56719887,  0.58521903,
          0.53855401,  0.61610395,  0.48448822,  0.55411863]], device='cuda:0')
Worst class: (+ rhs) -0.016236504539847374
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.56385707855225
##### Instance 121 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5094819068908691.

Properties batch 1, size 1
Remaining timeout: 116.48479342460632
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5931342840194702.

Properties batch 2, size 1
Remaining timeout: 116.40567445755005
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01623650]], device='cuda:0') need to verify.
Model prediction is: tensor([-9.37046483e-03, -2.72869170e-02,  1.02490258e+00, -1.54363215e-02,
         9.28379595e-05,  2.53821164e-03, -1.32480413e-02, -1.96744949e-02,
        -2.86854804e-04, -9.87780839e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01623650]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 18
-----------------
# of unstable neurons: 29
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 153] 
split level 1: [/input.3, 143] 
split level 2: [/input.3, 78] 
split level 3: [/input.3, 194] 
split level 4: [/input.3, 241] 
split level 5: [/input.3, 236] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012636184692382812
Time: prepare 0.1023    bound 0.0059    transfer 0.0002    finalize 0.0019    func 0.1104    
Accumulated time: func 0.1104    prepare 0.1028    bound 0.0059    transfer 0.0002    finalize 0.0019    
length of domains: 0
Time: pickout 0.0004    decision 0.0301    set_bounds 0.0110    solve 0.1104    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0301    set_bounds 0.0110    solve 0.1104    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.15766310691833496


Properties batch 3, size 1
Remaining timeout: 116.11377906799316
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5671988725662231.

Properties batch 4, size 1
Remaining timeout: 116.02841448783875
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5852190256118774.

Properties batch 5, size 1
Remaining timeout: 115.94957089424133
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5385540127754211.

Properties batch 6, size 1
Remaining timeout: 115.8717782497406
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6161039471626282.

Properties batch 7, size 1
Remaining timeout: 115.79513621330261
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.48448821902275085.

Properties batch 8, size 1
Remaining timeout: 115.7129693031311
##### Instance 121 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5541186332702637.
Result: safe in 4.3723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-5.33245504e-04,  9.55965042e-01,  2.17552483e-03,  2.53912807e-03,
         -4.55804542e-03,  8.40289146e-03, -4.95535880e-03,  4.05316055e-03,
          4.74461913e-03,  1.22743174e-02]], device='cuda:0')
diversed PGD initialization time: 0.1251
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.03399559,  0.26626334, -0.03176682, -0.04937702, -0.01250618,
          -0.07414822, -0.08456117, -0.02317806,  1.04550850, -0.02989888],
         [-0.03399559,  0.26626334, -0.03176682, -0.04937702, -0.01250618,
          -0.07414822, -0.08456117, -0.02317806,  1.04550850, -0.02989888]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.30025893,  0.29803014,  0.31564036,  0.27876952,  0.34041154,
           0.35082451,  0.28944141, -0.77924514,  0.29616222]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1795 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2505 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00150752e+00, -1.27259940e-02,  2.02581286e-04, -1.14113390e-02,
         -8.51253793e-03,  7.77031481e-03,  2.40594894e-03, -1.80900693e-02,
         -9.85935330e-05, -1.01842731e-02]], device='cuda:0')
diversed PGD initialization time: 0.1263
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.98892301, -0.00531536,  0.01153342, -0.01217021, -0.00762099,
           0.01955366,  0.00293854, -0.02285802,  0.00737187, -0.00445388],
         [ 0.98892301, -0.00531536,  0.01153342, -0.01217021, -0.00762099,
           0.01955366,  0.00293854, -0.02285802,  0.00737187, -0.00445388]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.99423838, 0.97738957, 1.00109327, 0.99654400, 0.96936935,
          0.98598444, 1.01178098, 0.98155117, 0.99337691]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7207 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00150752e+00, -1.27259940e-02,  2.02581286e-04, -1.14113390e-02,
         -8.51253793e-03,  7.77031481e-03,  2.40594894e-03, -1.80900693e-02,
         -9.85935330e-05, -1.01842731e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 24, 1, 9] with unstable size 23 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [23]; unstable size 23; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81132090, 0.64059556, 0.82898879, 0.83445400, 0.75868940, 0.81277448,
         0.81930023, 0.81760931, 0.82329553]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8940 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00331673, 0.00705510, 0.01849179, 0.01324613, 0.81718099, 0.00903973,
         0.00863814, 0.05191055, 0.00946457, 0.05346619]], device='cuda:0')
diversed PGD initialization time: 0.1243
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.36262754e-03,  8.07245821e-03,  2.20360607e-02,  7.30928034e-03,
           1.59032270e-03,  7.61770457e-03,  1.32207200e-03, -3.89665365e-04,
           1.46199390e-02,  9.39854145e-01],
         [ 2.36262754e-03,  8.07245821e-03,  2.20360607e-02,  7.30928034e-03,
           1.59032270e-03,  7.61770457e-03,  1.32207200e-03, -3.89665365e-04,
           1.46199390e-02,  9.39854145e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-7.72304833e-04, -6.48213550e-03, -2.04457380e-02, -5.71895763e-03,
          -6.02738187e-03,  2.68250704e-04,  1.97998807e-03, -1.30296163e-02,
          -9.38263834e-01]]], device='cuda:0')
number of violation:  7
Attack finished in 0.1948 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3190 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
         -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
         -7.60614872e-04,  5.58261573e-03]], device='cuda:0')
diversed PGD initialization time: 0.1233
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00068194,  0.54488009, -0.01343326, -0.01431578,  0.35229826,
           0.00236462, -0.00331416,  0.06416918,  0.00687049,  0.03361862],
         [-0.00068194,  0.54488009, -0.01343326, -0.01431578,  0.35229826,
           0.00236462, -0.00331416,  0.06416918,  0.00687049,  0.03361862]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.54556203, 0.55831337, 0.55919588, 0.19258183, 0.54251546,
          0.54819423, 0.48071092, 0.53800958, 0.51126146]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6854 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
         -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
         -7.60614872e-04,  5.58261573e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 31, 1, 26] with unstable size 30 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [30]; unstable size 30; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 30] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.12299904, -0.19616374, -0.18300727, -0.93290603, -0.17719126,
         -0.14511335, -0.87796521, -0.65397048, -0.39918336]], device='cuda:0') None
best_l after optimization: -1.7103532552719116
alpha/beta optimization time: 2.511739730834961
initial alpha-crown bounds: tensor([[ 2.47745365e-02, -1.82407498e-02, -4.08291817e-06, -7.75829434e-01,
          9.64470208e-03,  2.56412029e-02, -6.12915456e-01, -1.49316639e-01,
         -2.14107394e-01]], device='cuda:0')
Worst class: (+ rhs) -0.7758294343948364
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.66885685920715
##### Instance 125 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.02477453649044037.

Properties batch 1, size 1
Remaining timeout: 116.58345532417297
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01824075]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
        -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
        -7.60614872e-04,  5.58261573e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01824075]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 26
Node /17 input 0: size torch.Size([256]) unstable 20
-----------------
# of unstable neurons: 46
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 150] 
split level 2: [/input.3, 21] 
split level 3: [/input, 171] 
split level 4: [/input, 154] 
split level 5: [/input, 33] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.177757263183594e-05
Time: prepare 0.1316    bound 0.0058    transfer 0.0002    finalize 0.0025    func 0.1403    
Accumulated time: func 0.1403    prepare 0.1322    bound 0.0058    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0005    decision 0.0656    set_bounds 0.0120    solve 0.1404    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0656    set_bounds 0.0120    solve 0.1404    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.23958110809326172


Properties batch 2, size 1
Remaining timeout: 116.2216625213623
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-4.08291817e-06]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
        -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
        -7.60614872e-04,  5.58261573e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-4.08291817e-06]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 26
Node /17 input 0: size torch.Size([256]) unstable 20
-----------------
# of unstable neurons: 46
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 30] 
split level 2: [/input.3, 184] 
split level 3: [/input, 171] 
split level 4: [/input, 154] 
split level 5: [/input.3, 166] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00010704994201660156
Time: prepare 0.1293    bound 0.0058    transfer 0.0002    finalize 0.0025    func 0.1378    
Accumulated time: func 0.1378    prepare 0.1298    bound 0.0058    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0315    set_bounds 0.0125    solve 0.1379    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0315    set_bounds 0.0125    solve 0.1379    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1881427764892578


Properties batch 3, size 1
Remaining timeout: 115.90474104881287
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.77582943]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
        -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
        -7.60614872e-04,  5.58261573e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.77582943]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 26
Node /17 input 0: size torch.Size([256]) unstable 20
-----------------
# of unstable neurons: 46
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 123] 
split level 2: [/input.3, 26] 
split level 3: [/input.3, 18] 
split level 4: [/input, 95] 
split level 5: [/input, 178] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.02115178108215332
Time: prepare 0.0949    bound 0.3237    transfer 0.0004    finalize 0.0026    func 0.4218    
Accumulated time: func 0.4218    prepare 0.0954    bound 0.3237    transfer 0.0004    finalize 0.0026    
Current worst splitting domains lb-rhs (depth):
-0.11975 (6), -0.09892 (6), 
length of domains: 2
Time: pickout 0.0004    decision 0.0315    set_bounds 0.0388    solve 0.4219    add 0.0007    
Accumulated time: pickout 0.0004    decision 0.0315    set_bounds 0.0388    solve 0.4219    add 0.0007    
Current (lb-rhs): -0.11974555253982544
2 domains visited
Cumulative time: 0.49927639961242676

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 62] [/input, 62] 
split level 1: [/input, 75] [/input, 75] 
split level 2: [/input.3, 13] [/input.3, 13] 
split level 3: [/input.3, 21] [/input.3, 21] 
split level 4: [/input.3, 124] [/input.3, 124] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012373924255371094
Time: prepare 0.0355    bound 0.0057    transfer 0.0002    finalize 0.0027    func 0.0441    
Accumulated time: func 0.4660    prepare 0.1315    bound 0.3294    transfer 0.0006    finalize 0.0053    
length of domains: 0
Time: pickout 0.0006    decision 0.0780    set_bounds 0.0256    solve 0.0442    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.1095    set_bounds 0.0644    solve 0.4661    add 0.0008    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.6480922698974609


Properties batch 4, size 1
Remaining timeout: 115.1358323097229
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.009644702076911926.

Properties batch 5, size 1
Remaining timeout: 115.04916048049927
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.025641202926635742.

Properties batch 6, size 1
Remaining timeout: 114.96858143806458
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.61291546]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
        -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
        -7.60614872e-04,  5.58261573e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.61291546]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 26
Node /17 input 0: size torch.Size([256]) unstable 20
-----------------
# of unstable neurons: 46
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 124] 
split level 2: [/input.3, 13] 
split level 3: [/input.3, 133] 
split level 4: [/input.3, 165] 
split level 5: [/input, 140] 
pruning_in_iteration open status: True
ratio of positive domain = 52 / 64 = 0.8125
pruning-in-iteration extra time: 0.023323535919189453
Time: prepare 0.0340    bound 0.3244    transfer 0.0004    finalize 0.0024    func 0.3615    
Accumulated time: func 0.3615    prepare 0.0345    bound 0.3244    transfer 0.0004    finalize 0.0024    
Current worst splitting domains lb-rhs (depth):
-0.28492 (6), -0.18192 (6), -0.15249 (6), -0.12834 (6), -0.11708 (6), -0.11409 (6), -0.09226 (6), -0.08369 (6), -0.04207 (6), -0.03246 (6), -0.02363 (6), -0.00396 (6), 
length of domains: 12
Time: pickout 0.0004    decision 0.1000    set_bounds 0.0232    solve 0.3615    add 0.0012    
Accumulated time: pickout 0.0004    decision 0.1000    set_bounds 0.0232    solve 0.3615    add 0.0012    
Current (lb-rhs): -0.28491872549057007
12 domains visited
Cumulative time: 0.4909985065460205

BaB round 2
batch: 12
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 95] [/input, 95] [/input, 95] [/input, 95] [/input, 95] [/input, 95] [/input, 95] [/input, 95] [/input, 95] [/input, 95] 
split level 1: [/input, 75] [/input, 75] [/input, 75] [/input, 75] [/input, 33] [/input, 75] [/input, 33] [/input, 75] [/input, 75] [/input, 33] 
split level 2: [/input, 178] [/input, 178] [/input, 93] [/input, 154] [/input, 75] [/input, 178] [/input, 154] [/input, 178] [/input, 93] [/input, 75] 
pruning_in_iteration open status: True
ratio of positive domain = 94 / 96 = 0.9791666666666666
pruning-in-iteration extra time: 0.021092653274536133
Time: prepare 0.1435    bound 0.3241    transfer 0.0004    finalize 0.0038    func 0.4720    
Accumulated time: func 0.8334    prepare 0.1786    bound 0.6486    transfer 0.0008    finalize 0.0063    
Current worst splitting domains lb-rhs (depth):
-0.06229 (9), -0.00861 (9), 
length of domains: 2
Time: pickout 0.0006    decision 0.1038    set_bounds 0.0141    solve 0.4721    add 0.0009    
Accumulated time: pickout 0.0010    decision 0.2038    set_bounds 0.0373    solve 0.8336    add 0.0021    
Current (lb-rhs): -0.062294065952301025
14 domains visited
Cumulative time: 1.0829789638519287

BaB round 3
batch: 2
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 33] [/input, 93] 
split level 1: [/input, 154] [/input, 154] 
split level 2: [/input, 178] [/input, 178] 
split level 3: [/input.3, 166] [/input.3, 166] 
split level 4: [/input.3, 123] [/input.3, 123] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.319450378417969e-05
Time: prepare 0.0991    bound 0.0054    transfer 0.0001    finalize 0.0025    func 0.1071    
Accumulated time: func 0.9406    prepare 0.2781    bound 0.6540    transfer 0.0009    finalize 0.0087    
length of domains: 0
Time: pickout 0.0005    decision 0.0246    set_bounds 0.0265    solve 0.1072    add 0.0001    
Accumulated time: pickout 0.0015    decision 0.2285    set_bounds 0.0637    solve 0.9408    add 0.0022    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
14 domains visited
Cumulative time: 1.242253065109253


Properties batch 7, size 1
Remaining timeout: 113.61671590805054
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.14931664]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
        -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
        -7.60614872e-04,  5.58261573e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.14931664]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 26
Node /17 input 0: size torch.Size([256]) unstable 20
-----------------
# of unstable neurons: 46
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 162] 
split level 2: [/input.3, 30] 
split level 3: [/input, 95] 
split level 4: [/input.3, 150] 
split level 5: [/input.3, 183] 

all verified at 12th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.014600515365600586
Time: prepare 0.1051    bound 0.2069    transfer 0.0052    finalize 0.0030    func 0.3203    
Accumulated time: func 0.3203    prepare 0.1057    bound 0.2069    transfer 0.0052    finalize 0.0030    
length of domains: 0
Time: pickout 0.0004    decision 0.0281    set_bounds 0.0214    solve 0.3205    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0281    set_bounds 0.0214    solve 0.3205    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.37610387802124023


Properties batch 8, size 1
Remaining timeout: 113.10933089256287
##### Instance 125 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21410739]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.83428550e-04,  9.84001279e-01, -2.59993970e-03, -3.42116505e-03,
        -4.57704440e-03,  8.70250165e-04, -4.50071692e-03,  2.81108916e-03,
        -7.60614872e-04,  5.58261573e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21410739]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 26
Node /17 input 0: size torch.Size([256]) unstable 20
-----------------
# of unstable neurons: 46
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 26] 
split level 2: [/input, 95] 
split level 3: [/input.3, 183] 
split level 4: [/input.3, 13] 
split level 5: [/input, 75] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.534027099609375e-05
Time: prepare 0.0242    bound 0.0052    transfer 0.0001    finalize 0.0024    func 0.0319    
Accumulated time: func 0.0319    prepare 0.0248    bound 0.0052    transfer 0.0001    finalize 0.0024    
length of domains: 0
Time: pickout 0.0004    decision 0.1146    set_bounds 0.0126    solve 0.0320    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.1146    set_bounds 0.0126    solve 0.0320    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.16525959968566895

Result: safe in 7.1593 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.76378712e-03, -6.63409382e-03,  1.43381953e-03, -5.93908131e-04,
          9.83187795e-01,  1.23722032e-02,  2.90009007e-03, -1.44835860e-02,
          3.17562371e-03,  8.29535723e-03]], device='cuda:0')
diversed PGD initialization time: 0.1284
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00709547, -0.02095741, -0.00574696, -0.05750142,  0.36307722,
           0.05776466, -0.00221005, -0.01783030,  0.40158501,  0.29433268],
         [-0.00709547, -0.02095741, -0.00574696, -0.05750142,  0.36307722,
           0.05776466, -0.00221005, -0.01783030,  0.40158501,  0.29433268]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.37017268,  0.38403463,  0.36882418,  0.42057866,  0.30531257,
           0.36528727,  0.38090754, -0.03850779,  0.06874454]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1661 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2543 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00371299,  0.01484130,  0.03819148,  0.00528227, -0.05970414,
          0.01087383,  0.00838805, -0.03881571,  0.01021440,  0.99565601]],
       device='cuda:0')
diversed PGD initialization time: 0.1275
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02854248, -0.02898570,  0.06238677, -0.07891436, -0.04474371,
           0.00162996, -0.03654230, -0.08099474,  0.72417426,  0.51796848],
         [-0.02854248, -0.02898570,  0.06238677, -0.07891436, -0.04474371,
           0.00162996, -0.03654230, -0.08099474,  0.72417426,  0.51796848]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.54651093,  0.54695415,  0.45558172,  0.59688282,  0.56271219,
           0.51633853,  0.55451077,  0.59896320, -0.20620579]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1967 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3046 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.03673283,  0.01623585,  0.03702150, -0.00917086,  0.00853641,
          0.65623599,  0.13796967,  0.02036159,  0.05112106,  0.03258433]],
       device='cuda:0')
diversed PGD initialization time: 0.1295
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.33165510e-02, -1.07301101e-02, -8.75571370e-03, -2.61155516e-03,
          -1.31154023e-02,  2.89338887e-01,  8.10848355e-01, -2.09973156e-02,
          -6.15589321e-04, -5.24777174e-03],
         [-2.33165510e-02, -1.07301101e-02, -8.75571370e-03, -2.61155516e-03,
          -1.31154023e-02,  2.89338887e-01,  8.10848355e-01, -2.09973156e-02,
          -6.15589321e-04, -5.24777174e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.31265545,  0.30006900,  0.29809460,  0.29195043,  0.30245429,
          -0.52150947,  0.31033620,  0.28995448,  0.29458666]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2047 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2902 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-7.23864883e-04,  1.17877126e-03, -1.66550279e-04,  2.56828964e-03,
          8.63821432e-03,  6.55182451e-03,  2.18690932e-03, -8.50902498e-03,
          4.70752269e-03,  9.94016290e-01]], device='cuda:0')
diversed PGD initialization time: 0.1368
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01306928, -0.01399770, -0.00898278, -0.02908090,  0.01579780,
           0.03236312,  0.00949346, -0.03344916,  0.10392245,  0.93569100],
         [-0.01306928, -0.01399770, -0.00898278, -0.02908090,  0.01579780,
           0.03236312,  0.00949346, -0.03344916,  0.10392245,  0.93569100]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.94876027, 0.94968867, 0.94467378, 0.96477187, 0.91989321,
          0.90332788, 0.92619753, 0.96914017, 0.83176857]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7295 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-7.23864883e-04,  1.17877126e-03, -1.66550279e-04,  2.56828964e-03,
          8.63821432e-03,  6.55182451e-03,  2.18690932e-03, -8.50902498e-03,
          4.70752269e-03,  9.94016290e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 36, 1, 3] with unstable size 35 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [35]; unstable size 35; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.55182070, 0.53099608, 0.48781723, 0.51745570, 0.35969165, 0.35109228,
         0.44733196, 0.45326665, 0.11938626]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9317 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00391030, -0.01190660,  0.00142345, -0.00615311, -0.01018010,
         -0.01095801, -0.00766487, -0.01416419,  0.00113943, -0.00821905]],
       device='cuda:0')
diversed PGD initialization time: 0.1257
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99557418, -0.01145533,  0.00702231, -0.00248732, -0.01102944,
          -0.01473560, -0.00663016, -0.01271008,  0.00104892, -0.00698723],
         [ 0.99557418, -0.01145533,  0.00702231, -0.00248732, -0.01102944,
          -0.01473560, -0.00663016, -0.01271008,  0.00104892, -0.00698723]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00702953, 0.98855186, 0.99806148, 1.00660360, 1.01030982,
          1.00220430, 1.00828421, 0.99452525, 1.00256145]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7507 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00391030, -0.01190660,  0.00142345, -0.00615311, -0.01018010,
         -0.01095801, -0.00766487, -0.01416419,  0.00113943, -0.00821905]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 1, 1, 3] with unstable size 0 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [0]; unstable size 0; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.99995393, 0.98073822, 0.99254769, 0.99741399, 0.99968749, 0.98810911,
         1.00169718, 0.98651785, 0.99601561]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8979 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.67306140e-03, -3.51265073e-04,  5.70414960e-03,  9.19101387e-03,
         -3.00518051e-03, -4.92311269e-03,  1.00609875e+00, -2.64501572e-03,
          3.42963636e-03,  5.51332533e-03]], device='cuda:0')
diversed PGD initialization time: 0.1231
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.14880985,  0.01072402,  0.01280278,  0.02092119,  0.00327052,
          -0.00802976,  0.77706575,  0.01569674,  0.01332705,  0.01401106],
         [ 0.14880985,  0.01072402,  0.01280278,  0.02092119,  0.00327052,
          -0.00802976,  0.77706575,  0.01569674,  0.01332705,  0.01401106]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.62825590, 0.76634175, 0.76426297, 0.75614458, 0.77379525,
          0.78509551, 0.76136899, 0.76373869, 0.76305467]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6940 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.67306140e-03, -3.51265073e-04,  5.70414960e-03,  9.19101387e-03,
         -3.00518051e-03, -4.92311269e-03,  1.00609875e+00, -2.64501572e-03,
          3.42963636e-03,  5.51332533e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 18, 1, 5] with unstable size 17 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [17]; unstable size 17; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.20891967, 0.49351573, 0.45626429, 0.48128158, 0.50551677, 0.46092492,
         0.38559610, 0.50229937, 0.45515075]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8352 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.59073994e-03,  3.17120552e-03,  1.62670016e-03,  2.32380629e-03,
         -2.01432779e-03,  7.70453364e-03,  1.12196058e-03,  4.06891108e-04,
          4.13104892e-03,  9.89594340e-01]], device='cuda:0')
diversed PGD initialization time: 0.1223
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.47089362e-04, -1.90875977e-02, -1.45174265e-02, -6.29596263e-02,
          -4.01160531e-02, -8.43045115e-03, -3.51783112e-02, -4.72757667e-02,
           7.39504397e-01,  4.50775564e-01],
         [ 1.47089362e-04, -1.90875977e-02, -1.45174265e-02, -6.29596263e-02,
          -4.01160531e-02, -8.43045115e-03, -3.51783112e-02, -4.72757667e-02,
           7.39504397e-01,  4.50775564e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.45062846,  0.46986318,  0.46529299,  0.51373518,  0.49089161,
           0.45920601,  0.48595387,  0.49805135, -0.28872883]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1364 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2210 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99979341, -0.00829860,  0.01311190,  0.00500295, -0.00716634,
         -0.01963061, -0.00817469, -0.01082420, -0.00555756, -0.00743747]],
       device='cuda:0')
diversed PGD initialization time: 0.1257
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 9.25893843e-01,  8.12910497e-03, -1.11598521e-02, -5.88903576e-02,
          -1.21982209e-02,  1.68129832e-01,  2.19210982e-04,  3.35371718e-02,
           2.49743462e-04,  1.15977228e-03],
         [ 9.25893843e-01,  8.12910497e-03, -1.11598521e-02, -5.88903576e-02,
          -1.21982209e-02,  1.68129832e-01,  2.19210982e-04,  3.35371718e-02,
           2.49743462e-04,  1.15977228e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.91776472, 0.93705368, 0.98478419, 0.93809205, 0.75776398,
          0.92567462, 0.89235669, 0.92564410, 0.92473406]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7152 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99979341, -0.00829860,  0.01311190,  0.00500295, -0.00716634,
         -0.01963061, -0.00817469, -0.01082420, -0.00555756, -0.00743747]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 31, 1, 12] with unstable size 30 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [30]; unstable size 30; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 30] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.57397944, 0.48359954, 0.45169035, 0.51511002, 0.08639699, 0.52288365,
         0.37142414, 0.42133039, 0.56312215]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8998 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.00667647086083889, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.37601721e-04,  9.62735176e-01,  3.67155671e-03, -9.48250294e-04,
         -3.67582962e-03, -1.40897930e-04,  3.01504880e-03,  5.26523590e-03,
         -4.29013371e-03, -1.01719797e-03]], device='cuda:0')
diversed PGD initialization time: 0.1231
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.72668526e-03,  9.25773919e-01,  1.13163590e-02,  4.22257185e-03,
          -1.11396611e-03,  4.52004373e-03,  3.30383331e-03,  1.19550154e-02,
           7.99633563e-04,  4.92832810e-03],
         [ 2.72668526e-03,  9.25773919e-01,  1.13163590e-02,  4.22257185e-03,
          -1.11396611e-03,  4.52004373e-03,  3.30383331e-03,  1.19550154e-02,
           7.99633563e-04,  4.92832810e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.92304724, 0.91445756, 0.92155135, 0.92688787, 0.92125386,
          0.92247009, 0.91381890, 0.92497426, 0.92084557]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6662 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.37601721e-04,  9.62735176e-01,  3.67155671e-03, -9.48250294e-04,
         -3.67582962e-03, -1.40897930e-04,  3.01504880e-03,  5.26523590e-03,
         -4.29013371e-03, -1.01719797e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 32, 1, 24] with unstable size 31 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [31]; unstable size 31; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.77245039, 0.72268879, 0.48462480, 0.61023283, 0.62878895, 0.73637694,
         0.68723047, 0.70294178, 0.26785359]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.7947 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-6.87545165e-03, -1.40159428e-02, -3.76120210e-04, -9.22207534e-03,
         -3.33685838e-02,  1.02594578e+00, -4.38980013e-03, -3.44280154e-02,
         -9.08413529e-03,  7.72446394e-04]], device='cuda:0')
diversed PGD initialization time: 0.1228
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00994480, -0.01247443,  0.00583285, -0.00236411, -0.03641098,
           1.00481486, -0.00859229, -0.03380597, -0.00664236,  0.00385509],
         [-0.00994480, -0.01247443,  0.00583285, -0.00236411, -0.03641098,
           1.00481486, -0.00859229, -0.03380597, -0.00664236,  0.00385509]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01475966, 1.01728928, 0.99898201, 1.00717902, 1.04122579,
          1.01340711, 1.03862083, 1.01145720, 1.00095975]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7568 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-6.87545165e-03, -1.40159428e-02, -3.76120210e-04, -9.22207534e-03,
         -3.33685838e-02,  1.02594578e+00, -4.38980013e-03, -3.44280154e-02,
         -9.08413529e-03,  7.72446394e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 11, 1, 14] with unstable size 10 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.82173169, 0.76548797, 0.81020731, 0.78500026, 0.84203893, 0.88749844,
         0.85453922, 0.57094920, 0.81504828]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9297 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00111441,  0.00601784,  0.00752753,  0.00894585, -0.00612097,
          0.00836368,  0.00277792, -0.00224391,  0.00734352,  0.96930236]],
       device='cuda:0')
diversed PGD initialization time: 0.1183
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00446361, 0.00992449, 0.01809424, 0.02044515, 0.25594869,
          0.00571052, 0.01039908, 0.01020809, 0.00590087, 0.66585559],
         [0.00446361, 0.00992449, 0.01809424, 0.02044515, 0.25594869,
          0.00571052, 0.01039908, 0.01020809, 0.00590087, 0.66585559]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.66139197, 0.65593112, 0.64776134, 0.64541042, 0.40990689,
          0.66014504, 0.65545648, 0.65564752, 0.65995473]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7239 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00111441,  0.00601784,  0.00752753,  0.00894585, -0.00612097,
          0.00836368,  0.00277792, -0.00224391,  0.00734352,  0.96930236]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 27, 1, 9] with unstable size 26 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [26]; unstable size 26; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.28250873,  0.27856761,  0.24157080,  0.22268377, -0.15549228,
          0.26700026,  0.27963203,  0.16746560,  0.20274523]], device='cuda:0') None
best_l after optimization: 2.037665367126465
alpha/beta optimization time: 2.337395668029785
initial alpha-crown bounds: tensor([[ 0.29745060,  0.29267204,  0.25065270,  0.27548087, -0.13827264,
          0.28783372,  0.29494599,  0.19634159,  0.28056052]], device='cuda:0')
Worst class: (+ rhs) -0.13827264308929443
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.69424271583557
##### Instance 136 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.29745060205459595.

Properties batch 1, size 1
Remaining timeout: 116.61528253555298
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2926720380783081.

Properties batch 2, size 1
Remaining timeout: 116.54248094558716
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2506527006626129.

Properties batch 3, size 1
Remaining timeout: 116.46582651138306
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.27548086643218994.

Properties batch 4, size 1
Remaining timeout: 116.38551592826843
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.13827264]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00111441,  0.00601784,  0.00752753,  0.00894585, -0.00612097,
         0.00836368,  0.00277792, -0.00224391,  0.00734352,  0.96930236],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.13827264]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 9
Node /17 input 0: size torch.Size([256]) unstable 19
-----------------
# of unstable neurons: 28
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input, 15] 
split level 3: [/input, 178] 
split level 4: [/input.3, 18] 
split level 5: [/input.3, 123] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012993812561035156
Time: prepare 0.1317    bound 0.0058    transfer 0.0002    finalize 0.0025    func 0.1403    
Accumulated time: func 0.1403    prepare 0.1322    bound 0.0058    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0005    decision 0.0400    set_bounds 0.0121    solve 0.1403    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0400    set_bounds 0.0121    solve 0.1403    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.21314406394958496


Properties batch 5, size 1
Remaining timeout: 116.03685307502747
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.28783372044563293.

Properties batch 6, size 1
Remaining timeout: 115.96103096008301
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.29494598507881165.

Properties batch 7, size 1
Remaining timeout: 115.88357305526733
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1963415890932083.

Properties batch 8, size 1
Remaining timeout: 115.80328369140625
##### Instance 136 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.28056052327156067.
Result: safe in 4.2753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 9.93963331e-04, -7.48014450e-03, -9.97246802e-03, -5.16973436e-03,
          5.74778765e-03,  2.49810517e-03, -6.76155090e-04,  9.84925091e-01,
          3.41182947e-03,  1.08108670e-03]], device='cuda:0')
diversed PGD initialization time: 0.1262
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02858270, -0.01550078,  0.02809979, -0.01378053,  0.01199206,
           0.05952110,  0.01032806,  0.34855047,  0.53381371,  0.02342349],
         [-0.02858270, -0.01550078,  0.02809979, -0.01378053,  0.01199206,
           0.05952110,  0.01032806,  0.34855047,  0.53381371,  0.02342349]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.37713316,  0.36405125,  0.32045066,  0.36233100,  0.33655840,
           0.28902936,  0.33822241, -0.18526325,  0.32512698]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2143 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.4052 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01292997, -0.02683951,  0.01339568,  0.62073898, -0.02861008,
          0.04000199, -0.00424269, -0.07634552,  0.00565148,  0.45321673]],
       device='cuda:0')
diversed PGD initialization time: 0.1251
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02220325, -0.03088935,  0.00821778,  0.31488496, -0.00930611,
           0.03663027, -0.02691186, -0.04223841,  0.66940945,  0.07178645],
         [-0.02220325, -0.03088935,  0.00821778,  0.31488496, -0.00930611,
           0.03663027, -0.02691186, -0.04223841,  0.66940945,  0.07178645]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.33708820,  0.34577429,  0.30666718,  0.32419106,  0.27825469,
           0.34179682,  0.35712337, -0.35452449,  0.24309851]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2139 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3317 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.02670588.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.006676472723484039, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-3.70560214e-03, -3.77525389e-03,  1.26500428e-03, -1.41036510e-03,
          9.88245547e-01, -1.96651369e-03,  1.30093843e-03, -2.99043953e-03,
         -4.58851457e-04,  1.01357698e-03]], device='cuda:0')
diversed PGD initialization time: 0.1227
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02277494, -0.02767599, -0.02199422, -0.04432675,  0.40922952,
           0.00732984, -0.00468940, -0.01865166,  0.59797281,  0.09982065],
         [-0.02277494, -0.02767599, -0.02199422, -0.04432675,  0.40922952,
           0.00732984, -0.00468940, -0.01865166,  0.59797281,  0.09982065]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.43200445,  0.43690550,  0.43122375,  0.45355627,  0.40189970,
           0.41391891,  0.42788118, -0.18874329,  0.30940887]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2080 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3158 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.02718472, 0.01440709, 0.26515335, 0.05588180, 0.02016482, 0.04040753,
         0.02104982, 0.45677948, 0.03588280, 0.02604324]], device='cuda:0')
diversed PGD initialization time: 0.1255
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.10916189, -0.03081035,  0.00951244, -0.01908383, -0.01411370,
          -0.02012440, -0.02281263, -0.01741876,  1.00085151, -0.02894729],
         [ 0.10916189, -0.03081035,  0.00951244, -0.01908383, -0.01411370,
          -0.02012440, -0.02281263, -0.01741876,  1.00085151, -0.02894729]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.12658066,  0.01339159, -0.02693120,  0.00166507, -0.00330506,
           0.00270564,  0.00539388, -1.01827025,  0.01152854]]],
       device='cuda:0')
number of violation:  4
Attack finished in 0.1777 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3237 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-9.00449976e-03, -2.69981250e-02,  1.02255797e+00, -5.80829382e-03,
          6.09047711e-04, -3.31548601e-03, -1.21707097e-02, -1.91446990e-02,
         -5.50404191e-04, -9.51867551e-03]], device='cuda:0')
diversed PGD initialization time: 0.1228
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.02122534, -0.05328900,  0.64374489,  0.61448145, -0.00911492,
          -0.18240613,  0.03528256, -0.10699542,  0.00705619, -0.00903606],
         [ 0.02122534, -0.05328900,  0.64374489,  0.61448145, -0.00911492,
          -0.18240613,  0.03528256, -0.10699542,  0.00705619, -0.00903606]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.62251955, 0.69703388, 0.02926344, 0.65285981, 0.82615101,
          0.60846233, 0.75074029, 0.63668871, 0.65278095]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6596 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-9.00449976e-03, -2.69981250e-02,  1.02255797e+00, -5.80829382e-03,
          6.09047711e-04, -3.31548601e-03, -1.21707097e-02, -1.91446990e-02,
         -5.50404191e-04, -9.51867551e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 36, 1, 11] with unstable size 35 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [35]; unstable size 35; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90916759, -0.55096918, -1.39191389, -0.45957136, -0.88274056,
         -0.61287981, -0.49626684, -1.62864125, -0.56031108]], device='cuda:0') None
best_l after optimization: 0.9394311308860779
alpha/beta optimization time: 2.5155320167541504
initial alpha-crown bounds: tensor([[ 0.16058950,  0.27575970, -0.48722249,  0.26172531,  0.20495211,
          0.22469106,  0.29840782, -0.24233487,  0.24286298]], device='cuda:0')
Worst class: (+ rhs) -0.48722249269485474
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.6707854270935
##### Instance 141 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.16058950126171112.

Properties batch 1, size 1
Remaining timeout: 116.59477543830872
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2757596969604492.

Properties batch 2, size 1
Remaining timeout: 116.51725363731384
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.48722249]], device='cuda:0') need to verify.
Model prediction is: tensor([-9.00449976e-03, -2.69981250e-02,  1.02255797e+00, -5.80829382e-03,
         6.09047711e-04, -3.31548601e-03, -1.21707097e-02, -1.91446990e-02,
        -5.50404191e-04, -9.51867551e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.48722249]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 22
-----------------
# of unstable neurons: 33
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 153] 
split level 1: [/input.3, 241] 
split level 2: [/input.3, 143] 
split level 3: [/input.3, 78] 
split level 4: [/input.3, 194] 
split level 5: [/input.3, 236] 
pruning_in_iteration open status: True
ratio of positive domain = 60 / 64 = 0.9375
pruning-in-iteration extra time: 0.022930145263671875
Time: prepare 0.0776    bound 0.3171    transfer 0.0004    finalize 0.0020    func 0.3972    
Accumulated time: func 0.3972    prepare 0.0781    bound 0.3171    transfer 0.0004    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.21147 (6), -0.11778 (6), -0.11198 (6), -0.05533 (6), 
length of domains: 4
Time: pickout 0.0004    decision 0.0276    set_bounds 0.0267    solve 0.3972    add 0.0009    
Accumulated time: pickout 0.0004    decision 0.0276    set_bounds 0.0267    solve 0.3972    add 0.0009    
Current (lb-rhs): -0.21146634221076965
4 domains visited
Cumulative time: 0.4584507942199707

BaB round 2
batch: 4
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 240] [/input, 169] [/input.3, 240] [/input, 209] 
split level 1: [/input.3, 155] [/input.3, 240] [/input.3, 155] [/input.3, 240] 
split level 2: [/input.3, 30] [/input, 150] [/input.3, 30] [/input.3, 30] 
split level 3: [/input.3, 200] [/input.3, 155] [/input.3, 200] [/input.3, 155] 
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.022124052047729492
Time: prepare 0.1053    bound 0.3216    transfer 0.0004    finalize 0.0024    func 0.4297    
Accumulated time: func 0.8268    prepare 0.1838    bound 0.6387    transfer 0.0008    finalize 0.0043    
Current worst splitting domains lb-rhs (depth):
-0.11864 (10), -0.02184 (10), -0.00232 (10), 
length of domains: 3
Time: pickout 0.0005    decision 0.0326    set_bounds 0.0237    solve 0.4297    add 0.0009    
Accumulated time: pickout 0.0010    decision 0.0602    set_bounds 0.0504    solve 0.8270    add 0.0018    
Current (lb-rhs): -0.11864203214645386
7 domains visited
Cumulative time: 0.9463551044464111

BaB round 3
batch: 3
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 169] [/input, 209] [/input.3, 151] 
split level 1: [/input, 150] [/input, 169] [/input, 150] 
split level 2: [/input.3, 217] [/input, 150] [/input.3, 217] 
split level 3: [/input.3, 116] [/input.3, 217] [/input.3, 116] 
split level 4: [/input, 164] [/input.3, 116] [/input, 254] 

all verified at 1th iter
pruning_in_iteration open status: True
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.004731893539428711
Time: prepare 0.0751    bound 0.0482    transfer 0.0068    finalize 0.0085    func 0.1385    
Accumulated time: func 0.9654    prepare 0.2594    bound 0.6869    transfer 0.0076    finalize 0.0128    
length of domains: 0
Time: pickout 0.0005    decision 0.0596    set_bounds 0.0284    solve 0.1388    add 0.0001    
Accumulated time: pickout 0.0015    decision 0.1198    set_bounds 0.0788    solve 0.9657    add 0.0019    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7 domains visited
Cumulative time: 1.1741809844970703


Properties batch 3, size 1
Remaining timeout: 115.21754169464111
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2617253065109253.

Properties batch 4, size 1
Remaining timeout: 115.13933634757996
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.20495210587978363.

Properties batch 5, size 1
Remaining timeout: 115.0643048286438
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22469106316566467.

Properties batch 6, size 1
Remaining timeout: 114.98768854141235
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.29840782284736633.

Properties batch 7, size 1
Remaining timeout: 114.90554809570312
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24233487]], device='cuda:0') need to verify.
Model prediction is: tensor([-9.00449976e-03, -2.69981250e-02,  1.02255797e+00, -5.80829382e-03,
         6.09047711e-04, -3.31548601e-03, -1.21707097e-02, -1.91446990e-02,
        -5.50404191e-04, -9.51867551e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24233487]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 11
Node /17 input 0: size torch.Size([256]) unstable 22
-----------------
# of unstable neurons: 33
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 150] 
split level 1: [/input.3, 241] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 78] 
split level 4: [/input.3, 194] 
split level 5: [/input.3, 30] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.02259516716003418
Time: prepare 0.1115    bound 0.3159    transfer 0.0004    finalize 0.0020    func 0.4301    
Accumulated time: func 0.4301    prepare 0.1121    bound 0.3159    transfer 0.0004    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.08051 (6), 
length of domains: 1
Time: pickout 0.0005    decision 0.0397    set_bounds 0.0120    solve 0.4301    add 0.0008    
Accumulated time: pickout 0.0005    decision 0.0397    set_bounds 0.0120    solve 0.4301    add 0.0008    
Current (lb-rhs): -0.08050966262817383
1 domains visited
Cumulative time: 0.5043129920959473

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 164] 
split level 1: [/input, 254] 
split level 2: [/input, 150] 
split level 3: [/input.3, 240] 
split level 4: [/input.3, 155] 
split level 5: [/input.3, 153] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00014019012451171875
Time: prepare 0.1175    bound 0.0058    transfer 0.0002    finalize 0.0026    func 0.1261    
Accumulated time: func 0.5561    prepare 0.2300    bound 0.3217    transfer 0.0006    finalize 0.0046    
length of domains: 0
Time: pickout 0.0005    decision 0.0297    set_bounds 0.0124    solve 0.1261    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.0694    set_bounds 0.0243    solve 0.5563    add 0.0009    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.6734499931335449


Properties batch 8, size 1
Remaining timeout: 114.10003733634949
##### Instance 141 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2428629845380783.
Result: safe in 5.9829 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.91536003e-03,  8.78752232e-01,  1.83181912e-02,  1.31831542e-02,
         -8.85229558e-04,  1.75661892e-02,  3.73095274e-04,  1.14071071e-02,
          1.35440603e-02,  2.23427713e-02]], device='cuda:0')
diversed PGD initialization time: 0.1220
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00191854,  0.20182270,  0.00895463, -0.03127554,  0.02442385,
           0.00496157, -0.04707666,  0.14469692,  0.61252278,  0.04585252],
         [ 0.00191854,  0.20182270,  0.00895463, -0.03127554,  0.02442385,
           0.00496157, -0.04707666,  0.14469692,  0.61252278,  0.04585252]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.19990416,  0.19286807,  0.23309824,  0.17739885,  0.19686112,
           0.24889936,  0.05712578, -0.41070008,  0.15597019]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1359 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2109 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00132072e+00, -1.23345330e-02,  1.08446181e-03, -1.07951760e-02,
         -7.81358033e-03,  7.71539658e-03,  2.40778551e-03, -1.79735273e-02,
          1.37045979e-04, -1.00656301e-02]], device='cuda:0')
diversed PGD initialization time: 0.1256
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.97915548, -0.00683849,  0.04353783, -0.01087785, -0.00962081,
           0.00788146, -0.02204446, -0.01323947,  0.00584617,  0.00102402],
         [ 0.97915548, -0.00683849,  0.04353783, -0.01087785, -0.00962081,
           0.00788146, -0.02204446, -0.01323947,  0.00584617,  0.00102402]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98599398, 0.93561769, 0.99003333, 0.98877627, 0.97127402,
          1.00119996, 0.99239492, 0.97330928, 0.97813147]]], device='cuda:0')
number of violation:  0
Attack finished in 0.8376 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00132072e+00, -1.23345330e-02,  1.08446181e-03, -1.07951760e-02,
         -7.81358033e-03,  7.71539658e-03,  2.40778551e-03, -1.79735273e-02,
          1.37045979e-04, -1.00656301e-02]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 35, 1, 9] with unstable size 34 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [34]; unstable size 34; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 34] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.54424119, 0.26842007, 0.45295700, 0.53220677, 0.36757654, 0.53163815,
         0.51671398, 0.55438089, 0.47931921]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.9760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00533187, 0.01041649, 0.02554235, 0.01849993, 0.75293630, 0.01302960,
         0.01066612, 0.05925892, 0.01266959, 0.08476321]], device='cuda:0')
diversed PGD initialization time: 0.1227
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 6.51549548e-04,  5.15882671e-03,  1.54451728e-02,  7.25385547e-03,
          -1.52534284e-02,  9.64207202e-03,  1.78968534e-03, -2.05744952e-02,
           1.20461136e-02,  9.87634182e-01],
         [ 6.51549548e-04,  5.15882671e-03,  1.54451728e-02,  7.25385547e-03,
          -1.52534284e-02,  9.64207202e-03,  1.78968534e-03, -2.05744952e-02,
           1.20461136e-02,  9.87634182e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.01590498, -0.02041226, -0.03069860, -0.02250728, -0.02489550,
          -0.01704311,  0.00532107, -0.02729954, -1.00288761]]],
       device='cuda:0')
number of violation:  8
Attack finished in 0.1757 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-7.24248588e-04,  9.79779601e-01, -1.75331533e-03, -4.58472967e-03,
         -5.30724227e-03,  2.12550163e-03, -4.70099598e-03,  1.67295337e-03,
          1.21515244e-03,  9.36989486e-03]], device='cuda:0')
diversed PGD initialization time: 0.1262
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00601043,  0.45893240,  0.01158577, -0.02065037, -0.00620962,
           0.00526596, -0.03478701,  0.03402023,  0.49379084,  0.01622175],
         [ 0.00601043,  0.45893240,  0.01158577, -0.02065037, -0.00620962,
           0.00526596, -0.03478701,  0.03402023,  0.49379084,  0.01622175]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.45292196,  0.44734663,  0.47958279,  0.46514201,  0.45366645,
           0.49371940,  0.42491215, -0.03485844,  0.44271064]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2020 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3176 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 6.34443015e-04, -6.71299547e-03,  2.35314667e-03, -3.07337195e-03,
          9.31768715e-01,  2.75740772e-02,  7.18916953e-03, -5.95806539e-03,
          6.61112368e-03,  2.90966183e-02]], device='cuda:0')
diversed PGD initialization time: 0.1251
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01242841, -0.02078743,  0.02156222, -0.01233469,  0.08062558,
          -0.00656307, -0.00644433, -0.01608296,  0.96108884, -0.03698976],
         [-0.01242841, -0.02078743,  0.02156222, -0.01233469,  0.08062558,
          -0.00656307, -0.00644433, -0.01608296,  0.96108884, -0.03698976]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.09305400,  0.10141300,  0.05906336,  0.09296027,  0.08718865,
           0.08706991,  0.09670854, -0.88046324,  0.11761534]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1550 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3033 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00336366,  0.01348262,  0.03745061,  0.00611965, -0.05342617,
          0.01138580,  0.00813634, -0.03801484,  0.00984010,  0.99207401]],
       device='cuda:0')
diversed PGD initialization time: 0.1252
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.04993210, -0.07083149,  0.14649367, -0.09955138, -0.05706898,
          -0.01267194, -0.03723910, -0.04879488,  0.97860610,  0.21698664],
         [-0.04993210, -0.07083149,  0.14649367, -0.09955138, -0.05706898,
          -0.01267194, -0.03723910, -0.04879488,  0.97860610,  0.21698664]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.26691875,  0.28781813,  0.07049297,  0.31653804,  0.27405563,
           0.22965857,  0.25422573,  0.26578152, -0.76161945]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1818 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3001 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.03057765,  0.01378621,  0.03305669, -0.01119560,  0.00653964,
          0.66881120,  0.15407208,  0.01614454,  0.04779630,  0.02944927]],
       device='cuda:0')
diversed PGD initialization time: 0.1254
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.07679932, -0.02770031, -0.03792979, -0.01519582, -0.03086871,
           0.65814126,  0.67060602, -0.05133595, -0.04441456, -0.03732909],
         [-0.07679932, -0.02770031, -0.03792979, -0.01519582, -0.03086871,
           0.65814126,  0.67060602, -0.05133595, -0.04441456, -0.03732909]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.73494059,  0.68584156,  0.69607103,  0.67333710,  0.68900996,
          -0.01246476,  0.70947719,  0.70255584,  0.69547033]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2109 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3054 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.11981481e-03,  6.75953925e-04, -9.94682312e-04,  1.46400928e-03,
          7.98603520e-03,  6.76101446e-03,  1.87686086e-03, -6.36230409e-03,
          4.57437336e-03,  9.95697856e-01]], device='cuda:0')
diversed PGD initialization time: 0.1241
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.03263173, -0.03562133, -0.00400116, -0.08451320,  0.00270548,
           0.04604108,  0.00238714, -0.04193263,  0.45923305,  0.68694460],
         [-0.03263173, -0.03562133, -0.00400116, -0.08451320,  0.00270548,
           0.04604108,  0.00238714, -0.04193263,  0.45923305,  0.68694460]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.71957636, 0.72256595, 0.69094574, 0.77145779, 0.68423915,
          0.64090353, 0.68455744, 0.72887725, 0.22771156]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6729 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-1.11981481e-03,  6.75953925e-04, -9.94682312e-04,  1.46400928e-03,
          7.98603520e-03,  6.76101446e-03,  1.87686086e-03, -6.36230409e-03,
          4.57437336e-03,  9.95697856e-01]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 60, 1, 5] with unstable size 59 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [59]; unstable size 59; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 59] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.14556193, -0.13357662, -0.30508438, -0.40086225, -0.40160245,
         -0.52890962, -0.47105443, -0.30111390, -1.02711535]], device='cuda:0') None
best_l after optimization: 3.2025272846221924
alpha/beta optimization time: 1.9346024990081787
initial alpha-crown bounds: tensor([[ 0.45142385,  0.47412756,  0.44016388,  0.45344010,  0.26980382,
          0.33236301,  0.41543818,  0.43981394, -0.07404713]], device='cuda:0')
Worst class: (+ rhs) -0.07404713332653046
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 117.25302863121033
##### Instance 149 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.45142385363578796.

Properties batch 1, size 1
Remaining timeout: 117.16899681091309
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.47412756085395813.

Properties batch 2, size 1
Remaining timeout: 117.08261609077454
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.44016388058662415.

Properties batch 3, size 1
Remaining timeout: 117.00522136688232
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4534400999546051.

Properties batch 4, size 1
Remaining timeout: 116.91717457771301
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.26980382204055786.

Properties batch 5, size 1
Remaining timeout: 116.83875489234924
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3323630094528198.

Properties batch 6, size 1
Remaining timeout: 116.76347541809082
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.415438175201416.

Properties batch 7, size 1
Remaining timeout: 116.68473482131958
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4398139417171478.

Properties batch 8, size 1
Remaining timeout: 116.6024911403656
##### Instance 149 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07404713]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.11981481e-03,  6.75953925e-04, -9.94682312e-04,  1.46400928e-03,
         7.98603520e-03,  6.76101446e-03,  1.87686086e-03, -6.36230409e-03,
         4.57437336e-03,  9.95697856e-01], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07404713]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 5
Node /17 input 0: size torch.Size([256]) unstable 42
-----------------
# of unstable neurons: 47
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 162] 
split level 1: [/input.3, 150] 
split level 2: [/input.3, 38] 
split level 3: [/input.3, 30] 
split level 4: [/input.3, 238] 
split level 5: [/input.3, 57] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.02137136459350586
Time: prepare 0.0622    bound 0.2402    transfer 0.0004    finalize 0.0020    func 0.3048    
Accumulated time: func 0.3048    prepare 0.0628    bound 0.2402    transfer 0.0004    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.02329 (6), 
length of domains: 1
Time: pickout 0.0005    decision 0.0654    set_bounds 0.0117    solve 0.3049    add 0.0006    
Accumulated time: pickout 0.0005    decision 0.0654    set_bounds 0.0117    solve 0.3049    add 0.0006    
Current (lb-rhs): -0.023290932178497314
1 domains visited
Cumulative time: 0.40430307388305664

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 245] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 187] 
split level 3: [/input.3, 18] 
split level 4: [/input.3, 87] 
split level 5: [/input.3, 123] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.295608520507812e-05
Time: prepare 0.0361    bound 0.0052    transfer 0.0001    finalize 0.0024    func 0.0440    
Accumulated time: func 0.3488    prepare 0.0994    bound 0.2454    transfer 0.0005    finalize 0.0044    
length of domains: 0
Time: pickout 0.0005    decision 0.0986    set_bounds 0.0254    solve 0.0440    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.1640    set_bounds 0.0372    solve 0.3489    add 0.0007    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.5733163356781006

Result: safe in 4.0923 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00377822, -0.01125370,  0.00155225, -0.00614917, -0.00921946,
         -0.01019306, -0.00733163, -0.01362203,  0.00117666, -0.00788118]],
       device='cuda:0')
diversed PGD initialization time: 0.1281
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 9.94927526e-01, -1.07115582e-02,  7.72628188e-03, -1.96253508e-03,
          -1.01773925e-02, -1.43081993e-02, -6.48073107e-03, -1.19497031e-02,
           9.40993428e-04, -6.49914145e-03],
         [ 9.94927526e-01, -1.07115582e-02,  7.72628188e-03, -1.96253508e-03,
          -1.01773925e-02, -1.43081993e-02, -6.48073107e-03, -1.19497031e-02,
           9.40993428e-04, -6.49914145e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00563908, 0.98720121, 0.99689007, 1.00510490, 1.00923574,
          1.00140822, 1.00687718, 0.99398655, 1.00142670]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6654 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00377822, -0.01125370,  0.00155225, -0.00614917, -0.00921946,
         -0.01019306, -0.00733163, -0.01362203,  0.00117666, -0.00788118]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 3, 1, 7] with unstable size 2 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [2]; unstable size 2; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.98459840, 0.96458888, 0.97595745, 0.98377597, 0.99365973, 0.98281872,
         0.98516768, 0.97732115, 0.98317629]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8555 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.97465345e-03, -4.06928360e-04,  5.62204421e-03,  8.39564949e-03,
         -2.99824402e-03, -2.82108784e-03,  1.00428462e+00, -2.58898735e-03,
          3.16088647e-03,  5.37355989e-03]], device='cuda:0')
diversed PGD initialization time: 0.1239
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.24750844,  0.01522721,  0.01850040,  0.02240570,  0.00276212,
          -0.01009271,  0.65007156,  0.01874290,  0.01005353,  0.02200769],
         [ 0.24750844,  0.01522721,  0.01850040,  0.02240570,  0.00276212,
          -0.01009271,  0.65007156,  0.01874290,  0.01005353,  0.02200769]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.40256312, 0.63484436, 0.63157117, 0.62766588, 0.64730942,
          0.66016430, 0.63132864, 0.64001805, 0.62806386]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7019 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.97465345e-03, -4.06928360e-04,  5.62204421e-03,  8.39564949e-03,
         -2.99824402e-03, -2.82108784e-03,  1.00428462e+00, -2.58898735e-03,
          3.16088647e-03,  5.37355989e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 29, 1, 6] with unstable size 28 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [28]; unstable size 28; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.31914359,  0.17156178,  0.10653843,  0.15713315,  0.18602702,
          0.12591241, -0.01761560,  0.04144920,  0.08752389]], device='cuda:0') None

all verified at 6th iter
best_l after optimization: 2.664153575897217
alpha/beta optimization time: 0.14837026596069336
initial alpha-crown bounds: tensor([[0.03372735, 0.37326753, 0.32775033, 0.34341007, 0.38061303, 0.34239715,
         0.29581755, 0.23805675, 0.32911396]], device='cuda:0')
Worst class: (+ rhs) 0.03372734785079956
verified with init bound!
Result: safe-incomplete in 0.9701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00135186,  0.00306597,  0.00364554,  0.00247484, -0.00289121,
          0.00931103,  0.00172731, -0.00468884,  0.00544086,  0.98883998]],
       device='cuda:0')
diversed PGD initialization time: 0.1281
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00486469, -0.03047712,  0.02390474, -0.04948588, -0.01953874,
          -0.00643829, -0.01946929, -0.03164683,  0.88708919,  0.20495252],
         [-0.00486469, -0.03047712,  0.02390474, -0.04948588, -0.01953874,
          -0.00643829, -0.01946929, -0.03164683,  0.88708919,  0.20495252]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.20981720,  0.23542964,  0.18104778,  0.25443840,  0.22449127,
           0.21139082,  0.22442181,  0.23659936, -0.68213665]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2066 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2803 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99970281, -0.00764357,  0.01318601,  0.00496771, -0.00620031,
         -0.01881243, -0.00785441, -0.01027733, -0.00549722, -0.00709477]],
       device='cuda:0')
diversed PGD initialization time: 0.1262
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 8.30746412e-01,  9.73058492e-03, -1.13011450e-02, -3.08935493e-02,
          -3.34202163e-02,  3.23053598e-01,  7.61553645e-04,  3.95914242e-02,
           1.06785521e-02, -2.67294645e-02],
         [ 8.30746412e-01,  9.73058492e-03, -1.13011450e-02, -3.08935493e-02,
          -3.34202163e-02,  3.23053598e-01,  7.61553645e-04,  3.95914242e-02,
           1.06785521e-02, -2.67294645e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.82101583, 0.84204757, 0.86163998, 0.86416662, 0.50769281,
          0.82998484, 0.79115498, 0.82006788, 0.85747588]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7347 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99970281, -0.00764357,  0.01318601,  0.00496771, -0.00620031,
         -0.01881243, -0.00785441, -0.01027733, -0.00549722, -0.00709477]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 43, 1, 12] with unstable size 42 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [42]; unstable size 42; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 42] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.11023007, -0.13634828, -0.11841519, -0.01105613, -0.73235261,
         -0.01105139, -0.28291592, -0.58741677,  0.02338754]], device='cuda:0') None

all verified at 10th iter
best_l after optimization: 3.1975178718566895
alpha/beta optimization time: 0.23822689056396484
initial alpha-crown bounds: tensor([[0.47564816, 0.42386720, 0.36818433, 0.44770074, 0.00682239, 0.43506753,
         0.23336853, 0.37095812, 0.43590072]], device='cuda:0')
Worst class: (+ rhs) 0.0068223923444747925
verified with init bound!
Result: safe-incomplete in 1.0987 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 7.52814114e-04,  9.63326275e-01,  3.76763940e-03, -1.01801753e-03,
         -3.65294889e-03,  9.18507576e-05,  2.23080814e-03,  5.57790697e-03,
         -3.89662385e-03, -4.36551869e-04]], device='cuda:0')
diversed PGD initialization time: 0.1247
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00579678,  0.95512086, -0.01271115, -0.01603897,  0.08256510,
          -0.01750094, -0.01027372, -0.01653233,  0.01102173,  0.01250593],
         [-0.00579678,  0.95512086, -0.01271115, -0.01603897,  0.08256510,
          -0.01750094, -0.01027372, -0.01653233,  0.01102173,  0.01250593]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.96091765, 0.96783203, 0.97115982, 0.87255573, 0.97262180,
          0.96539462, 0.97165322, 0.94409913, 0.94261491]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6449 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 7.52814114e-04,  9.63326275e-01,  3.76763940e-03, -1.01801753e-03,
         -3.65294889e-03,  9.18507576e-05,  2.23080814e-03,  5.57790697e-03,
         -3.89662385e-03, -4.36551869e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 50, 1, 27] with unstable size 49 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [49]; unstable size 49; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 49] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.53696871,  0.47082549, -0.08457211,  0.20145136,  0.30472335,
          0.48944086,  0.42275161,  0.37222725, -0.02485368]], device='cuda:0') None

all verified at 5th iter
best_l after optimization: 3.877885341644287
alpha/beta optimization time: 0.0942392349243164
initial alpha-crown bounds: tensor([[0.60648215, 0.57622147, 0.00286165, 0.38691294, 0.41094676, 0.57366455,
         0.52850580, 0.56388795, 0.22840226]], device='cuda:0')
Worst class: (+ rhs) 0.0028616487979888916
verified with init bound!
Result: safe-incomplete in 0.8966 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-6.21792674e-03, -1.37028173e-02, -8.36491585e-04, -9.53266025e-03,
         -3.16500254e-02,  1.02656054e+00, -3.36495787e-03, -3.33660394e-02,
         -9.04240459e-03,  4.02405858e-04]], device='cuda:0')
diversed PGD initialization time: 0.1262
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.93990526e-03, -1.21722966e-02,  6.24634326e-03, -9.00775194e-04,
          -3.59308310e-02,  1.00209653e+00, -8.64942372e-03, -3.35955024e-02,
          -6.36626780e-03,  3.94280255e-03],
         [-9.93990526e-03, -1.21722966e-02,  6.24634326e-03, -9.00775194e-04,
          -3.59308310e-02,  1.00209653e+00, -8.64942372e-03, -3.35955024e-02,
          -6.36626780e-03,  3.94280255e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.01203644, 1.01426888, 0.99585021, 1.00299728, 1.03802741,
          1.01074600, 1.03569198, 1.00846279, 0.99815375]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6653 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-6.21792674e-03, -1.37028173e-02, -8.36491585e-04, -9.53266025e-03,
         -3.16500254e-02,  1.02656054e+00, -3.36495787e-03, -3.33660394e-02,
         -9.04240459e-03,  4.02405858e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 22, 1, 16] with unstable size 21 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [21]; unstable size 21; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.31693602,  0.19309524,  0.18793158, -0.05102676,  0.29642305,
          0.28671521,  0.29595432, -0.44364250,  0.24740529]], device='cuda:0') None

all verified at 3th iter
best_l after optimization: 4.321340084075928
alpha/beta optimization time: 0.06580233573913574
initial alpha-crown bounds: tensor([[0.55168200, 0.49669921, 0.50834626, 0.33574423, 0.56266558, 0.64094269,
         0.56677198, 0.12970889, 0.52877939]], device='cuda:0')
Worst class: (+ rhs) 0.1297088861465454
verified with init bound!
Result: safe-incomplete in 0.8854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
          0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447]],
       device='cuda:0')
diversed PGD initialization time: 0.1274
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00566410, 0.01074353, 0.02150378, 0.02122717, 0.34204182,
          0.00729781, 0.01139447, 0.01234806, 0.00732402, 0.56617790],
         [0.00566410, 0.01074353, 0.02150378, 0.02122717, 0.34204182,
          0.00729781, 0.01139447, 0.01234806, 0.00732402, 0.56617790]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.56051379, 0.55543435, 0.54467416, 0.54495072, 0.22413608,
          0.55888009, 0.55478346, 0.55382985, 0.55885386]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6729 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
          0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 39, 1, 10] with unstable size 38 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [38]; unstable size 38; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 38] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.06157529, -0.05414271, -0.16353527, -0.18312982, -0.62133229,
         -0.11384341, -0.05446157, -0.25186747, -0.35099980]], device='cuda:0') None
best_l after optimization: -0.9087842702865601
alpha/beta optimization time: 1.3428871631622314
initial alpha-crown bounds: tensor([[ 0.02110161,  0.02196575, -0.10236447, -0.01777944, -0.54541934,
         -0.00378393,  0.02330729, -0.11945929, -0.18635246]], device='cuda:0')
Worst class: (+ rhs) -0.5454193353652954
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 117.79588198661804
##### Instance 156 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.021101612597703934.

Properties batch 1, size 1
Remaining timeout: 117.71687769889832
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.021965747699141502.

Properties batch 2, size 1
Remaining timeout: 117.6346206665039
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.10236447]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
         0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.10236447]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 34
-----------------
# of unstable neurons: 44
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input, 15] 
split level 4: [/input.3, 18] 
split level 5: [/input.3, 102] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0021927356719970703
Time: prepare 0.0986    bound 0.0207    transfer 0.0023    finalize 0.0050    func 0.1268    
Accumulated time: func 0.1268    prepare 0.0992    bound 0.0207    transfer 0.0023    finalize 0.0050    
length of domains: 0
Time: pickout 0.0005    decision 0.0966    set_bounds 0.0125    solve 0.1269    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0966    set_bounds 0.0125    solve 0.1269    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.25230836868286133


Properties batch 3, size 1
Remaining timeout: 117.27860736846924
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01777944]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
         0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01777944]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 34
-----------------
# of unstable neurons: 44
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input, 15] 
split level 4: [/input.3, 18] 
split level 5: [/input.3, 238] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00010657310485839844
Time: prepare 0.1309    bound 0.0058    transfer 0.0002    finalize 0.0025    func 0.1395    
Accumulated time: func 0.1395    prepare 0.1314    bound 0.0058    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0318    set_bounds 0.0123    solve 0.1395    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0318    set_bounds 0.0123    solve 0.1395    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.2006380558013916


Properties batch 4, size 1
Remaining timeout: 116.9426109790802
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.54541934]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
         0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.54541934]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 34
-----------------
# of unstable neurons: 44
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 18] 
split level 3: [/input.3, 123] 
split level 4: [/input, 15] 
split level 5: [/input, 178] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.028336524963378906
Time: prepare 0.0970    bound 0.2834    transfer 0.0004    finalize 0.0026    func 0.3837    
Accumulated time: func 0.3837    prepare 0.0975    bound 0.2834    transfer 0.0004    finalize 0.0026    
Current worst splitting domains lb-rhs (depth):
-0.10273 (6), 
length of domains: 1
Time: pickout 0.0004    decision 0.0323    set_bounds 0.0391    solve 0.3837    add 0.0008    
Accumulated time: pickout 0.0004    decision 0.0323    set_bounds 0.0391    solve 0.3837    add 0.0008    
Current (lb-rhs): -0.10273031890392303
1 domains visited
Cumulative time: 0.46205830574035645

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 76] 
split level 1: [/input, 2] 
split level 2: [/input, 198] 
split level 3: [/input.3, 162] 
split level 4: [/input.3, 57] 
split level 5: [/input.3, 87] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012040138244628906
Time: prepare 0.1179    bound 0.0059    transfer 0.0002    finalize 0.0027    func 0.1266    
Accumulated time: func 0.5103    prepare 0.2159    bound 0.2892    transfer 0.0006    finalize 0.0053    
length of domains: 0
Time: pickout 0.0005    decision 0.0311    set_bounds 0.0132    solve 0.1267    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.0634    set_bounds 0.0522    solve 0.5104    add 0.0009    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.634009599685669


Properties batch 5, size 1
Remaining timeout: 116.19034051895142
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00378393]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
         0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00378393]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 34
-----------------
# of unstable neurons: 44
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input.3, 18] 
split level 4: [/input, 15] 
split level 5: [/input.3, 238] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012493133544921875
Time: prepare 0.1047    bound 0.0059    transfer 0.0002    finalize 0.0025    func 0.1134    
Accumulated time: func 0.1134    prepare 0.1052    bound 0.0059    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0278    set_bounds 0.0217    solve 0.1135    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0278    set_bounds 0.0217    solve 0.1135    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1692063808441162


Properties batch 6, size 1
Remaining timeout: 115.88681721687317
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.02330729365348816.

Properties batch 7, size 1
Remaining timeout: 115.8023316860199
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11945929]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
         0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11945929]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 34
-----------------
# of unstable neurons: 44
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 57] 
split level 2: [/input.3, 149] 
split level 3: [/input.3, 123] 
split level 4: [/input.3, 133] 
split level 5: [/input, 2] 

all verified at 4th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0016388893127441406
Time: prepare 0.1310    bound 0.0352    transfer 0.0002    finalize 0.0025    func 0.1689    
Accumulated time: func 0.1689    prepare 0.1316    bound 0.0352    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0005    decision 0.0613    set_bounds 0.0124    solve 0.1690    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0613    set_bounds 0.0124    solve 0.1690    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.26366376876831055


Properties batch 8, size 1
Remaining timeout: 115.4153687953949
##### Instance 156 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18635246]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00149018,  0.00533305,  0.00636669,  0.00722288, -0.00768680,
         0.00872641,  0.00227084, -0.00250010,  0.00745000,  0.97529447],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18635246]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 34
-----------------
# of unstable neurons: 44
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 57] 
split level 4: [/input.3, 150] 
split level 5: [/input.3, 18] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00014781951904296875
Time: prepare 0.0632    bound 0.0057    transfer 0.0002    finalize 0.0020    func 0.0711    
Accumulated time: func 0.0711    prepare 0.0637    bound 0.0057    transfer 0.0002    finalize 0.0020    
length of domains: 0
Time: pickout 0.0005    decision 0.0432    set_bounds 0.0373    solve 0.0712    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0432    set_bounds 0.0373    solve 0.0712    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.15744233131408691

Result: safe in 4.8590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.79801169e-03, -9.33647156e-04,  5.46857715e-04,  6.75639510e-03,
          9.19572264e-03,  1.10458732e-02,  3.17537785e-03,  9.21024621e-01,
          9.71233845e-03,  1.05466023e-02]], device='cuda:0')
diversed PGD initialization time: 0.1274
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01431714, -0.05829406,  0.03093642, -0.06979749, -0.00896124,
           0.04328583,  0.02721695,  0.21754050,  0.75623906,  0.03427079],
         [-0.01431714, -0.05829406,  0.03093642, -0.06979749, -0.00896124,
           0.04328583,  0.02721695,  0.21754050,  0.75623906,  0.03427079]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.23185764,  0.27583456,  0.18660408,  0.28733799,  0.22650175,
           0.17425467,  0.19032355, -0.53869855,  0.18326971]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1859 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2902 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.12366602e-02, -2.68889815e-02,  1.99628323e-02,  5.65846682e-01,
         -2.35049166e-02,  4.71204892e-02, -3.93234193e-04, -7.30230361e-02,
          9.86059010e-03,  4.79169607e-01]], device='cuda:0')
diversed PGD initialization time: 0.1275
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.94628383e-02, -4.01608348e-02, -2.24137008e-02,  2.99433768e-01,
           6.79534301e-03,  1.04422048e-02, -1.39690191e-02, -1.52520090e-02,
          -4.15951014e-04,  7.39045441e-01],
         [-3.94628383e-02, -4.01608348e-02, -2.24137008e-02,  2.99433768e-01,
           6.79534301e-03,  1.04422048e-02, -1.39690191e-02, -1.52520090e-02,
          -4.15951014e-04,  7.39045441e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.33889660,  0.33959460,  0.32184747,  0.29263842,  0.28899157,
           0.31340277,  0.31468576,  0.29984972, -0.43961167]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2018 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3075 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.03115033.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.007787585258483887, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-2.85020098e-03, -3.83583456e-03,  1.78276002e-03, -8.53762031e-04,
          9.89127517e-01, -1.75569952e-03,  1.59144402e-03, -2.35281885e-03,
          3.08156013e-05,  4.24727798e-04]], device='cuda:0')
diversed PGD initialization time: 0.1253
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02472818, -0.04313509, -0.02941605, -0.08597560,  0.14361836,
           0.01621217, -0.01538906, -0.06207003,  0.66819310,  0.41197956],
         [-0.02472818, -0.04313509, -0.02941605, -0.08597560,  0.14361836,
           0.01621217, -0.01538906, -0.06207003,  0.66819310,  0.41197956]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.16834654,  0.18675345,  0.17303441,  0.22959396,  0.12740619,
           0.15900743,  0.20568839, -0.52457476, -0.26836121]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.1995 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2900 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.02787122, 0.01238939, 0.29962021, 0.06912491, 0.01899033, 0.04769164,
         0.02595197, 0.39278805, 0.03806253, 0.03001010]], device='cuda:0')
diversed PGD initialization time: 0.1269
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.05209551,  0.06668638,  0.31424296,  0.05276850,  0.00558868,
           0.03730648, -0.01558831,  0.09453087,  0.49001217, -0.02871911],
         [-0.05209551,  0.06668638,  0.31424296,  0.05276850,  0.00558868,
           0.03730648, -0.01558831,  0.09453087,  0.49001217, -0.02871911]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.14662637,  0.02784448, -0.21971209,  0.04176237,  0.08894219,
           0.05722439,  0.11011917, -0.39548129,  0.12324998]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.2065 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3306 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.79301131e-03, -2.74950340e-02,  1.01750529e+00,  1.71572343e-02,
          5.36743551e-04, -1.60925537e-02, -1.06011555e-02, -1.98160708e-02,
         -1.59916282e-03, -9.99947637e-03]], device='cuda:0')
diversed PGD initialization time: 0.1255
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.19688833e-05, -7.06552863e-02,  4.28771079e-01,  2.74574876e-01,
          -1.14008375e-02, -1.28849059e-01, -5.08195311e-02, -7.23953992e-02,
           6.12305760e-01, -1.86620802e-02],
         [-7.19688833e-05, -7.06552863e-02,  4.28771079e-01,  2.74574876e-01,
          -1.14008375e-02, -1.28849059e-01, -5.08195311e-02, -7.23953992e-02,
           6.12305760e-01, -1.86620802e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.42884305,  0.49942636,  0.15419620,  0.44017193,  0.55762017,
           0.47959059,  0.50116646, -0.18353468,  0.44743317]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1950 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3178 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00502811, 0.81345737, 0.03293519, 0.01964550, 0.00185107, 0.02497981,
         0.00452331, 0.01648079, 0.02789728, 0.02839293]], device='cuda:0')
diversed PGD initialization time: 0.1240
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02465333,  0.16359791, -0.04083325, -0.03439155, -0.01108372,
          -0.06288662, -0.06363910, -0.01762474,  1.08316028, -0.02350982],
         [-0.02465333,  0.16359791, -0.04083325, -0.03439155, -0.01108372,
          -0.06288662, -0.06363910, -0.01762474,  1.08316028, -0.02350982]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.18825124,  0.20443116,  0.19798946,  0.17468163,  0.22648454,
           0.22723702,  0.18122265, -0.91956234,  0.18710773]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2025 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2918 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00113392e+00, -1.19430274e-02,  1.96649134e-03, -1.01789832e-02,
         -7.11461529e-03,  7.66058266e-03,  2.40963697e-03, -1.78569555e-02,
          3.72715294e-04, -9.94696468e-03]], device='cuda:0')
diversed PGD initialization time: 0.1265
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.86950809, -0.00611795,  0.04109448, -0.01868214,  0.00765023,
           0.01209982, -0.00980868, -0.02763337,  0.00281598,  0.09712668],
         [ 0.86950809, -0.00611795,  0.04109448, -0.01868214,  0.00765023,
           0.01209982, -0.00980868, -0.02763337,  0.00281598,  0.09712668]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.87562603, 0.82841361, 0.88819021, 0.86185783, 0.85740829,
          0.87931675, 0.89714146, 0.86669213, 0.77238142]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6478 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00113392e+00, -1.19430274e-02,  1.96649134e-03, -1.01789832e-02,
         -7.11461529e-03,  7.66058266e-03,  2.40963697e-03, -1.78569555e-02,
          3.72715294e-04, -9.94696468e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 46, 1, 10] with unstable size 45 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [45]; unstable size 45; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 45] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.23484471, -0.15160838,  0.01080538,  0.17168522, -0.08063465,
          0.18325084,  0.13222131,  0.16426189, -0.02457994]], device='cuda:0') None
best_l after optimization: 1.926247477531433
alpha/beta optimization time: 1.843191385269165
initial alpha-crown bounds: tensor([[ 0.32809007, -0.03158170,  0.17502344,  0.26798660,  0.13166004,
          0.27960682,  0.30015489,  0.34322733,  0.13207996]], device='cuda:0')
Worst class: (+ rhs) -0.03158169984817505
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 117.38852572441101
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3280900716781616.

Properties batch 1, size 1
Remaining timeout: 117.3087968826294
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03158170]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00113392e+00, -1.19430274e-02,  1.96649134e-03, -1.01789832e-02,
        -7.11461529e-03,  7.66058266e-03,  2.40963697e-03, -1.78569555e-02,
         3.72715294e-04, -9.94696468e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03158170]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 10
Node /17 input 0: size torch.Size([256]) unstable 38
-----------------
# of unstable neurons: 48
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 102] 
split level 2: [/input, 158] 
split level 3: [/input.3, 31] 
split level 4: [/input, 149] 
split level 5: [/input.3, 132] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00010800361633300781
Time: prepare 0.1312    bound 0.0055    transfer 0.0002    finalize 0.0025    func 0.1396    
Accumulated time: func 0.1396    prepare 0.1318    bound 0.0055    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0310    set_bounds 0.0123    solve 0.1396    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0310    set_bounds 0.0123    solve 0.1396    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.18914175033569336


Properties batch 2, size 1
Remaining timeout: 116.99539947509766
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.17502343654632568.

Properties batch 3, size 1
Remaining timeout: 116.91812944412231
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.26798659563064575.

Properties batch 4, size 1
Remaining timeout: 116.84045362472534
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13166004419326782.

Properties batch 5, size 1
Remaining timeout: 116.75897097587585
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.27960681915283203.

Properties batch 6, size 1
Remaining timeout: 116.67983770370483
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3001548945903778.

Properties batch 7, size 1
Remaining timeout: 116.60004472732544
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3432273268699646.

Properties batch 8, size 1
Remaining timeout: 116.51861453056335
##### Instance 163 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13207995891571045.
Result: safe in 3.5653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00677398, 0.01243807, 0.02941582, 0.02390700, 0.70314020, 0.01610616,
         0.01233739, 0.06326696, 0.01481973, 0.11423206]], device='cuda:0')
diversed PGD initialization time: 0.1241
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00563558, -0.02938028,  0.00193405, -0.07125835, -0.00980491,
           0.02117066, -0.01961893, -0.04991047,  0.38150951,  0.77582514],
         [-0.00563558, -0.02938028,  0.00193405, -0.07125835, -0.00980491,
           0.02117066, -0.01961893, -0.04991047,  0.38150951,  0.77582514]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.00416933,  0.01957538, -0.01173896,  0.06145344, -0.03097557,
           0.00981402,  0.04010556, -0.39131442, -0.78563005]]],
       device='cuda:0')
number of violation:  5
Attack finished in 0.2026 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2927 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-6.38265163e-04,  9.75308537e-01, -8.30516219e-04, -5.49073517e-03,
         -5.88281080e-03,  3.34195048e-03, -4.91730869e-03,  8.52033496e-04,
          3.06926668e-03,  1.28393173e-02]], device='cuda:0')
diversed PGD initialization time: 0.1240
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.01733389,  0.33508369,  0.00155781,  0.01259929,  0.06073068,
           0.01288605, -0.01173173,  0.38197556,  0.13595995,  0.00587316],
         [ 0.01733389,  0.33508369,  0.00155781,  0.01259929,  0.06073068,
           0.01288605, -0.01173173,  0.38197556,  0.13595995,  0.00587316]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.31774980,  0.33352590,  0.32248440,  0.27435300,  0.32219765,
           0.34681541, -0.04689187,  0.19912374,  0.32921052]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2025 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3104 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00315069, -0.00641835,  0.00386421, -0.00473128,  0.86984366,
          0.04313879,  0.01158880,  0.00627421,  0.01034936,  0.05407844]],
       device='cuda:0')
diversed PGD initialization time: 0.1269
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02075746, -0.01396686,  0.02533837, -0.01291306, -0.00613053,
          -0.00223003,  0.00326606, -0.00645067,  0.99469793, -0.00533550],
         [-0.02075746, -0.01396686,  0.02533837, -0.01291306, -0.00613053,
          -0.00223003,  0.00326606, -0.00645067,  0.99469793, -0.00533550]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.46269277e-02,  7.83633068e-03, -3.14688943e-02,  6.78253546e-03,
          -3.90050188e-03, -9.39658657e-03,  3.20140272e-04, -1.00082850e+00,
          -7.95025378e-04]]], device='cuda:0')
number of violation:  5
Attack finished in 0.2018 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3395 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00294126,  0.01191846,  0.03655827,  0.00620893, -0.04780352,
          0.01221026,  0.00789164, -0.03792372,  0.01005585,  0.99002004]],
       device='cuda:0')
diversed PGD initialization time: 0.1247
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.04302012, -0.08684546,  0.30010599, -0.10728557, -0.09724373,
          -0.00294744, -0.05741414, -0.07605612,  0.76789504,  0.37258315],
         [-0.04302012, -0.08684546,  0.30010599, -0.10728557, -0.09724373,
          -0.00294744, -0.05741414, -0.07605612,  0.76789504,  0.37258315]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.41560328,  0.45942861,  0.07247716,  0.47986871,  0.46982688,
           0.37553060,  0.42999730,  0.44863927, -0.39531189]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2037 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2970 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.01735617,  0.01037874,  0.02806623, -0.01307334,  0.00299464,
          0.66110313,  0.20720015,  0.01045151,  0.04154430,  0.02453930]],
       device='cuda:0')
diversed PGD initialization time: 0.1256
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.01866072, 0.00402769, 0.01517577, 0.00551444, 0.00212303,
          0.06113385, 0.86072171, 0.00415379, 0.02851762, 0.01767659],
         [0.01866072, 0.00402769, 0.01517577, 0.00551444, 0.00212303,
          0.06113385, 0.86072171, 0.00415379, 0.02851762, 0.01767659]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.04247313,  0.05710615,  0.04595807,  0.05561941,  0.05901082,
          -0.79958785,  0.05698006,  0.03261623,  0.04345725]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1357 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2095 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.61869451e-03,  4.31388617e-06, -1.58588588e-03,  3.46302986e-04,
          7.38630816e-03,  6.91357255e-03,  1.51349977e-03, -3.80142033e-03,
          4.39750403e-03,  9.97337461e-01]], device='cuda:0')
diversed PGD initialization time: 0.1253
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.03924776, -0.07848275, -0.02696575, -0.08517581, -0.00307177,
           0.02410628,  0.03396241, -0.03859381,  0.77633846,  0.42756349],
         [-0.03924776, -0.07848275, -0.02696575, -0.08517581, -0.00307177,
           0.02410628,  0.03396241, -0.03859381,  0.77633846,  0.42756349]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.46681124,  0.50604624,  0.45452923,  0.51273930,  0.43063527,
           0.40345722,  0.39360109,  0.46615732, -0.34877497]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1793 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3249 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00364614, -0.01060076,  0.00168119, -0.00614518, -0.00825882,
         -0.00942804, -0.00699832, -0.01307984,  0.00121392, -0.00754330]],
       device='cuda:0')
diversed PGD initialization time: 0.1194
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 9.86773610e-01,  1.88002735e-03,  1.55123919e-02,  6.57192618e-03,
           3.24127078e-03, -2.05930322e-02, -1.97809413e-02,  4.64215875e-04,
           2.10169703e-03,  2.03892589e-04],
         [ 9.86773610e-01,  1.88002735e-03,  1.55123919e-02,  6.57192618e-03,
           3.24127078e-03, -2.05930322e-02, -1.97809413e-02,  4.64215875e-04,
           2.10169703e-03,  2.03892589e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.98489356, 0.97126120, 0.98020166, 0.98353231, 1.00736666,
          1.00655460, 0.98630941, 0.98467189, 0.98656970]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6623 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00364614, -0.01060076,  0.00168119, -0.00614518, -0.00825882,
         -0.00942804, -0.00699832, -0.01307984,  0.00121392, -0.00754330]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 5, 1, 8] with unstable size 4 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [4]; unstable size 4; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.87806833, 0.85241854, 0.86945260, 0.88316470, 0.87942904, 0.90325981,
         0.87102592, 0.88050580, 0.87976480]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8042 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.27180123e-03, -4.61645424e-04,  5.54066896e-03,  7.60195404e-03,
         -2.99085304e-03, -7.26230443e-04,  1.00247669e+00, -2.53222883e-03,
          2.89249420e-03,  5.23441285e-03]], device='cuda:0')
diversed PGD initialization time: 0.1257
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.35621226,  0.02029393,  0.03061759,  0.02306542, -0.00280670,
          -0.00912600,  0.50152546,  0.01683981,  0.01323655,  0.03420417],
         [ 0.35621226,  0.02029393,  0.03061759,  0.02306542, -0.00280670,
          -0.00912600,  0.50152546,  0.01683981,  0.01323655,  0.03420417]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.14531320, 0.48123154, 0.47090787, 0.47846004, 0.50433218,
          0.51065147, 0.48468566, 0.48828891, 0.46732128]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7515 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 2.27180123e-03, -4.61645424e-04,  5.54066896e-03,  7.60195404e-03,
         -2.99085304e-03, -7.26230443e-04,  1.00247669e+00, -2.53222883e-03,
          2.89249420e-03,  5.23441285e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 35, 1, 6] with unstable size 34 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [34]; unstable size 34; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 34] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.88062179, -0.16799313, -0.27966842, -0.21825773, -0.22127175,
         -0.23138437, -0.79049766, -0.50984436, -0.36141297]], device='cuda:0') None
best_l after optimization: 1.0568363666534424
alpha/beta optimization time: 2.4852864742279053
initial alpha-crown bounds: tensor([[-0.19356629,  0.22767103,  0.17110389,  0.19019656,  0.22955960,
          0.20004095,  0.17353319, -0.11639804,  0.17469545]], device='cuda:0')
Worst class: (+ rhs) -0.19356629252433777
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.60243606567383
##### Instance 171 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19356629]], device='cuda:0') need to verify.
Model prediction is: tensor([ 2.27180123e-03, -4.61645424e-04,  5.54066896e-03,  7.60195404e-03,
        -2.99085304e-03, -7.26230443e-04,  1.00247669e+00, -2.53222883e-03,
         2.89249420e-03,  5.23441285e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19356629]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 6
Node /17 input 0: size torch.Size([256]) unstable 29
-----------------
# of unstable neurons: 35
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 122] 
split level 1: [/input.3, 85] 
split level 2: [/input.3, 151] 
split level 3: [/input.3, 48] 
split level 4: [/input.3, 116] 
split level 5: [/input.3, 144] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.024616241455078125
Time: prepare 0.1117    bound 0.2853    transfer 0.0068    finalize 0.0064    func 0.4103    
Accumulated time: func 0.4103    prepare 0.1122    bound 0.2853    transfer 0.0068    finalize 0.0064    
Current worst splitting domains lb-rhs (depth):
-0.02286 (6), 
length of domains: 1
Time: pickout 0.0005    decision 0.0308    set_bounds 0.0117    solve 0.4103    add 0.0049    
Accumulated time: pickout 0.0005    decision 0.0308    set_bounds 0.0117    solve 0.4103    add 0.0049    
Current (lb-rhs): -0.02286285161972046
1 domains visited
Cumulative time: 0.4638988971710205

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 66] 
split level 1: [/input, 233] 
split level 2: [/input.3, 30] 
split level 3: [/input.3, 175] 
split level 4: [/input.3, 150] 
split level 5: [/input.3, 232] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00019741058349609375
Time: prepare 0.0072    bound 0.0073    transfer 0.0002    finalize 0.0053    func 0.0200    
Accumulated time: func 0.4303    prepare 0.1199    bound 0.2926    transfer 0.0070    finalize 0.0116    
length of domains: 0
Time: pickout 0.0005    decision 0.0494    set_bounds 0.0129    solve 0.0201    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.0802    set_bounds 0.0246    solve 0.4304    add 0.0050    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.5472381114959717


Properties batch 1, size 1
Remaining timeout: 115.92906761169434
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22767102718353271.

Properties batch 2, size 1
Remaining timeout: 115.85036873817444
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.17110389471054077.

Properties batch 3, size 1
Remaining timeout: 115.76331400871277
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.19019655883312225.

Properties batch 4, size 1
Remaining timeout: 115.68463850021362
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22955960035324097.

Properties batch 5, size 1
Remaining timeout: 115.60743355751038
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.20004095137119293.

Properties batch 6, size 1
Remaining timeout: 115.5309910774231
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.17353318631649017.

Properties batch 7, size 1
Remaining timeout: 115.44908571243286
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11639804]], device='cuda:0') need to verify.
Model prediction is: tensor([ 2.27180123e-03, -4.61645424e-04,  5.54066896e-03,  7.60195404e-03,
        -2.99085304e-03, -7.26230443e-04,  1.00247669e+00, -2.53222883e-03,
         2.89249420e-03,  5.23441285e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11639804]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 6
Node /17 input 0: size torch.Size([256]) unstable 29
-----------------
# of unstable neurons: 35
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 122] 
split level 1: [/input.3, 150] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 30] 
split level 4: [/input.3, 48] 
split level 5: [/input.3, 85] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00013017654418945312
Time: prepare 0.0185    bound 0.0054    transfer 0.0002    finalize 0.0019    func 0.0260    
Accumulated time: func 0.0260    prepare 0.0191    bound 0.0054    transfer 0.0002    finalize 0.0019    
length of domains: 0
Time: pickout 0.0005    decision 0.1055    set_bounds 0.0120    solve 0.0260    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.1055    set_bounds 0.0120    solve 0.0260    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.14864420890808105


Properties batch 8, size 1
Remaining timeout: 115.1975405216217
##### Instance 171 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1746954470872879.
Result: safe in 4.8870 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00110694,  0.00297301,  0.00568548,  0.00267334, -0.00377660,
          0.01090546,  0.00235412, -0.00976589,  0.00669630,  0.98807895]],
       device='cuda:0')
diversed PGD initialization time: 0.1261
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02075746, -0.01396686,  0.02533837, -0.01291306, -0.00613053,
          -0.00223003,  0.00326606, -0.00645067,  0.99469793, -0.00533550],
         [-0.02075746, -0.01396686,  0.02533837, -0.01291306, -0.00613053,
          -0.00223003,  0.00326606, -0.00645067,  0.99469793, -0.00533550]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.54219531e-02,  8.63135606e-03, -3.06738690e-02,  7.57756084e-03,
           7.95025378e-04, -3.10547650e-03, -8.60156119e-03,  1.11516565e-03,
          -1.00003338e+00]]], device='cuda:0')
number of violation:  4
Attack finished in 0.1518 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2003 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99960959, -0.00700365,  0.01322913,  0.00492328, -0.00526909,
         -0.01800461, -0.00753517, -0.00972976, -0.00542061, -0.00675349]],
       device='cuda:0')
diversed PGD initialization time: 0.1230
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 7.81786323e-01,  6.81206584e-04, -9.73242521e-03, -8.40348005e-03,
          -4.49225940e-02,  4.02645379e-01, -3.09650600e-03,  2.73949876e-02,
           1.38052255e-02, -2.70706266e-02],
         [ 7.81786323e-01,  6.81206584e-04, -9.73242521e-03, -8.40348005e-03,
          -4.49225940e-02,  4.02645379e-01, -3.09650600e-03,  2.73949876e-02,
           1.38052255e-02, -2.70706266e-02]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.78110510, 0.79151875, 0.79018980, 0.82670891, 0.37914094,
          0.78488284, 0.75439131, 0.76798111, 0.80885696]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6619 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99960959, -0.00700365,  0.01322913,  0.00492328, -0.00526909,
         -0.01800461, -0.00753517, -0.00972976, -0.00542061, -0.00675349]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 57, 1, 13] with unstable size 56 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [56]; unstable size 56; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 56] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.11196637, -0.40262669, -0.35460511, -0.22190121, -0.94050515,
         -0.36534321, -0.57473868, -0.75723565, -0.30862743]], device='cuda:0') None
best_l after optimization: 1.0207253694534302
alpha/beta optimization time: 2.467134475708008
initial alpha-crown bounds: tensor([[ 0.27648765,  0.18944184,  0.13869591,  0.24556065, -0.24751684,
          0.21039692, -0.04982716,  0.04392095,  0.21356533]], device='cuda:0')
Worst class: (+ rhs) -0.24751684069633484
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.72792291641235
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.27648764848709106.

Properties batch 1, size 1
Remaining timeout: 116.65406155586243
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.18944184482097626.

Properties batch 2, size 1
Remaining timeout: 116.57169222831726
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13869591057300568.

Properties batch 3, size 1
Remaining timeout: 116.49434447288513
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2455606460571289.

Properties batch 4, size 1
Remaining timeout: 116.41641640663147
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24751684]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99960959, -0.00700365,  0.01322913,  0.00492328, -0.00526909,
        -0.01800461, -0.00753517, -0.00972976, -0.00542061, -0.00675349],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24751684]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 40
-----------------
# of unstable neurons: 53
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 197] 
split level 2: [/input.3, 254] 
split level 3: [/input.3, 236] 
split level 4: [/input.3, 132] 
split level 5: [/input.3, 28] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.177757263183594e-05
Time: prepare 0.0034    bound 0.0048    transfer 0.0001    finalize 0.0020    func 0.0105    
Accumulated time: func 0.0105    prepare 0.0039    bound 0.0048    transfer 0.0001    finalize 0.0020    
length of domains: 0
Time: pickout 0.0005    decision 0.0397    set_bounds 0.0116    solve 0.0106    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0397    set_bounds 0.0116    solve 0.0106    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.09908890724182129


Properties batch 5, size 1
Remaining timeout: 116.18679690361023
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2103969156742096.

Properties batch 6, size 1
Remaining timeout: 116.10667324066162
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04982716]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99960959, -0.00700365,  0.01322913,  0.00492328, -0.00526909,
        -0.01800461, -0.00753517, -0.00972976, -0.00542061, -0.00675349],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04982716]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 40
-----------------
# of unstable neurons: 53
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 124] 
split level 2: [/input.3, 155] 
split level 3: [/input, 55] 
split level 4: [/input.3, 254] 
split level 5: [/input.3, 28] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011157989501953125
Time: prepare 0.0064    bound 0.0074    transfer 0.0023    finalize 0.0070    func 0.0231    
Accumulated time: func 0.0231    prepare 0.0069    bound 0.0074    transfer 0.0023    finalize 0.0070    
length of domains: 0
Time: pickout 0.0005    decision 0.0356    set_bounds 0.0114    solve 0.0231    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0356    set_bounds 0.0114    solve 0.0231    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.10741734504699707


Properties batch 7, size 1
Remaining timeout: 115.86724376678467
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.04392094910144806.

Properties batch 8, size 1
Remaining timeout: 115.78579831123352
##### Instance 173 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.21356533467769623.
Result: safe in 4.2960 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898692205548286, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.54461372e-04,  9.64384198e-01,  3.70138884e-03, -1.61780417e-03,
         -3.90858948e-03, -1.55486166e-04,  1.54918432e-03,  5.33811748e-03,
         -3.13126296e-03,  3.93308699e-04]], device='cuda:0')
diversed PGD initialization time: 0.1268
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00564187,  0.83493501,  0.00874974, -0.00613940,  0.01634624,
           0.04581511,  0.01383167,  0.03276510,  0.01807535,  0.01927246],
         [-0.00564187,  0.83493501,  0.00874974, -0.00613940,  0.01634624,
           0.04581511,  0.01383167,  0.03276510,  0.01807535,  0.01927246]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.84057689, 0.82618529, 0.84107441, 0.81858879, 0.78911990,
          0.82110333, 0.80216992, 0.81685966, 0.81566256]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6763 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 3.54461372e-04,  9.64384198e-01,  3.70138884e-03, -1.61780417e-03,
         -3.90858948e-03, -1.55486166e-04,  1.54918432e-03,  5.33811748e-03,
         -3.13126296e-03,  3.93308699e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 85, 1, 29] with unstable size 84 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [84]; unstable size 84; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 84] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.07051474, -0.18056858, -0.93573827, -0.47126800, -0.41216013,
         -0.17874175, -0.20076197, -0.72734076, -0.83363467]], device='cuda:0') None
best_l after optimization: 0.8162321448326111
alpha/beta optimization time: 2.59891414642334
initial alpha-crown bounds: tensor([[ 0.34260398,  0.29143062, -0.57541835,  0.09464552,  0.01213883,
          0.29560998,  0.23973371,  0.21504474, -0.09955683]], device='cuda:0')
Worst class: (+ rhs) -0.5754183530807495
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.60063982009888
##### Instance 174 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.34260398149490356.

Properties batch 1, size 1
Remaining timeout: 116.52129697799683
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.29143062233924866.

Properties batch 2, size 1
Remaining timeout: 116.44575762748718
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.57541835]], device='cuda:0') need to verify.
Model prediction is: tensor([ 3.54461372e-04,  9.64384198e-01,  3.70138884e-03, -1.61780417e-03,
        -3.90858948e-03, -1.55486166e-04,  1.54918432e-03,  5.33811748e-03,
        -3.13126296e-03,  3.93308699e-04], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.57541835]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 29
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 78
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 153] 
split level 1: [/input.3, 63] 
split level 2: [/input.3, 236] 
split level 3: [/input.3, 200] 
split level 4: [/input.3, 143] 
split level 5: [/input, 209] 
pruning_in_iteration open status: True
ratio of positive domain = 60 / 64 = 0.9375
pruning-in-iteration extra time: 0.025071144104003906
Time: prepare 0.0974    bound 0.3299    transfer 0.0004    finalize 0.0028    func 0.4305    
Accumulated time: func 0.4305    prepare 0.0980    bound 0.3299    transfer 0.0004    finalize 0.0028    
Current worst splitting domains lb-rhs (depth):
-0.19943 (6), -0.15581 (6), -0.03033 (6), -0.02264 (6), 
length of domains: 4
Time: pickout 0.0004    decision 0.0267    set_bounds 0.0262    solve 0.4306    add 0.0010    
Accumulated time: pickout 0.0004    decision 0.0267    set_bounds 0.0262    solve 0.4306    add 0.0010    
Current (lb-rhs): -0.199432373046875
4 domains visited
Cumulative time: 0.4916036128997803

BaB round 2
batch: 4
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 100] [/input, 110] [/input, 171] [/input, 110] 
split level 1: [/input, 171] [/input, 171] [/input, 227] [/input, 171] 
split level 2: [/input, 227] [/input, 100] [/input, 100] [/input, 138] 
split level 3: [/input, 154] [/input, 227] [/input, 154] [/input, 100] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 9.107589721679688e-05
Time: prepare 0.1200    bound 0.0058    transfer 0.0002    finalize 0.0025    func 0.1285    
Accumulated time: func 0.5590    prepare 0.2184    bound 0.3356    transfer 0.0006    finalize 0.0053    
length of domains: 0
Time: pickout 0.0005    decision 0.0311    set_bounds 0.0178    solve 0.1286    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0579    set_bounds 0.0440    solve 0.5592    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4 domains visited
Cumulative time: 0.6699690818786621


Properties batch 3, size 1
Remaining timeout: 115.63963198661804
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.09464551508426666.

Properties batch 4, size 1
Remaining timeout: 115.56000828742981
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.01213882863521576.

Properties batch 5, size 1
Remaining timeout: 115.48457860946655
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2956099808216095.

Properties batch 6, size 1
Remaining timeout: 115.40274143218994
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2397337108850479.

Properties batch 7, size 1
Remaining timeout: 115.31922340393066
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.21504473686218262.

Properties batch 8, size 1
Remaining timeout: 115.23917245864868
##### Instance 174 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09955683]], device='cuda:0') need to verify.
Model prediction is: tensor([ 3.54461372e-04,  9.64384198e-01,  3.70138884e-03, -1.61780417e-03,
        -3.90858948e-03, -1.55486166e-04,  1.54918432e-03,  5.33811748e-03,
        -3.13126296e-03,  3.93308699e-04], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09955683]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 29
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 78
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 80] 
split level 2: [/input.3, 26] 
split level 3: [/input.3, 159] 
split level 4: [/input, 100] 
split level 5: [/input.3, 43] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00020599365234375
Time: prepare 0.0076    bound 0.0114    transfer 0.0002    finalize 0.0049    func 0.0243    
Accumulated time: func 0.0243    prepare 0.0081    bound 0.0114    transfer 0.0002    finalize 0.0049    
length of domains: 0
Time: pickout 0.0004    decision 0.0320    set_bounds 0.0116    solve 0.0243    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0320    set_bounds 0.0116    solve 0.0243    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.07432103157043457

Result: safe in 4.9966 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-5.57945296e-03, -1.34084076e-02, -1.30219758e-03, -9.83099639e-03,
         -2.99893804e-02,  1.02723062e+00, -2.37192959e-03, -3.23566198e-02,
         -9.01182741e-03,  3.28198075e-05]], device='cuda:0')
diversed PGD initialization time: 0.1318
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 7.46957958e-04, -9.86523926e-03, -1.50910020e-02, -7.66402483e-03,
          -1.56031214e-02,  1.02081645e+00, -1.08583272e-02, -2.85700113e-02,
           3.32081020e-02, -1.54278427e-03],
         [ 7.46957958e-04, -9.86523926e-03, -1.50910020e-02, -7.66402483e-03,
          -1.56031214e-02,  1.02081645e+00, -1.08583272e-02, -2.85700113e-02,
           3.32081020e-02, -1.54278427e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.02006948, 1.03068173, 1.03590751, 1.02848053, 1.03641951,
          1.03167474, 1.04938650, 0.98760831, 1.02235925]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6854 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-5.57945296e-03, -1.34084076e-02, -1.30219758e-03, -9.83099639e-03,
         -2.99893804e-02,  1.02723062e+00, -2.37192959e-03, -3.23566198e-02,
         -9.01182741e-03,  3.28198075e-05]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 26, 1, 17] with unstable size 25 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [25]; unstable size 25; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.13004674, -0.07177079, -0.05985290, -0.46188661,  0.06357816,
         -0.19737452,  0.05121960, -0.68323779,  0.00744915]], device='cuda:0') None

all verified at 5th iter
best_l after optimization: 2.722780466079712
alpha/beta optimization time: 0.15034008026123047
initial alpha-crown bounds: tensor([[0.38893944, 0.34160879, 0.34497923, 0.00340128, 0.39973152, 0.44995266,
         0.39247018, 0.03944308, 0.36225438]], device='cuda:0')
Worst class: (+ rhs) 0.0034012794494628906
verified with init bound!
Result: safe-incomplete in 0.9550 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
          0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998]],
       device='cuda:0')
diversed PGD initialization time: 0.1281
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00684665, 0.01153027, 0.02487935, 0.02190095, 0.42736247,
          0.00891998, 0.01238482, 0.01433565, 0.00880992, 0.46751350],
         [0.00684665, 0.01153027, 0.02487935, 0.02190095, 0.42736247,
          0.00891998, 0.01238482, 0.01433565, 0.00880992, 0.46751350]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.46066687, 0.45598322, 0.44263417, 0.44561255, 0.04015103,
          0.45859352, 0.45512867, 0.45317787, 0.45870358]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7092 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
          0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 47, 1, 12] with unstable size 46 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [46]; unstable size 46; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 46] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44245127, -0.41676474, -0.61334348, -0.47590965, -1.12204242,
         -0.47020686, -0.42609540, -0.68901742, -0.81346941]], device='cuda:0') None
best_l after optimization: -3.8108887672424316
alpha/beta optimization time: 2.044614553451538
initial alpha-crown bounds: tensor([[-0.24713299, -0.22859147, -0.43742129, -0.30666664, -0.91552794,
         -0.29353726, -0.25203374, -0.45586786, -0.67410976]], device='cuda:0')
Worst class: (+ rhs) -0.9155279397964478
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 117.10009360313416
##### Instance 176 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24713299]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24713299]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input.3, 18] 
split level 4: [/input.3, 238] 
split level 5: [/input.3, 123] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.018779993057250977
Time: prepare 0.0569    bound 0.2977    transfer 0.0067    finalize 0.0065    func 0.3678    
Accumulated time: func 0.3678    prepare 0.0574    bound 0.2977    transfer 0.0067    finalize 0.0065    
Current worst splitting domains lb-rhs (depth):
-0.05078 (6), -0.02755 (6), 
length of domains: 2
Time: pickout 0.0005    decision 0.0316    set_bounds 0.0117    solve 0.3679    add 0.0050    
Accumulated time: pickout 0.0005    decision 0.0316    set_bounds 0.0117    solve 0.3679    add 0.0050    
Current (lb-rhs): -0.050781309604644775
2 domains visited
Cumulative time: 0.43323493003845215

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 2] [/input, 178] 
split level 1: [/input, 76] [/input, 76] 
split level 2: [/input, 178] [/input, 15] 
split level 3: [/input, 15] [/input, 2] 
split level 4: [/input, 198] [/input, 198] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 9.036064147949219e-05
Time: prepare 0.0184    bound 0.0053    transfer 0.0002    finalize 0.0025    func 0.0265    
Accumulated time: func 0.3943    prepare 0.0764    bound 0.3030    transfer 0.0069    finalize 0.0090    
length of domains: 0
Time: pickout 0.0006    decision 0.0879    set_bounds 0.0111    solve 0.0267    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.1195    set_bounds 0.0228    solve 0.3946    add 0.0051    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.5599281787872314


Properties batch 1, size 1
Remaining timeout: 116.40662097930908
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22859147]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22859147]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 18] 
split level 3: [/input.3, 57] 
split level 4: [/input.3, 123] 
split level 5: [/input.3, 238] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.02187204360961914
Time: prepare 0.0807    bound 0.3183    transfer 0.0004    finalize 0.0020    func 0.4017    
Accumulated time: func 0.4017    prepare 0.0812    bound 0.3183    transfer 0.0004    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.02952 (6), -0.00262 (6), 
length of domains: 2
Time: pickout 0.0004    decision 0.0313    set_bounds 0.0371    solve 0.4017    add 0.0009    
Accumulated time: pickout 0.0004    decision 0.0313    set_bounds 0.0371    solve 0.4017    add 0.0009    
Current (lb-rhs): -0.02951642870903015
2 domains visited
Cumulative time: 0.47704601287841797

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 2] [/input.3, 45] 
split level 1: [/input, 76] [/input, 178] 
split level 2: [/input, 178] [/input, 15] 
split level 3: [/input, 15] [/input, 2] 
split level 4: [/input, 198] [/input, 198] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00018525123596191406
Time: prepare 0.0084    bound 0.0114    transfer 0.0002    finalize 0.0051    func 0.0253    
Accumulated time: func 0.4269    prepare 0.0901    bound 0.3297    transfer 0.0007    finalize 0.0071    
length of domains: 0
Time: pickout 0.0006    decision 0.0299    set_bounds 0.0112    solve 0.0253    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0612    set_bounds 0.0483    solve 0.4270    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.5445120334625244


Properties batch 2, size 1
Remaining timeout: 115.74445223808289
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.43742129]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.43742129]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input.3, 102] 
split level 4: [/input.3, 238] 
split level 5: [/input, 15] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.025263309478759766
Time: prepare 0.0941    bound 0.3254    transfer 0.0004    finalize 0.0027    func 0.4227    
Accumulated time: func 0.4227    prepare 0.0946    bound 0.3254    transfer 0.0004    finalize 0.0027    
Current worst splitting domains lb-rhs (depth):
-0.12678 (6), -0.07143 (6), 
length of domains: 2
Time: pickout 0.0004    decision 0.0299    set_bounds 0.0382    solve 0.4228    add 0.0009    
Accumulated time: pickout 0.0004    decision 0.0299    set_bounds 0.0382    solve 0.4228    add 0.0009    
Current (lb-rhs): -0.12678462266921997
2 domains visited
Cumulative time: 0.49788856506347656

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 43] [/input, 178] 
split level 1: [/input, 2] [/input, 2] 
split level 2: [/input, 198] [/input, 76] 
split level 3: [/input, 178] [/input, 198] 
split level 4: [/input.3, 18] [/input.3, 18] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00015473365783691406
Time: prepare 0.0750    bound 0.0056    transfer 0.0002    finalize 0.0027    func 0.0834    
Accumulated time: func 0.5061    prepare 0.1701    bound 0.3310    transfer 0.0006    finalize 0.0053    
length of domains: 0
Time: pickout 0.0006    decision 0.0455    set_bounds 0.0252    solve 0.0835    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0754    set_bounds 0.0634    solve 0.5063    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.6530511379241943


Properties batch 3, size 1
Remaining timeout: 114.98796701431274
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.30666664]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.30666664]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input.3, 238] 
split level 4: [/input.3, 18] 
split level 5: [/input.3, 143] 
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.022592544555664062
Time: prepare 0.1019    bound 0.3103    transfer 0.0013    finalize 0.0042    func 0.4179    
Accumulated time: func 0.4179    prepare 0.1024    bound 0.3103    transfer 0.0013    finalize 0.0042    
Current worst splitting domains lb-rhs (depth):
-0.08525 (6), -0.06532 (6), -0.00406 (6), 
length of domains: 3
Time: pickout 0.0004    decision 0.0310    set_bounds 0.0109    solve 0.4180    add 0.0035    
Accumulated time: pickout 0.0004    decision 0.0310    set_bounds 0.0109    solve 0.4180    add 0.0035    
Current (lb-rhs): -0.08524993062019348
3 domains visited
Cumulative time: 0.4695103168487549

BaB round 2
batch: 3
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 178] [/input, 2] [/input, 178] 
split level 1: [/input, 15] [/input, 76] [/input, 76] 
split level 2: [/input, 2] [/input, 198] [/input, 15] 
split level 3: [/input, 198] [/input, 15] [/input, 2] 
split level 4: [/input, 93] [/input, 178] [/input, 198] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.0001068115234375
Time: prepare 0.1514    bound 0.0059    transfer 0.0002    finalize 0.0036    func 0.1611    
Accumulated time: func 0.5791    prepare 0.2543    bound 0.3162    transfer 0.0015    finalize 0.0079    
length of domains: 0
Time: pickout 0.0006    decision 0.0354    set_bounds 0.0146    solve 0.1612    add 0.0001    
Accumulated time: pickout 0.0011    decision 0.0664    set_bounds 0.0255    solve 0.5792    add 0.0036    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3 domains visited
Cumulative time: 0.6819071769714355


Properties batch 4, size 1
Remaining timeout: 114.1701967716217
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.91552794]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.91552794]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 123] 
split level 1: [/input.3, 18] 
split level 2: [/input.3, 38] 
split level 3: [/input.3, 149] 
split level 4: [/input.3, 57] 
split level 5: [/input, 178] 
pruning_in_iteration open status: True
ratio of positive domain = 50 / 64 = 0.78125
pruning-in-iteration extra time: 0.02122020721435547
Time: prepare 0.1298    bound 0.3212    transfer 0.0004    finalize 0.0029    func 0.4546    
Accumulated time: func 0.4546    prepare 0.1303    bound 0.3212    transfer 0.0004    finalize 0.0029    
Current worst splitting domains lb-rhs (depth):
-0.52007 (6), -0.50397 (6), -0.35420 (6), -0.32988 (6), -0.22106 (6), -0.15615 (6), -0.13440 (6), -0.09700 (6), -0.09476 (6), -0.06739 (6), -0.05194 (6), -0.04815 (6), -0.04114 (6), -0.01530 (6), 
length of domains: 14
Time: pickout 0.0004    decision 0.0307    set_bounds 0.0124    solve 0.4546    add 0.0013    
Accumulated time: pickout 0.0004    decision 0.0307    set_bounds 0.0124    solve 0.4546    add 0.0013    
Current (lb-rhs): -0.5200664401054382
14 domains visited
Cumulative time: 0.5052626132965088

BaB round 2
batch: 14
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 76] [/input, 76] [/input, 174] [/input, 174] [/input.3, 80] [/input, 15] [/input, 76] [/input, 76] [/input, 76] [/input, 15] 
split level 1: [/input, 2] [/input, 15] [/input, 76] [/input, 76] [/input.3, 162] [/input, 76] [/input, 15] [/input, 15] [/input, 174] [/input, 76] 
pruning_in_iteration open status: True
ratio of positive domain = 51 / 56 = 0.9107142857142857
pruning-in-iteration extra time: 0.022901296615600586
Time: prepare 0.0938    bound 0.3196    transfer 0.0005    finalize 0.0024    func 0.4165    
Accumulated time: func 0.8711    prepare 0.2246    bound 0.6409    transfer 0.0009    finalize 0.0053    
Current worst splitting domains lb-rhs (depth):
-0.37888 (8), -0.35614 (8), -0.10943 (8), -0.07233 (8), -0.03520 (8), 
length of domains: 5
Time: pickout 0.0007    decision 0.0343    set_bounds 0.0261    solve 0.4166    add 0.0010    
Accumulated time: pickout 0.0011    decision 0.0650    set_bounds 0.0385    solve 0.8713    add 0.0023    
Current (lb-rhs): -0.3788754343986511
19 domains visited
Cumulative time: 0.9844646453857422

BaB round 3
batch: 5
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 15] [/input, 15] [/input, 2] [/input, 174] [/input, 43] 
split level 1: [/input, 43] [/input, 43] [/input, 43] [/input.3, 162] [/input, 2] 
split level 2: [/input.3, 162] [/input.3, 162] [/input.3, 162] [/input, 198] [/input.3, 162] 
split level 3: [/input.3, 238] [/input.3, 238] [/input, 198] [/input.3, 238] [/input, 198] 
pruning_in_iteration open status: True
ratio of positive domain = 77 / 80 = 0.9625
pruning-in-iteration extra time: 0.025214433670043945
Time: prepare 0.1416    bound 0.3234    transfer 0.0004    finalize 0.0033    func 0.4687    
Accumulated time: func 1.3399    prepare 0.3666    bound 0.9643    transfer 0.0013    finalize 0.0086    
Current worst splitting domains lb-rhs (depth):
-0.17822 (12), -0.15367 (12), -0.00369 (12), 
length of domains: 3
Time: pickout 0.0006    decision 0.0330    set_bounds 0.0140    solve 0.4688    add 0.0009    
Accumulated time: pickout 0.0017    decision 0.0980    set_bounds 0.0525    solve 1.3401    add 0.0032    
Current (lb-rhs): -0.17822159826755524
22 domains visited
Cumulative time: 1.5024642944335938

BaB round 4
batch: 3
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input, 198] [/input.3, 115] [/input.3, 115] 
split level 1: [/input.3, 121] [/input, 198] [/input, 198] 
split level 2: [/input.3, 87] [/input.3, 121] [/input.3, 121] 
split level 3: [/input.3, 249] [/input.3, 87] [/input.3, 87] 
split level 4: [/input, 2] [/input.3, 249] [/input.3, 249] 
pruning_in_iteration open status: True
ratio of positive domain = 89 / 96 = 0.9270833333333334
pruning-in-iteration extra time: 0.023651123046875
Time: prepare 0.0610    bound 0.3292    transfer 0.0003    finalize 0.0041    func 0.3948    
Accumulated time: func 1.7347    prepare 0.4282    bound 1.2935    transfer 0.0016    finalize 0.0128    
Current worst splitting domains lb-rhs (depth):
-0.10574 (17), -0.07892 (17), -0.06748 (17), -0.04108 (17), -0.01890 (17), -0.00670 (17), -0.00649 (17), 
length of domains: 7
Time: pickout 0.0007    decision 0.0618    set_bounds 0.0339    solve 0.3949    add 0.0010    
Accumulated time: pickout 0.0024    decision 0.1598    set_bounds 0.0864    solve 1.7350    add 0.0042    
Current (lb-rhs): -0.10574424266815186
29 domains visited
Cumulative time: 1.9954979419708252

BaB round 5
batch: 7
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.3, 80] [/input.3, 80] [/input.3, 80] [/input.3, 80] [/input.3, 80] [/input.3, 80] [/input.3, 80] 
split level 1: [/input.3, 124] [/input.3, 232] [/input.3, 124] [/input, 2] [/input.3, 232] [/input, 2] [/input.3, 232] 
split level 2: [/input.3, 232] [/input.3, 102] [/input.3, 232] [/input.3, 232] [/input.3, 102] [/input.3, 232] [/input.3, 102] 
pruning_in_iteration open status: True
ratio of positive domain = 51 / 56 = 0.9107142857142857
pruning-in-iteration extra time: 0.02459120750427246
Time: prepare 0.0307    bound 0.3203    transfer 0.0004    finalize 0.0029    func 0.3543    
Accumulated time: func 2.0890    prepare 0.4593    bound 1.6138    transfer 0.0020    finalize 0.0156    
Current worst splitting domains lb-rhs (depth):
-0.06812 (20), -0.04646 (20), -0.04411 (20), -0.01670 (20), -0.01256 (20), 
length of domains: 5
Time: pickout 0.0007    decision 0.1228    set_bounds 0.0101    solve 0.3544    add 0.0010    
Accumulated time: pickout 0.0031    decision 0.2826    set_bounds 0.0965    solve 2.0894    add 0.0053    
Current (lb-rhs): -0.06811602413654327
34 domains visited
Cumulative time: 2.4851043224334717

BaB round 6
batch: 5
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.3, 43] [/input.3, 43] [/input.3, 43] [/input, 2] [/input, 2] 
split level 1: [/input.3, 102] [/input.3, 124] [/input.3, 124] [/input.3, 43] [/input.3, 43] 
split level 2: [/input.3, 21] [/input.3, 21] [/input.3, 21] [/input.3, 102] [/input.3, 124] 
split level 3: [/input.3, 95] [/input.3, 95] [/input.3, 95] [/input.3, 21] [/input.3, 21] 
pruning_in_iteration open status: True
ratio of positive domain = 78 / 80 = 0.975
pruning-in-iteration extra time: 0.021436214447021484
Time: prepare 0.0615    bound 0.3232    transfer 0.0004    finalize 0.0033    func 0.3885    
Accumulated time: func 2.4775    prepare 0.5213    bound 1.9370    transfer 0.0024    finalize 0.0190    
Current worst splitting domains lb-rhs (depth):
-0.00278 (24), -0.00266 (24), 
length of domains: 2
Time: pickout 0.0006    decision 0.0712    set_bounds 0.0251    solve 0.3885    add 0.0009    
Accumulated time: pickout 0.0037    decision 0.3538    set_bounds 0.1216    solve 2.4779    add 0.0062    
Current (lb-rhs): -0.0027837157249450684
36 domains visited
Cumulative time: 2.972020387649536

BaB round 7
batch: 2
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.3, 200] [/input.3, 200] 
split level 1: [/input.3, 143] [/input.3, 143] 
split level 2: [/input.3, 165] [/input.3, 165] 
split level 3: [/input.3, 94] [/input.3, 94] 
split level 4: [/input, 2] [/input, 2] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011491775512695312
Time: prepare 0.0958    bound 0.0058    transfer 0.0002    finalize 0.0027    func 0.1045    
Accumulated time: func 2.5820    prepare 0.6176    bound 1.9428    transfer 0.0026    finalize 0.0217    
length of domains: 0
Time: pickout 0.0006    decision 0.0284    set_bounds 0.0380    solve 0.1046    add 0.0001    
Accumulated time: pickout 0.0043    decision 0.3821    set_bounds 0.1596    solve 2.5825    add 0.0063    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
36 domains visited
Cumulative time: 3.1439332962036133


Properties batch 5, size 1
Remaining timeout: 110.90872168540955
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.29353726]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.29353726]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input.3, 238] 
split level 4: [/input.3, 18] 
split level 5: [/input.3, 162] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.022999286651611328
Time: prepare 0.1117    bound 0.3184    transfer 0.0004    finalize 0.0020    func 0.4327    
Accumulated time: func 0.4327    prepare 0.1122    bound 0.3184    transfer 0.0004    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.06941 (6), -0.04928 (6), 
length of domains: 2
Time: pickout 0.0004    decision 0.0306    set_bounds 0.0119    solve 0.4327    add 0.0009    
Accumulated time: pickout 0.0004    decision 0.0306    set_bounds 0.0119    solve 0.4327    add 0.0009    
Current (lb-rhs): -0.06940957903862
2 domains visited
Cumulative time: 0.4823291301727295

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 2] [/input, 178] 
split level 1: [/input, 76] [/input, 15] 
split level 2: [/input, 15] [/input, 76] 
split level 3: [/input, 198] [/input, 2] 
split level 4: [/input, 178] [/input, 198] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00042724609375
Time: prepare 0.0074    bound 0.0064    transfer 0.0023    finalize 0.0071    func 0.0232    
Accumulated time: func 0.4558    prepare 0.1201    bound 0.3247    transfer 0.0027    finalize 0.0091    
length of domains: 0
Time: pickout 0.0006    decision 0.0299    set_bounds 0.0108    solve 0.0233    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0605    set_bounds 0.0227    solve 0.4561    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.5472445487976074


Properties batch 6, size 1
Remaining timeout: 110.24323201179504
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.25203374]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25203374]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 57] 
split level 3: [/input.3, 18] 
split level 4: [/input.3, 238] 
split level 5: [/input.3, 123] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.021047592163085938
Time: prepare 0.0765    bound 0.3160    transfer 0.0005    finalize 0.0020    func 0.3951    
Accumulated time: func 0.3951    prepare 0.0770    bound 0.3160    transfer 0.0005    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.05292 (6), -0.03146 (6), 
length of domains: 2
Time: pickout 0.0004    decision 0.0298    set_bounds 0.0366    solve 0.3952    add 0.0009    
Accumulated time: pickout 0.0004    decision 0.0298    set_bounds 0.0366    solve 0.3952    add 0.0009    
Current (lb-rhs): -0.05291604995727539
2 domains visited
Cumulative time: 0.46858763694763184

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 76] [/input, 178] 
split level 1: [/input, 2] [/input, 15] 
split level 2: [/input, 15] [/input, 76] 
split level 3: [/input, 178] [/input, 2] 
split level 4: [/input, 198] [/input, 198] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00020766258239746094
Time: prepare 0.0084    bound 0.0106    transfer 0.0003    finalize 0.0049    func 0.0242    
Accumulated time: func 0.4194    prepare 0.0859    bound 0.3266    transfer 0.0007    finalize 0.0069    
length of domains: 0
Time: pickout 0.0006    decision 0.0298    set_bounds 0.0103    solve 0.0244    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0597    set_bounds 0.0469    solve 0.4196    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.5340774059295654


Properties batch 7, size 1
Remaining timeout: 109.601726770401
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.45586786]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.45586786]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 57] 
split level 2: [/input.3, 133] 
split level 3: [/input.3, 123] 
split level 4: [/input.3, 238] 
split level 5: [/input, 2] 
pruning_in_iteration open status: True
ratio of positive domain = 59 / 64 = 0.921875
pruning-in-iteration extra time: 0.0231778621673584
Time: prepare 0.0833    bound 0.3227    transfer 0.0004    finalize 0.0026    func 0.4093    
Accumulated time: func 0.4093    prepare 0.0839    bound 0.3227    transfer 0.0004    finalize 0.0026    
Current worst splitting domains lb-rhs (depth):
-0.09091 (6), -0.06755 (6), -0.02994 (6), -0.02228 (6), -0.00211 (6), 
length of domains: 5
Time: pickout 0.0004    decision 0.0410    set_bounds 0.0372    solve 0.4093    add 0.0010    
Accumulated time: pickout 0.0004    decision 0.0410    set_bounds 0.0372    solve 0.4093    add 0.0010    
Current (lb-rhs): -0.09090793132781982
5 domains visited
Cumulative time: 0.49451518058776855

BaB round 2
batch: 5
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 43] [/input, 43] [/input, 76] [/input, 43] [/input, 76] 
split level 1: [/input, 76] [/input.3, 124] [/input, 178] [/input, 76] [/input, 178] 
split level 2: [/input, 15] [/input, 198] [/input.3, 124] [/input.3, 124] [/input.3, 124] 
split level 3: [/input, 178] [/input, 178] [/input, 15] [/input, 178] [/input, 15] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.00011897087097167969
Time: prepare 0.0613    bound 0.0057    transfer 0.0002    finalize 0.0034    func 0.0706    
Accumulated time: func 0.4799    prepare 0.1457    bound 0.3284    transfer 0.0006    finalize 0.0060    
length of domains: 0
Time: pickout 0.0006    decision 0.0687    set_bounds 0.0286    solve 0.0707    add 0.0001    
Accumulated time: pickout 0.0011    decision 0.1096    set_bounds 0.0658    solve 0.4800    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
5 domains visited
Cumulative time: 0.6636331081390381


Properties batch 8, size 1
Remaining timeout: 108.83469152450562
##### Instance 176 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.67410976]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.00169633,  0.00496458,  0.00572456,  0.00649652, -0.00748742,
         0.00876554,  0.00210628, -0.00177720,  0.00725444,  0.97711998],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.67410976]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 38] 
split level 1: [/input.3, 149] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 150] 
split level 4: [/input.3, 57] 
split level 5: [/input.3, 30] 
pruning_in_iteration open status: True
ratio of positive domain = 56 / 64 = 0.875
pruning-in-iteration extra time: 0.014369010925292969
Time: prepare 0.0033    bound 0.2449    transfer 0.0004    finalize 0.0021    func 0.2510    
Accumulated time: func 0.2510    prepare 0.0038    bound 0.2449    transfer 0.0004    finalize 0.0021    
Current worst splitting domains lb-rhs (depth):
-0.19198 (6), -0.11752 (6), -0.05158 (6), -0.04082 (6), -0.03103 (6), -0.03037 (6), -0.02911 (6), -0.01881 (6), 
length of domains: 8
Time: pickout 0.0005    decision 0.0265    set_bounds 0.0106    solve 0.2510    add 0.0011    
Accumulated time: pickout 0.0005    decision 0.0265    set_bounds 0.0106    solve 0.2510    add 0.0011    
Current (lb-rhs): -0.19197827577590942
8 domains visited
Cumulative time: 0.2952542304992676

BaB round 2
batch: 8
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 178] [/input, 198] [/input, 2] [/input, 198] [/input, 2] [/input, 198] [/input, 2] [/input, 198] 
split level 1: [/input, 15] [/input, 2] [/input, 198] [/input, 2] [/input, 198] [/input, 2] [/input, 198] [/input, 2] 
split level 2: [/input, 2] [/input.3, 238] [/input.3, 238] [/input.3, 238] [/input, 15] [/input.3, 238] [/input.3, 238] [/input.3, 238] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00014019012451171875
Time: prepare 0.0222    bound 0.0055    transfer 0.0001    finalize 0.0026    func 0.0305    
Accumulated time: func 0.2815    prepare 0.0265    bound 0.2504    transfer 0.0005    finalize 0.0047    
length of domains: 0
Time: pickout 0.0006    decision 0.1255    set_bounds 0.0106    solve 0.0306    add 0.0001    
Accumulated time: pickout 0.0011    decision 0.1520    set_bounds 0.0212    solve 0.2816    add 0.0012    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
8 domains visited
Cumulative time: 0.4629795551300049

Result: safe in 11.7631 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00783901, 0.00828987, 0.01861006, 0.02232488, 0.01435511, 0.02223383,
         0.00899356, 0.82958639, 0.01873913, 0.02278512]], device='cuda:0')
diversed PGD initialization time: 0.1288
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00373146, -0.06369081,  0.02371182, -0.07112335, -0.01435281,
           0.01908704, -0.00368156,  0.03743537,  0.79741669,  0.24445735],
         [-0.00373146, -0.06369081,  0.02371182, -0.07112335, -0.01435281,
           0.01908704, -0.00368156,  0.03743537,  0.79741669,  0.24445735]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.04116682,  0.10112618,  0.01372355,  0.10855871,  0.05178818,
           0.01834833,  0.04111692, -0.75998133, -0.20702198]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.1585 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2389 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00869707, -0.02767733,  0.02516331,  0.50983626, -0.01890678,
          0.05793358,  0.00484668, -0.07090062,  0.01413792,  0.50424939]],
       device='cuda:0')
diversed PGD initialization time: 0.1248
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.67836936e-02, -4.75403517e-02,  4.48985398e-03,  1.15034074e-01,
          -1.80102475e-02,  4.08582389e-02, -4.06571478e-03, -2.70671248e-02,
           9.30883408e-01, -3.14421952e-04],
         [-2.67836936e-02, -4.75403517e-02,  4.48985398e-03,  1.15034074e-01,
          -1.80102475e-02,  4.08582389e-02, -4.06571478e-03, -2.70671248e-02,
           9.30883408e-01, -3.14421952e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.14181776,  0.16257443,  0.11054422,  0.13304432,  0.07417583,
           0.11909979,  0.14210120, -0.81584930,  0.11534850]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1381 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2218 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.03559477.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.008898694068193436, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-2.16070935e-03, -4.19512391e-03,  2.20049918e-03,  8.59521329e-04,
          9.88931596e-01, -3.87646258e-04,  1.89077482e-03, -3.49313021e-03,
          8.52882862e-04,  9.57213342e-04]], device='cuda:0')
diversed PGD initialization time: 0.1284
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00139197, -0.00835658,  0.00585763, -0.01151147,  0.26604524,
           0.03097077,  0.00234964, -0.00379677,  0.07932645,  0.63833344],
         [-0.00139197, -0.00835658,  0.00585763, -0.01151147,  0.26604524,
           0.03097077,  0.00234964, -0.00379677,  0.07932645,  0.63833344]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.26743722,  0.27440181,  0.26018763,  0.27755672,  0.23507446,
           0.26369560,  0.26984203,  0.18671879, -0.37228820]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2026 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2911 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_0_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.02966965, 0.01010968, 0.32438859, 0.08251400, 0.01710362, 0.05244932,
         0.02739218, 0.33264402, 0.05147684, 0.03499024]], device='cuda:0')
diversed PGD initialization time: 0.1269
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.01438016, -0.02505744,  0.00899129, -0.01447715, -0.01057084,
           0.01249739, -0.01593496, -0.03178777,  1.02767944, -0.01210505],
         [ 0.01438016, -0.02505744,  0.00899129, -0.01447715, -0.01057084,
           0.01249739, -0.01593496, -0.03178777,  1.02767944, -0.01210505]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.04616793, -0.00673033, -0.04077905, -0.01731062, -0.02121693,
          -0.04428516, -0.01585281, -1.05946720, -0.01968272]]],
       device='cuda:0')
number of violation:  9
Attack finished in 0.2065 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3340 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_1_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-8.77976418e-03, -2.78709829e-02,  1.01124179e+00,  4.27396521e-02,
          2.02171504e-04, -2.91563720e-02, -9.30459797e-03, -2.09300667e-02,
         -3.17798555e-03, -1.09127536e-02]], device='cuda:0')
diversed PGD initialization time: 0.1288
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.01883545, -0.05585073,  0.64946568,  0.70028019, -0.01990611,
          -0.21212360,  0.03738502, -0.13120915, -0.00472369, -0.01952699],
         [ 0.01883545, -0.05585073,  0.64946568,  0.70028019, -0.01990611,
          -0.21212360,  0.03738502, -0.13120915, -0.00472369, -0.01952699]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.63063025,  0.70531642, -0.05081451,  0.66937178,  0.86158931,
           0.61208069,  0.78067482,  0.65418935,  0.66899264]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2029 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2909 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_2_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00286340, 0.76406091, 0.03370418, 0.00967224, 0.00144267, 0.03291371,
         0.00701807, 0.01759276, 0.08379453, 0.02102767]], device='cuda:0')
diversed PGD initialization time: 0.1260
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.04133882,  0.01865461, -0.07445845, -0.09254193, -0.01759226,
          -0.08945907, -0.09449188,  0.31845391,  1.07485497, -0.05111475],
         [-0.04133882,  0.01865461, -0.07445845, -0.09254193, -0.01759226,
          -0.08945907, -0.09449188,  0.31845391,  1.07485497, -0.05111475]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.05999343,  0.09311306,  0.11119655,  0.03624688,  0.10811368,
           0.11314650, -0.29979929, -1.05620039,  0.06976937]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.1420 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2025 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_3_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
         -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
          6.00062311e-04, -9.83896106e-03]], device='cuda:0')
diversed PGD initialization time: 0.1254
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 7.34457493e-01, -1.62351280e-02,  8.96923691e-02, -2.14323848e-02,
           1.48930401e-03,  1.30973980e-02,  1.21403486e-04, -4.32809889e-02,
          -8.86370987e-03,  2.15866685e-01],
         [ 7.34457493e-01, -1.62351280e-02,  8.96923691e-02, -2.14323848e-02,
           1.48930401e-03,  1.30973980e-02,  1.21403486e-04, -4.32809889e-02,
          -8.86370987e-03,  2.15866685e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.75069261, 0.64476514, 0.75588989, 0.73296821, 0.72136009,
          0.73433608, 0.77773845, 0.74332118, 0.51859081]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6676 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
         -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
          6.00062311e-04, -9.83896106e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 55, 1, 12] with unstable size 54 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [54]; unstable size 54; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 54] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.21546501, -0.66606539, -0.52858365, -0.29973438, -0.62204725,
         -0.29594678, -0.37326804, -0.55436504, -0.65805286]], device='cuda:0') None
best_l after optimization: -1.352505087852478
alpha/beta optimization time: 2.4337267875671387
initial alpha-crown bounds: tensor([[ 0.05371353, -0.41342443, -0.20205662, -0.05812371, -0.21485528,
         -0.10582930, -0.01902665, -0.06903976, -0.32386288]], device='cuda:0')
Worst class: (+ rhs) -0.41342443227767944
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.77898120880127
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.05371353030204773.

Properties batch 1, size 1
Remaining timeout: 116.70064115524292
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.41342443]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.41342443]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 102] 
split level 2: [/input, 158] 
split level 3: [/input.3, 31] 
split level 4: [/input.3, 130] 
split level 5: [/input.3, 132] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0022666454315185547
Time: prepare 0.0577    bound 0.0138    transfer 0.0023    finalize 0.0034    func 0.0774    
Accumulated time: func 0.0774    prepare 0.0583    bound 0.0138    transfer 0.0023    finalize 0.0034    
length of domains: 0
Time: pickout 0.0004    decision 0.0318    set_bounds 0.0110    solve 0.0775    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0318    set_bounds 0.0110    solve 0.0775    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.12671637535095215


Properties batch 2, size 1
Remaining timeout: 116.4225766658783
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20205662]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20205662]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 31] 
split level 2: [/input.3, 153] 
split level 3: [/input.3, 143] 
split level 4: [/input.3, 236] 
split level 5: [/input.3, 200] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.390975952148438e-05
Time: prepare 0.0043    bound 0.0047    transfer 0.0001    finalize 0.0018    func 0.0110    
Accumulated time: func 0.0110    prepare 0.0048    bound 0.0047    transfer 0.0001    finalize 0.0018    
length of domains: 0
Time: pickout 0.0005    decision 0.0475    set_bounds 0.0116    solve 0.0110    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0475    set_bounds 0.0116    solve 0.0110    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.10738658905029297


Properties batch 3, size 1
Remaining timeout: 116.18360352516174
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05812371]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05812371]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 26] 
split level 2: [/input, 149] 
split level 3: [/input, 158] 
split level 4: [/input.3, 31] 
split level 5: [/input.3, 230] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.486343383789062e-05
Time: prepare 0.0991    bound 0.0058    transfer 0.0001    finalize 0.0023    func 0.1074    
Accumulated time: func 0.1074    prepare 0.0996    bound 0.0058    transfer 0.0001    finalize 0.0023    
length of domains: 0
Time: pickout 0.0004    decision 0.0304    set_bounds 0.0374    solve 0.1074    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0304    set_bounds 0.0374    solve 0.1074    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.18111181259155273


Properties batch 4, size 1
Remaining timeout: 115.88555455207825
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21485528]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21485528]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 197] 
split level 2: [/input.3, 132] 
split level 3: [/input, 158] 
split level 4: [/input.3, 236] 
split level 5: [/input.3, 162] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 9.965896606445312e-05
Time: prepare 0.1317    bound 0.0059    transfer 0.0002    finalize 0.0025    func 0.1403    
Accumulated time: func 0.1403    prepare 0.1322    bound 0.0059    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0305    set_bounds 0.0123    solve 0.1404    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0305    set_bounds 0.0123    solve 0.1404    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.18929362297058105


Properties batch 5, size 1
Remaining timeout: 115.57563900947571
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.10582930]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.10582930]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 244] 
split level 2: [/input.3, 216] 
split level 3: [/input, 158] 
split level 4: [/input.3, 230] 
split level 5: [/input.3, 155] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 9.822845458984375e-05
Time: prepare 0.1303    bound 0.0059    transfer 0.0002    finalize 0.0025    func 0.1389    
Accumulated time: func 0.1389    prepare 0.1308    bound 0.0059    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0310    set_bounds 0.0123    solve 0.1389    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0310    set_bounds 0.0123    solve 0.1389    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.18845129013061523


Properties batch 6, size 1
Remaining timeout: 115.26962804794312
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01902665]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01902665]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input, 149] 
split level 2: [/input.3, 31] 
split level 3: [/input, 158] 
split level 4: [/input.3, 230] 
split level 5: [/input.3, 155] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00010013580322265625
Time: prepare 0.1308    bound 0.0059    transfer 0.0002    finalize 0.0025    func 0.1394    
Accumulated time: func 0.1394    prepare 0.1313    bound 0.0059    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0308    set_bounds 0.0123    solve 0.1394    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0308    set_bounds 0.0123    solve 0.1394    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.18882060050964355


Properties batch 7, size 1
Remaining timeout: 114.96271657943726
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06903976]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06903976]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 150] 
split level 2: [/input, 149] 
split level 3: [/input, 158] 
split level 4: [/input.3, 132] 
split level 5: [/input.3, 162] 

all verified at 10th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.010609865188598633
Time: prepare 0.1307    bound 0.1629    transfer 0.0004    finalize 0.0029    func 0.2969    
Accumulated time: func 0.2969    prepare 0.1312    bound 0.1629    transfer 0.0004    finalize 0.0029    
length of domains: 0
Time: pickout 0.0004    decision 0.0307    set_bounds 0.0123    solve 0.2972    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0307    set_bounds 0.0123    solve 0.2972    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.34644126892089844


Properties batch 8, size 1
Remaining timeout: 114.49420070648193
##### Instance 183 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32386288]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.00094318e+00, -1.14876777e-02,  2.84831226e-03, -9.57410038e-03,
        -6.41993806e-03,  7.59883970e-03,  2.40477175e-03, -1.77451372e-02,
         6.00062311e-04, -9.83896106e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32386288]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 12
Node /17 input 0: size torch.Size([256]) unstable 44
-----------------
# of unstable neurons: 56
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 80] 
split level 2: [/input, 149] 
split level 3: [/input.3, 159] 
split level 4: [/input.3, 26] 
split level 5: [/input.3, 31] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00019025802612304688
Time: prepare 0.1170    bound 0.0061    transfer 0.0002    finalize 0.0025    func 0.1258    
Accumulated time: func 0.1258    prepare 0.1175    bound 0.0061    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0314    set_bounds 0.0115    solve 0.1258    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0314    set_bounds 0.0115    solve 0.1258    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17492461204528809

Result: safe in 5.8159 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_4_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.00817149, 0.01446430, 0.03330220, 0.02913301, 0.65194571, 0.01906493,
         0.01400349, 0.06565259, 0.01700511, 0.14688310]], device='cuda:0')
diversed PGD initialization time: 0.1273
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.22253224e-03,  5.96602261e-03,  1.87950283e-02,  8.25171173e-03,
          -1.71797015e-02,  9.61022824e-03,  2.50730664e-04, -1.90010816e-02,
           1.43438801e-02,  9.81039107e-01],
         [ 1.22253224e-03,  5.96602261e-03,  1.87950283e-02,  8.25171173e-03,
          -1.71797015e-02,  9.61022824e-03,  2.50730664e-04, -1.90010816e-02,
           1.43438801e-02,  9.81039107e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.01840223, -0.02314572, -0.03597473, -0.02543141, -0.02678993,
          -0.01743043,  0.00182138, -0.03152358, -0.99821883]]],
       device='cuda:0')
number of violation:  8
Attack finished in 0.2026 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2985 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_5_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-5.31170517e-04,  9.70745325e-01,  1.56700611e-04, -5.92699647e-03,
         -6.15923107e-03,  4.48816270e-03, -5.28837740e-03,  6.38365746e-04,
          4.70572710e-03,  1.57397017e-02]], device='cuda:0')
diversed PGD initialization time: 0.1253
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.04222716,  0.32503074, -0.15118702, -0.13178772,  0.71135855,
          -0.05974822, -0.03372490,  0.41355896, -0.04457030, -0.02927777],
         [-0.04222716,  0.32503074, -0.15118702, -0.13178772,  0.71135855,
          -0.05974822, -0.03372490,  0.41355896, -0.04457030, -0.02927777]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.36725789,  0.47621775,  0.45681846, -0.38632780,  0.38477898,
           0.35875565, -0.08852822,  0.36960104,  0.35430852]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.1471 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.1955 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_6_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00403999, -0.00808323,  0.00099453, -0.01128195,  0.80430007,
          0.04806478,  0.00584018,  0.01411499,  0.06017677,  0.07524915]],
       device='cuda:0')
diversed PGD initialization time: 0.1286
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00662798, -0.02163719,  0.01447141, -0.03758171,  0.09873828,
           0.07182723,  0.01549726,  0.00489679,  0.20505700,  0.66677618],
         [-0.00662798, -0.02163719,  0.01447141, -0.03758171,  0.09873828,
           0.07182723,  0.01549726,  0.00489679,  0.20505700,  0.66677618]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.10536627,  0.12037547,  0.08426687,  0.13631999,  0.02691105,
           0.08324103,  0.09384149, -0.10631871, -0.56803787]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.2081 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_7_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00311155,  0.01144221,  0.03765531,  0.00726800, -0.04644458,
          0.01462993,  0.00850128, -0.03858373,  0.01207695,  0.98303205]],
       device='cuda:0')
diversed PGD initialization time: 0.1238
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.05196262, -0.06907822,  0.29806647, -0.13100278, -0.08039987,
          -0.00239039, -0.05408725, -0.03189260,  0.95687026,  0.10392192],
         [-0.05196262, -0.06907822,  0.29806647, -0.13100278, -0.08039987,
          -0.00239039, -0.05408725, -0.03189260,  0.95687026,  0.10392192]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.15588453,  0.17300014, -0.19414455,  0.23492470,  0.18432179,
           0.10631231,  0.15800917,  0.13581452, -0.85294831]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.1354 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2125 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_8_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 9.53650102e-03,  6.60426915e-03,  2.15996951e-02, -1.28152668e-02,
          1.39452517e-04,  6.44733250e-01,  2.66035736e-01,  4.36972082e-03,
          3.40053923e-02,  1.91401020e-02]], device='cuda:0')
diversed PGD initialization time: 0.1278
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00700628, -0.00192861,  0.00436686, -0.00224263, -0.00278980,
           0.05967182,  0.94187164, -0.00574400,  0.01359648,  0.00743125],
         [ 0.00700628, -0.00192861,  0.00436686, -0.00224263, -0.00278980,
           0.05967182,  0.94187164, -0.00574400,  0.01359648,  0.00743125]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.05266554,  0.06160043,  0.05530496,  0.06191446,  0.06246163,
          -0.88219982,  0.06541581,  0.04607534,  0.05224057]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2144 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3205 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_9_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-2.19890848e-03, -7.95841217e-04, -1.72124803e-03, -5.94280660e-04,
          6.78814575e-03,  6.97164983e-03,  1.13326311e-03, -9.05811787e-04,
          4.17713076e-03,  9.98625875e-01]], device='cuda:0')
diversed PGD initialization time: 0.1444
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01956527, -0.06153300,  0.01892738, -0.04736441, -0.01018769,
           0.00184468,  0.01506542, -0.02255216,  0.89611465,  0.20109445],
         [-0.01956527, -0.06153300,  0.01892738, -0.04736441, -0.01018769,
           0.00184468,  0.01506542, -0.02255216,  0.89611465,  0.20109445]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.22065972,  0.26262745,  0.18216707,  0.24845886,  0.21128213,
           0.19924977,  0.18602903,  0.22364661, -0.69502020]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2248 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3403 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_10_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.00351512, -0.00994703,  0.00180942, -0.00614150, -0.00729699,
         -0.00866195, -0.00666524, -0.01253696,  0.00125126, -0.00720511]],
       device='cuda:0')
diversed PGD initialization time: 0.1243
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.94920170,  0.01011929,  0.01553358,  0.01237401,  0.00746626,
          -0.00746885, -0.03617580,  0.01264372,  0.00703596,  0.00675859],
         [ 0.94920170,  0.01011929,  0.01553358,  0.01237401,  0.00746626,
          -0.00746885, -0.03617580,  0.01264372,  0.00703596,  0.00675859]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.93908238, 0.93366814, 0.93682772, 0.94173545, 0.95667052,
          0.98537749, 0.93655801, 0.94216573, 0.94244313]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7142 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.00351512, -0.00994703,  0.00180942, -0.00614150, -0.00729699,
         -0.00866195, -0.00666524, -0.01253696,  0.00125126, -0.00720511]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 14, 1, 9] with unstable size 13 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59710956, 0.51181185, 0.58543223, 0.60704321, 0.56378943, 0.54837441,
         0.58400965, 0.59292006, 0.59257501]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.8651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_11_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.39564884e-03, -6.00337982e-04,  4.37040627e-03,  6.78882748e-03,
         -3.03993374e-03,  5.82762063e-04,  1.00095010e+00, -2.49482691e-03,
          2.67008692e-03,  5.13811409e-03]], device='cuda:0')
diversed PGD initialization time: 0.1262
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.47670868,  0.02591446,  0.03950432,  0.02110032, -0.02295090,
          -0.01778810,  0.39301938,  0.00392422,  0.00850406,  0.04642542],
         [ 0.47670868,  0.02591446,  0.03950432,  0.02110032, -0.02295090,
          -0.01778810,  0.39301938,  0.00392422,  0.00850406,  0.04642542]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.08368930,  0.36710492,  0.35351506,  0.37191907,  0.41597027,
           0.41080749,  0.38909516,  0.38451532,  0.34659395]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.2006 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_12_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.62405893e-03,  2.00667232e-03,  6.84590638e-03,  3.86990607e-04,
         -5.00137731e-03,  1.27046108e-02,  2.89206579e-03, -1.47104859e-02,
          1.57490298e-02,  9.85099077e-01]], device='cuda:0')
diversed PGD initialization time: 0.1246
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02075746, -0.01396686,  0.02533837, -0.01291306, -0.00613053,
          -0.00223003,  0.00326606, -0.00645067,  0.99469793, -0.00533550],
         [-0.02075746, -0.01396686,  0.02533837, -0.01291306, -0.00613053,
          -0.00223003,  0.00326606, -0.00645067,  0.99469793, -0.00533550]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.54219531e-02,  8.63135606e-03, -3.06738690e-02,  7.57756084e-03,
           7.95025378e-04, -3.10547650e-03, -8.60156119e-03,  1.11516565e-03,
          -1.00003338e+00]]], device='cuda:0')
number of violation:  4
Attack finished in 0.1943 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3163 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_13_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
         -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465]],
       device='cuda:0')
diversed PGD initialization time: 0.1224
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.68021560,  0.00079507, -0.01448506, -0.00664632, -0.01061643,
           0.42490825,  0.00202388,  0.01835589,  0.05968024, -0.06383640],
         [ 0.68021560,  0.00079507, -0.01448506, -0.00664632, -0.01061643,
           0.42490825,  0.00202388,  0.01835589,  0.05968024, -0.06383640]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.67942053, 0.69470066, 0.68686193, 0.69083202, 0.25530735,
          0.67819172, 0.66185969, 0.62053537, 0.74405199]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6480 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
         -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 69, 1, 13] with unstable size 68 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [68]; unstable size 68; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 68] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.65602124, -1.22622895, -1.22597718, -0.89001971, -1.77858901,
         -1.13700128, -1.37646890, -1.81205297, -1.27531493]], device='cuda:0') None
best_l after optimization: -1.572516918182373
alpha/beta optimization time: 2.3721630573272705
initial alpha-crown bounds: tensor([[ 0.05029568, -0.08371553, -0.12503996,  0.01653772, -0.53163540,
         -0.10384282, -0.37758619, -0.37284178, -0.04468854]], device='cuda:0')
Worst class: (+ rhs) -0.5316354036331177
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.87139463424683
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.05029568076133728.

Properties batch 1, size 1
Remaining timeout: 116.79577898979187
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08371553]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08371553]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 28] 
split level 2: [/input.3, 31] 
split level 3: [/input.3, 254] 
split level 4: [/input.3, 132] 
split level 5: [/input.3, 170] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00014781951904296875
Time: prepare 0.0693    bound 0.0057    transfer 0.0002    finalize 0.0019    func 0.0773    
Accumulated time: func 0.0773    prepare 0.0698    bound 0.0057    transfer 0.0002    finalize 0.0019    
length of domains: 0
Time: pickout 0.0004    decision 0.0360    set_bounds 0.0243    solve 0.0774    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0360    set_bounds 0.0243    solve 0.0774    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1432197093963623


Properties batch 2, size 1
Remaining timeout: 116.53732442855835
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12503996]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12503996]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 254] 
split level 2: [/input.3, 236] 
split level 3: [/input.3, 31] 
split level 4: [/input.3, 28] 
split level 5: [/input.3, 170] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0002713203430175781
Time: prepare 0.0047    bound 0.0125    transfer 0.0003    finalize 0.0042    func 0.0217    
Accumulated time: func 0.0217    prepare 0.0052    bound 0.0125    transfer 0.0003    finalize 0.0042    
length of domains: 0
Time: pickout 0.0004    decision 0.0317    set_bounds 0.0105    solve 0.0217    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0317    set_bounds 0.0105    solve 0.0217    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.07005691528320312


Properties batch 3, size 1
Remaining timeout: 116.31247568130493
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.01653771847486496.

Properties batch 4, size 1
Remaining timeout: 116.23422479629517
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.53163540]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.53163540]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 197] 
split level 2: [/input.3, 254] 
split level 3: [/input.3, 236] 
split level 4: [/input.3, 132] 
split level 5: [/input.3, 28] 
pruning_in_iteration open status: True
ratio of positive domain = 62 / 64 = 0.96875
pruning-in-iteration extra time: 0.025203227996826172
Time: prepare 0.0035    bound 0.3159    transfer 0.0004    finalize 0.0021    func 0.3221    
Accumulated time: func 0.3221    prepare 0.0040    bound 0.3159    transfer 0.0004    finalize 0.0021    
Current worst splitting domains lb-rhs (depth):
-0.04280 (6), -0.00838 (6), 
length of domains: 2
Time: pickout 0.0004    decision 0.0315    set_bounds 0.0113    solve 0.3221    add 0.0008    
Accumulated time: pickout 0.0004    decision 0.0315    set_bounds 0.0113    solve 0.3221    add 0.0008    
Current (lb-rhs): -0.04279685020446777
2 domains visited
Cumulative time: 0.3714470863342285

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 93] [/input, 149] 
split level 1: [/input, 149] [/input, 55] 
split level 2: [/input, 55] [/input, 254] 
split level 3: [/input, 254] [/input, 245] 
split level 4: [/input, 245] [/input.3, 115] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.273124694824219e-05
Time: prepare 0.0421    bound 0.0051    transfer 0.0001    finalize 0.0025    func 0.0499    
Accumulated time: func 0.3720    prepare 0.0467    bound 0.3210    transfer 0.0005    finalize 0.0046    
length of domains: 0
Time: pickout 0.0005    decision 0.0785    set_bounds 0.0235    solve 0.0500    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.1100    set_bounds 0.0347    solve 0.3721    add 0.0009    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.5243597030639648


Properties batch 5, size 1
Remaining timeout: 115.55413246154785
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.10384282]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.10384282]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 244] 
split level 2: [/input.3, 254] 
split level 3: [/input.3, 28] 
split level 4: [/input, 55] 
split level 5: [/input.3, 216] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 9.822845458984375e-05
Time: prepare 0.1048    bound 0.0057    transfer 0.0002    finalize 0.0025    func 0.1132    
Accumulated time: func 0.1132    prepare 0.1053    bound 0.0057    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0278    set_bounds 0.0218    solve 0.1132    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0278    set_bounds 0.0218    solve 0.1132    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.16888880729675293


Properties batch 6, size 1
Remaining timeout: 115.25058174133301
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37758619]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37758619]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 124] 
split level 2: [/input, 55] 
split level 3: [/input.3, 254] 
split level 4: [/input.3, 133] 
split level 5: [/input.3, 28] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00013971328735351562
Time: prepare 0.1152    bound 0.0055    transfer 0.0002    finalize 0.0025    func 0.1235    
Accumulated time: func 0.1235    prepare 0.1157    bound 0.0055    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0316    set_bounds 0.0112    solve 0.1236    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0316    set_bounds 0.0112    solve 0.1236    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17258405685424805


Properties batch 7, size 1
Remaining timeout: 114.93994688987732
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37284178]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37284178]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 162] 
split level 2: [/input.3, 150] 
split level 3: [/input.3, 30] 
split level 4: [/input.3, 254] 
split level 5: [/input.3, 28] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.022897720336914062
Time: prepare 0.0460    bound 0.3036    transfer 0.0010    finalize 0.0043    func 0.3550    
Accumulated time: func 0.3550    prepare 0.0465    bound 0.3036    transfer 0.0010    finalize 0.0043    
Current worst splitting domains lb-rhs (depth):
-0.03838 (6), 
length of domains: 1
Time: pickout 0.0004    decision 0.0312    set_bounds 0.0107    solve 0.3551    add 0.0030    
Accumulated time: pickout 0.0004    decision 0.0312    set_bounds 0.0107    solve 0.3551    add 0.0030    
Current (lb-rhs): -0.03837776184082031
1 domains visited
Cumulative time: 0.4060795307159424

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 254] 
split level 1: [/input, 245] 
split level 2: [/input.3, 181] 
split level 3: [/input.3, 132] 
split level 4: [/input.3, 71] 
split level 5: [/input.3, 155] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011277198791503906
Time: prepare 0.0232    bound 0.0054    transfer 0.0002    finalize 0.0026    func 0.0315    
Accumulated time: func 0.3865    prepare 0.0703    bound 0.3091    transfer 0.0011    finalize 0.0069    
length of domains: 0
Time: pickout 0.0005    decision 0.0871    set_bounds 0.0127    solve 0.0315    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.1183    set_bounds 0.0234    solve 0.3866    add 0.0031    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.5382471084594727


Properties batch 8, size 1
Remaining timeout: 114.2545428276062
##### Instance 193 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04468854]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99949753, -0.00640095,  0.01320261,  0.00485738, -0.00442319,
        -0.01722344, -0.00721346, -0.00918069, -0.00530280, -0.00641465],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04468854]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 13
Node /17 input 0: size torch.Size([256]) unstable 49
-----------------
# of unstable neurons: 62
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 1] 
split level 1: [/input.3, 254] 
split level 2: [/input.3, 170] 
split level 3: [/input.3, 155] 
split level 4: [/input, 149] 
split level 5: [/input.3, 31] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.296966552734375e-05
Time: prepare 0.0976    bound 0.0056    transfer 0.0002    finalize 0.0025    func 0.1058    
Accumulated time: func 0.1058    prepare 0.0981    bound 0.0056    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0266    set_bounds 0.0264    solve 0.1059    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0266    set_bounds 0.0264    solve 0.1059    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1649777889251709

Result: safe in 6.0352 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_14_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
         -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
         -2.24035978e-03,  1.40997767e-03]], device='cuda:0')
diversed PGD initialization time: 0.1254
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00734226,  0.64879692,  0.02976076, -0.00706089,  0.05653586,
           0.09112366,  0.01942788,  0.06996197,  0.04909028,  0.03591770],
         [-0.00734226,  0.64879692,  0.02976076, -0.00706089,  0.05653586,
           0.09112366,  0.01942788,  0.06996197,  0.04909028,  0.03591770]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.65613919, 0.61903614, 0.65585780, 0.59226108, 0.55767328,
          0.62936902, 0.57883495, 0.59970665, 0.61287922]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7081 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
         -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
         -2.24035978e-03,  1.40997767e-03]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 101, 1, 31] with unstable size 100 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [100]; unstable size 100; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23537859, -0.54829997, -1.55405521, -0.73347032, -0.98101062,
         -0.48420048, -0.58141458, -0.98507428, -1.06011987]], device='cuda:0') None
best_l after optimization: -3.2068099975585938
alpha/beta optimization time: 2.4173355102539062
initial alpha-crown bounds: tensor([[ 0.03165150, -0.07075474, -1.14883542, -0.26524445, -0.52556098,
         -0.09209526, -0.15262660, -0.42110530, -0.56223857]], device='cuda:0')
Worst class: (+ rhs) -1.1488354206085205
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 116.72953724861145
##### Instance 194 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.03165149688720703.

Properties batch 1, size 1
Remaining timeout: 116.64481782913208
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07075474]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07075474]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 72] 
split level 2: [/input.3, 121] 
split level 3: [/input.3, 232] 
split level 4: [/input, 209] 
split level 5: [/input.3, 21] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 7.939338684082031e-05
Time: prepare 0.0392    bound 0.0052    transfer 0.0001    finalize 0.0023    func 0.0470    
Accumulated time: func 0.0470    prepare 0.0398    bound 0.0052    transfer 0.0001    finalize 0.0023    
length of domains: 0
Time: pickout 0.0004    decision 0.0793    set_bounds 0.0247    solve 0.0471    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0793    set_bounds 0.0247    solve 0.0471    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1561110019683838


Properties batch 2, size 1
Remaining timeout: 116.3850610256195
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.14883542]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.14883542]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 153] 
split level 2: [/input.3, 236] 
split level 3: [/input.3, 200] 
split level 4: [/input.3, 143] 
split level 5: [/input, 209] 
pruning_in_iteration open status: True
ratio of positive domain = 43 / 64 = 0.671875
pruning-in-iteration extra time: 0.02299666404724121
Time: prepare 0.1043    bound 0.3214    transfer 0.0004    finalize 0.0029    func 0.4293    
Accumulated time: func 0.4293    prepare 0.1048    bound 0.3214    transfer 0.0004    finalize 0.0029    
Current worst splitting domains lb-rhs (depth):
-0.69675 (6), -0.66006 (6), -0.37956 (6), -0.35880 (6), -0.28886 (6), -0.25081 (6), -0.22676 (6), -0.17460 (6), -0.16217 (6), -0.12858 (6), -0.11703 (6), -0.11611 (6), -0.11105 (6), -0.09271 (6), -0.09092 (6), -0.08426 (6), -0.03756 (6), -0.03611 (6), -0.03252 (6), -0.02257 (6), 
length of domains: 21
Time: pickout 0.0005    decision 0.0279    set_bounds 0.0220    solve 0.4294    add 0.0014    
Accumulated time: pickout 0.0005    decision 0.0279    set_bounds 0.0220    solve 0.4294    add 0.0014    
Current (lb-rhs): -0.6967501640319824
21 domains visited
Cumulative time: 0.48688292503356934

BaB round 2
batch: 21
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 220] [/input.3, 220] [/input.3, 217] [/input, 100] [/input, 171] [/input, 110] [/input, 110] [/input, 110] [/input, 175] [/input, 110] 
split level 1: [/input, 100] [/input, 100] [/input, 100] [/input, 171] [/input, 138] [/input, 100] [/input, 100] [/input, 100] [/input, 100] [/input, 100] 
pruning_in_iteration open status: True
ratio of positive domain = 66 / 84 = 0.7857142857142857
pruning-in-iteration extra time: 0.023466110229492188
Time: prepare 0.1139    bound 0.3265    transfer 0.0003    finalize 0.0035    func 0.4443    
Accumulated time: func 0.8736    prepare 0.2191    bound 0.6479    transfer 0.0008    finalize 0.0064    
Current worst splitting domains lb-rhs (depth):
-0.43319 (8), -0.40638 (8), -0.35539 (8), -0.31638 (8), -0.12182 (8), -0.11177 (8), -0.10796 (8), -0.10418 (8), -0.09763 (8), -0.09424 (8), -0.09133 (8), -0.08197 (8), -0.06801 (8), -0.06279 (8), -0.06044 (8), -0.04701 (8), -0.01797 (8), -0.00942 (8), 
length of domains: 18
Time: pickout 0.0006    decision 0.0487    set_bounds 0.0314    solve 0.4444    add 0.0012    
Accumulated time: pickout 0.0011    decision 0.0765    set_bounds 0.0534    solve 0.8738    add 0.0025    
Current (lb-rhs): -0.4331897497177124
39 domains visited
Cumulative time: 1.0136189460754395

BaB round 3
batch: 18
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 110] [/input, 171] [/input, 110] [/input, 175] [/input, 138] [/input, 110] [/input, 138] [/input, 110] [/input, 110] [/input, 138] 
split level 1: [/input, 227] [/input, 227] [/input, 227] [/input, 100] [/input, 227] [/input, 227] [/input, 100] [/input, 227] [/input, 100] [/input, 100] 
pruning_in_iteration open status: True
ratio of positive domain = 66 / 72 = 0.9166666666666666
pruning-in-iteration extra time: 0.021040678024291992
Time: prepare 0.0292    bound 0.3227    transfer 0.0004    finalize 0.0038    func 0.3562    
Accumulated time: func 1.2298    prepare 0.2489    bound 0.9707    transfer 0.0012    finalize 0.0102    
Current worst splitting domains lb-rhs (depth):
-0.15640 (10), -0.06171 (10), -0.04102 (10), -0.03393 (10), -0.03291 (10), -0.00123 (10), 
length of domains: 6
Time: pickout 0.0006    decision 0.1133    set_bounds 0.0104    solve 0.3562    add 0.0009    
Accumulated time: pickout 0.0017    decision 0.1898    set_bounds 0.0639    solve 1.2300    add 0.0034    
Current (lb-rhs): -0.1563969850540161
45 domains visited
Cumulative time: 1.4954845905303955

BaB round 4
batch: 6
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input, 175] [/input, 175] [/input, 175] [/input, 175] [/input, 175] [/input, 175] 
split level 1: [/input, 138] [/input, 227] [/input, 138] [/input, 138] [/input, 227] [/input, 138] 
split level 2: [/input, 154] [/input, 133] [/input, 154] [/input, 154] [/input, 154] [/input, 154] 
split level 3: [/input, 133] [/input, 154] [/input, 133] [/input, 133] [/input, 133] [/input, 133] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 7.915496826171875e-05
Time: prepare 0.0328    bound 0.0056    transfer 0.0001    finalize 0.0037    func 0.0424    
Accumulated time: func 1.2722    prepare 0.2821    bound 0.9763    transfer 0.0013    finalize 0.0139    
length of domains: 0
Time: pickout 0.0005    decision 0.1261    set_bounds 0.0152    solve 0.0424    add 0.0001    
Accumulated time: pickout 0.0022    decision 0.3159    set_bounds 0.0790    solve 1.2725    add 0.0035    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
45 domains visited
Cumulative time: 1.6802332401275635


Properties batch 3, size 1
Remaining timeout: 114.57160234451294
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26524445]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26524445]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 26] 
split level 2: [/input.3, 18] 
split level 3: [/input.3, 43] 
split level 4: [/input.3, 110] 
split level 5: [/input, 100] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00012111663818359375
Time: prepare 0.0650    bound 0.0058    transfer 0.0002    finalize 0.0025    func 0.0735    
Accumulated time: func 0.0735    prepare 0.0655    bound 0.0058    transfer 0.0002    finalize 0.0025    
length of domains: 0
Time: pickout 0.0004    decision 0.0595    set_bounds 0.0372    solve 0.0735    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0595    set_bounds 0.0372    solve 0.0735    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1762704849243164


Properties batch 4, size 1
Remaining timeout: 114.27998280525208
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.52556098]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.52556098]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 236] 
split level 2: [/input.3, 193] 
split level 3: [/input.3, 197] 
split level 4: [/input.3, 72] 
split level 5: [/input.3, 55] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.023496627807617188
Time: prepare 0.1107    bound 0.3203    transfer 0.0004    finalize 0.0022    func 0.4338    
Accumulated time: func 0.4338    prepare 0.1112    bound 0.3203    transfer 0.0004    finalize 0.0022    
Current worst splitting domains lb-rhs (depth):
-0.00181 (6), 
length of domains: 1
Time: pickout 0.0004    decision 0.0304    set_bounds 0.0119    solve 0.4338    add 0.0008    
Accumulated time: pickout 0.0004    decision 0.0304    set_bounds 0.0119    solve 0.4338    add 0.0008    
Current (lb-rhs): -0.001807570457458496
1 domains visited
Cumulative time: 0.4831516742706299

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 110] 
split level 1: [/input, 100] 
split level 2: [/input, 171] 
split level 3: [/input, 209] 
split level 4: [/input, 138] 
split level 5: [/input, 154] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.20159912109375e-05
Time: prepare 0.0995    bound 0.0053    transfer 0.0001    finalize 0.0047    func 0.1098    
Accumulated time: func 0.5435    prepare 0.2113    bound 0.3256    transfer 0.0006    finalize 0.0069    
length of domains: 0
Time: pickout 0.0005    decision 0.0286    set_bounds 0.0270    solve 0.1100    add 0.0002    
Accumulated time: pickout 0.0009    decision 0.0591    set_bounds 0.0389    solve 0.5439    add 0.0010    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.6498866081237793


Properties batch 5, size 1
Remaining timeout: 113.51347541809082
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09209526]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09209526]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 244] 
split level 2: [/input.3, 43] 
split level 3: [/input.3, 55] 
split level 4: [/input.3, 153] 
split level 5: [/input, 209] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00014019012451171875
Time: prepare 0.1121    bound 0.0057    transfer 0.0002    finalize 0.0026    func 0.1206    
Accumulated time: func 0.1206    prepare 0.1126    bound 0.0057    transfer 0.0002    finalize 0.0026    
length of domains: 0
Time: pickout 0.0004    decision 0.0292    set_bounds 0.0150    solve 0.1206    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0292    set_bounds 0.0150    solve 0.1206    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17087340354919434


Properties batch 6, size 1
Remaining timeout: 113.20300579071045
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.15262660]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15262660]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 126] 
split level 2: [/input.3, 13] 
split level 3: [/input.3, 69] 
split level 4: [/input.3, 43] 
split level 5: [/input.3, 217] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00015926361083984375
Time: prepare 0.0997    bound 0.0058    transfer 0.0002    finalize 0.0020    func 0.1077    
Accumulated time: func 0.1077    prepare 0.1002    bound 0.0058    transfer 0.0002    finalize 0.0020    
length of domains: 0
Time: pickout 0.0004    decision 0.0294    set_bounds 0.0120    solve 0.1078    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0294    set_bounds 0.0120    solve 0.1078    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1553201675415039


Properties batch 7, size 1
Remaining timeout: 112.91590404510498
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.42110530]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.42110530]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 150] 
split level 2: [/input.3, 162] 
split level 3: [/input.3, 43] 
split level 4: [/input.3, 30] 
split level 5: [/input.3, 121] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.02562236785888672
Time: prepare 0.0046    bound 0.2838    transfer 0.0004    finalize 0.0020    func 0.2910    
Accumulated time: func 0.2910    prepare 0.0051    bound 0.2838    transfer 0.0004    finalize 0.0020    
Current worst splitting domains lb-rhs (depth):
-0.02445 (6), 
length of domains: 1
Time: pickout 0.0004    decision 0.0304    set_bounds 0.0106    solve 0.2911    add 0.0008    
Accumulated time: pickout 0.0004    decision 0.0304    set_bounds 0.0106    solve 0.2911    add 0.0008    
Current (lb-rhs): -0.024454355239868164
1 domains visited
Cumulative time: 0.33890485763549805

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 211] 
split level 1: [/input, 198] 
split level 2: [/input, 216] 
split level 3: [/input, 188] 
split level 4: [/input, 150] 
split level 5: [/input, 245] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.416175842285156e-05
Time: prepare 0.0987    bound 0.0058    transfer 0.0001    finalize 0.0023    func 0.1070    
Accumulated time: func 0.3979    prepare 0.1043    bound 0.2896    transfer 0.0005    finalize 0.0043    
length of domains: 0
Time: pickout 0.0005    decision 0.0275    set_bounds 0.0276    solve 0.1071    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.0579    set_bounds 0.0382    solve 0.3982    add 0.0008    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.5019378662109375


Properties batch 8, size 1
Remaining timeout: 112.26627135276794
##### Instance 194 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.56223857]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.57494098e-04,  9.63204503e-01,  4.05466557e-03, -1.76837295e-03,
        -3.94506380e-03, -4.50909138e-05,  9.71294940e-04,  5.55922091e-03,
        -2.24035978e-03,  1.40997767e-03], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.56223857]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 31
Node /17 input 0: size torch.Size([256]) unstable 71
-----------------
# of unstable neurons: 102
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 63] 
split level 1: [/input.3, 80] 
split level 2: [/input.3, 26] 
split level 3: [/input.3, 159] 
split level 4: [/input, 100] 
split level 5: [/input.3, 43] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00010633468627929688
Time: prepare 0.1057    bound 0.0058    transfer 0.0002    finalize 0.0024    func 0.1142    
Accumulated time: func 0.1142    prepare 0.1063    bound 0.0058    transfer 0.0002    finalize 0.0024    
length of domains: 0
Time: pickout 0.0004    decision 0.0287    set_bounds 0.0232    solve 0.1143    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0287    set_bounds 0.0232    solve 0.1143    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17201519012451172

Result: safe in 8.0388 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_15_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-5.07580116e-03, -1.31901652e-02, -1.75343454e-03, -1.00400150e-02,
         -2.86085121e-02,  1.02809298e+00, -1.57665834e-03, -3.15846503e-02,
         -9.02482867e-03, -3.15256417e-04]], device='cuda:0')
diversed PGD initialization time: 0.1253
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00493338, -0.01488442, -0.01937324, -0.02662671, -0.01604599,
           0.99523968, -0.03842035, -0.03521495,  0.13472840, -0.00338246],
         [-0.00493338, -0.01488442, -0.01937324, -0.02662671, -0.01604599,
           0.99523968, -0.03842035, -0.03521495,  0.13472840, -0.00338246]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00017309, 1.01012409, 1.01461291, 1.02186632, 1.01128566,
          1.03366005, 1.03045464, 0.86051130, 0.99862212]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6780 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/18): BoundLinear(name=/18, inputs=[/17, /11, /12], perturbed=True)
)
Original output: tensor([[-5.07580116e-03, -1.31901652e-02, -1.75343454e-03, -1.00400150e-02,
         -2.86085121e-02,  1.02809298e+00, -1.57665834e-03, -3.15846503e-02,
         -9.02482867e-03, -3.15256417e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /7, /8], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /9, /10], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 256 ([1, 256])
layer /15 start_node /input.3 using sparse-spec alpha [2, 34, 1, 18] with unstable size 33 total_size 256 output_shape torch.Size([256])
layer /15 start_node /18 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [33]; unstable size 33; total size 256 ([1, 256])
layer /17 start_node /18 using full alpha [2, 9, 1, 33] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.28147984, -0.45879483, -0.47683519, -1.11568189, -0.35724360,
         -0.87609029, -0.48073968, -1.38517904, -0.41760811]], device='cuda:0') None
best_l after optimization: 0.2836049497127533
alpha/beta optimization time: 1.9023346900939941
initial alpha-crown bounds: tensor([[ 0.13460319,  0.12124114,  0.11351474, -0.50025576,  0.15329535,
          0.19177938,  0.13940692, -0.18332152,  0.11334155]], device='cuda:0')
Worst class: (+ rhs) -0.5002557635307312
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 256]), torch.Size([9, 1, 256])]

Properties batch 0, size 1
Remaining timeout: 117.25752592086792
##### Instance 195 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13460318744182587.

Properties batch 1, size 1
Remaining timeout: 117.17975425720215
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.12124114483594894.

Properties batch 2, size 1
Remaining timeout: 117.09856748580933
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1135147362947464.

Properties batch 3, size 1
Remaining timeout: 117.02035474777222
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50025576]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.07580116e-03, -1.31901652e-02, -1.75343454e-03, -1.00400150e-02,
        -2.86085121e-02,  1.02809298e+00, -1.57665834e-03, -3.15846503e-02,
        -9.02482867e-03, -3.15256417e-04], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /input.3
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50025576]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 18
Node /17 input 0: size torch.Size([256]) unstable 22
-----------------
# of unstable neurons: 40
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 247] 
split level 1: [/input.3, 153] 
split level 2: [/input.3, 220] 
split level 3: [/input.3, 31] 
split level 4: [/input, 17] 
split level 5: [/input.3, 200] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.027865171432495117
Time: prepare 0.1310    bound 0.2530    transfer 0.0067    finalize 0.0071    func 0.3980    
Accumulated time: func 0.3980    prepare 0.1316    bound 0.2530    transfer 0.0067    finalize 0.0071    
Current worst splitting domains lb-rhs (depth):
-0.00432 (6), 
length of domains: 1
Time: pickout 0.0004    decision 0.0315    set_bounds 0.0124    solve 0.3980    add 0.0042    
Accumulated time: pickout 0.0004    decision 0.0315    set_bounds 0.0124    solve 0.3980    add 0.0042    
Current (lb-rhs): -0.004315495491027832
1 domains visited
Cumulative time: 0.45649051666259766

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 175] 
split level 1: [/input, 87] 
split level 2: [/input, 222] 
split level 3: [/input, 227] 
split level 4: [/input, 209] 
split level 5: [/input, 100] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0001342296600341797
Time: prepare 0.0070    bound 0.0070    transfer 0.0005    finalize 0.0070    func 0.0215    
Accumulated time: func 0.4195    prepare 0.1391    bound 0.2600    transfer 0.0072    finalize 0.0141    
length of domains: 0
Time: pickout 0.0005    decision 0.0488    set_bounds 0.0114    solve 0.0217    add 0.0001    
Accumulated time: pickout 0.0009    decision 0.0803    set_bounds 0.0239    solve 0.4197    add 0.0043    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 0.5392518043518066


Properties batch 4, size 1
Remaining timeout: 116.35693955421448
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1532953530550003.

Properties batch 5, size 1
Remaining timeout: 116.27378296852112
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.19177937507629395.

Properties batch 6, size 1
Remaining timeout: 116.19114875793457
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13940691947937012.

Properties batch 7, size 1
Remaining timeout: 116.11249566078186
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18332152]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.07580116e-03, -1.31901652e-02, -1.75343454e-03, -1.00400150e-02,
        -2.86085121e-02,  1.02809298e+00, -1.57665834e-03, -3.15846503e-02,
        -9.02482867e-03, -3.15256417e-04], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /18 with alignment adjustment
setting alpha for layer /17 start_node /18 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18332152]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/18
Keeping alphas for these layers: ['/18']
Node /15 input 0: size torch.Size([256]) unstable 18
Node /17 input 0: size torch.Size([256]) unstable 22
-----------------
# of unstable neurons: 40
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 247] 
split level 1: [/input.3, 150] 
split level 2: [/input.3, 30] 
split level 3: [/input.3, 31] 
split level 4: [/input.3, 153] 
split level 5: [/input.3, 162] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00014019012451171875
Time: prepare 0.1122    bound 0.0057    transfer 0.0002    finalize 0.0019    func 0.1200    
Accumulated time: func 0.1200    prepare 0.1127    bound 0.0057    transfer 0.0002    finalize 0.0019    
length of domains: 0
Time: pickout 0.0004    decision 0.0316    set_bounds 0.0118    solve 0.1201    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0316    set_bounds 0.0118    solve 0.1201    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17379546165466309


Properties batch 8, size 1
Remaining timeout: 115.8087089061737
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1133415549993515.
Result: safe in 4.2669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_16_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00189631,  0.00460735,  0.00510068,  0.00580558, -0.00722648,
          0.00879319,  0.00195397, -0.00101946,  0.00704807,  0.97879851]],
       device='cuda:0')
diversed PGD initialization time: 0.1227
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00811127, 0.01232009, 0.02861077, 0.02386297, 0.50721407,
          0.01154826, 0.01369886, 0.01930603, 0.01080102, 0.36825317],
         [0.00811127, 0.01232009, 0.02861077, 0.02386297, 0.50721407,
          0.01154826, 0.01369886, 0.01930603, 0.01080102, 0.36825317]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.36014190,  0.35593307,  0.33964241,  0.34439021, -0.13896090,
           0.35670492,  0.35455433,  0.34894714,  0.35745215]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.1521 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2268 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_17_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[0.01098577, 0.01541807, 0.03307338, 0.03472100, 0.01841019, 0.03112879,
         0.01355752, 0.75772136, 0.02588174, 0.03225449]], device='cuda:0')
diversed PGD initialization time: 0.1362
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00177609, -0.02949312,  0.00289813, -0.07168373, -0.02230845,
          -0.00313928, -0.04138675, -0.06013784,  0.78942186,  0.40219063],
         [ 0.00177609, -0.02949312,  0.00289813, -0.07168373, -0.02230845,
          -0.00313928, -0.04138675, -0.06013784,  0.78942186,  0.40219063]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.06191393, -0.03064471, -0.06303596,  0.01154590, -0.03782939,
          -0.05699856, -0.01875109, -0.84955966, -0.46232846]]],
       device='cuda:0')
number of violation:  8
Attack finished in 0.2156 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.3044 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_18_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-0.00706117, -0.02815659,  0.02968852,  0.46559381, -0.01595617,
          0.06832974,  0.00853441, -0.06962320,  0.01777329,  0.52257586]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.00706117, -0.02815659,  0.02968849,  0.46559379, -0.01595615,
           0.06832968,  0.00853440, -0.06962319,  0.01777329,  0.52257597],
         [-0.00706117, -0.02815659,  0.02968849,  0.46559379, -0.01595615,
           0.06832968,  0.00853440, -0.06962319,  0.01777329,  0.52257597]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.47265494,  0.49375039,  0.43590528,  0.48154995,  0.39726412,
           0.45705938,  0.53521699,  0.44782048, -0.05698219]]],
       device='cuda:0')
number of violation:  1
Result: unsafe-pgd in 0.1233 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x2.onnx
Using vnnlib prop_19_0.04003922.vnnlib
784 inputs and 10 outputs in vnnlib
Loading onnx ../../props/mnist/mnist-net_256x2.onnx wih quirks {}
Attack parameters: initialization=osi, steps=100, restarts=100, alpha=0.010009810328483582, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[ 6.13927841e-05, -2.76147574e-03,  6.58036768e-03,  6.35011494e-03,
          9.44779456e-01,  7.48433918e-03,  4.47871909e-03, -5.17028570e-03,
          4.23301011e-03,  2.37681046e-02]], device='cuda:0')
diversed PGD initialization time: 0.1277
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 8.39926675e-03, -1.04348436e-02,  2.94391811e-03,  5.27299941e-04,
           6.05341047e-04,  2.83992067e-02,  7.06193596e-03, -5.58313727e-03,
           3.08662057e-02,  9.43715990e-01],
         [ 8.39926675e-03, -1.04348436e-02,  2.94391811e-03,  5.27299941e-04,
           6.05341047e-04,  2.83992067e-02,  7.06193596e-03, -5.58313727e-03,
           3.08662057e-02,  9.43715990e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-7.79392570e-03,  1.10401846e-02, -2.33857706e-03,  7.80411065e-05,
          -2.77938657e-02, -6.45659491e-03,  6.18847832e-03, -3.02608646e-02,
          -9.43110645e-01]]], device='cuda:0')
number of violation:  6
Attack finished in 0.1412 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.2028 seconds
############# Summary #############
Final verified acc: 70.0% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 140 , total falsified (unsafe/sat): 60 , timeout: 0
mean time for ALL instances (total 200):1.4223081640530488, max time: 51.405240535736084
mean time for verified SAFE instances(total 140): 1.91040198802948, max time: 51.405240535736084
mean time for verified (SAFE + UNSAFE) instances (total 200): 1.422308235168457, max time: [51.405240535736084, 0.9056696891784668, 0.8103656768798828, 0.822014331817627, 0.8766481876373291, 0.8514904975891113, 0.8094961643218994, 0.8403537273406982, 1.2265143394470215, 0.8146636486053467, 0.9320998191833496, 0.8627939224243164, 0.8156030178070068, 0.8574986457824707, 0.8413784503936768, 0.8537251949310303, 0.8594963550567627, 0.8537359237670898, 0.8700308799743652, 0.8547954559326172, 1.0389504432678223, 0.9412696361541748, 0.8503198623657227, 0.8192794322967529, 0.9478826522827148, 0.8547956943511963, 0.8709335327148438, 0.8494641780853271, 0.86549973487854, 0.8704688549041748, 0.8596229553222656, 0.8539237976074219, 0.8189303874969482, 0.8151350021362305, 0.8244662284851074, 0.8576507568359375, 0.8627307415008545, 0.8601827621459961, 0.8809282779693604, 0.8480470180511475, 0.8540024757385254, 0.854649543762207, 0.9414706230163574, 0.862260103225708, 0.8490619659423828, 0.7955868244171143, 0.8613004684448242, 0.8391838073730469, 0.8403840065002441, 0.8514130115509033, 0.8665201663970947, 0.8042538166046143, 0.6901910305023193, 0.5392136573791504, 0.7874929904937744, 0.897104024887085, 0.8951482772827148, 0.8669514656066895, 0.9218103885650635, 2.496577262878418, 0.8684060573577881, 0.8970701694488525, 0.9322311878204346, 0.9734845161437988, 0.8965225219726562, 0.8304767608642578, 0.9238810539245605, 2.653472661972046, 0.8127062320709229, 0.7612552642822266, 0.7649710178375244, 0.9203627109527588, 0.8800506591796875, 0.8680009841918945, 0.8499207496643066, 0.858245849609375, 0.8450312614440918, 0.8955514430999756, 0.8489611148834229, 2.6634461879730225, 0.8303568363189697, 4.285638332366943, 0.898195743560791, 0.818594217300415, 0.8131382465362549, 0.9134025573730469, 0.8829338550567627, 0.8993031978607178, 0.9315474033355713, 0.9382843971252441, 0.9345159530639648, 0.955695629119873, 0.8643617630004883, 0.8662886619567871, 1.0160880088806152, 0.9341447353363037, 0.926513671875, 4.572253227233887, 5.200251340866089, 0.8529839515686035, 0.8491885662078857, 0.9478180408477783, 0.9768943786621094, 0.9269475936889648, 0.9084930419921875, 0.8471560478210449, 0.8640766143798828, 5.5782997608184814, 2.714999198913574, 4.37227725982666, 0.8939547538757324, 7.159287452697754, 0.9316961765289307, 0.8979053497314453, 0.8352079391479492, 0.8997933864593506, 0.7946529388427734, 0.9297001361846924, 4.275346279144287, 5.982916831970215, 0.9759840965270996, 4.0923380851745605, 0.8554799556732178, 0.9700610637664795, 1.098696231842041, 0.8966081142425537, 0.8853781223297119, 4.858968019485474, 3.5652878284454346, 0.8041572570800781, 4.8869524002075195, 4.29598593711853, 4.996636867523193, 0.9549729824066162, 11.763105392456055, 5.815897226333618, 0.8650622367858887, 6.035245895385742, 8.038750171661377, 4.266886234283447]
mean time for verified UNSAFE instances (total 60): 0.28342281182607015, max time: 0.40524721145629883
safe-incomplete (total 118), index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 103, 109, 110, 111, 112, 113, 114, 115, 116, 123, 129, 130, 131, 133, 134, 135, 143, 150, 151, 153, 154, 155, 170, 175, 190]
unsafe-pgd (total 60), index: [58, 78, 80, 88, 98, 100, 102, 104, 106, 108, 118, 120, 122, 124, 126, 127, 128, 132, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 172, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 196, 197, 198, 199]
safe (total 22), index: [68, 82, 84, 105, 107, 117, 119, 121, 125, 136, 141, 149, 156, 163, 171, 173, 174, 176, 183, 193, 194, 195]
